// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace IgeMacIntegration {

	using System;
	using System.Collections;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public  class IgeMacDock : GLib.Object {

		[Obsolete]
		protected IgeMacDock(GLib.GType gtype) : base(gtype) {}
		public IgeMacDock(IntPtr raw) : base(raw) {}

		[DllImport("libigemacintegration.dylib")]
		static extern IntPtr ige_mac_dock_new();

		public IgeMacDock () : base (IntPtr.Zero)
		{
			if (GetType () != typeof (IgeMacDock)) {
				CreateNativeObject (new string [0], new GLib.Value[0]);
				return;
			}
			Raw = ige_mac_dock_new();
		}

		[GLib.CDeclCallback]
		delegate void QuitActivateVMDelegate (IntPtr inst);

		static QuitActivateVMDelegate QuitActivateVMCallback;

		static void quitactivate_cb (IntPtr inst)
		{
			try {
				IgeMacDock inst_managed = GLib.Object.GetObject (inst, false) as IgeMacDock;
				inst_managed.OnQuitActivate ();
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		private static void OverrideQuitActivate (GLib.GType gtype)
		{
			if (QuitActivateVMCallback == null)
				QuitActivateVMCallback = new QuitActivateVMDelegate (quitactivate_cb);
			OverrideVirtualMethod (gtype, "quit-activate", QuitActivateVMCallback);
		}

		[GLib.DefaultSignalHandler(Type=typeof(IgeMacIntegration.IgeMacDock), ConnectionMethod="OverrideQuitActivate")]
		protected virtual void OnQuitActivate ()
		{
			GLib.Value ret = GLib.Value.Empty;
			GLib.ValueArray inst_and_params = new GLib.ValueArray (1);
			GLib.Value[] vals = new GLib.Value [1];
			vals [0] = new GLib.Value (this);
			inst_and_params.Append (vals [0]);
			g_signal_chain_from_overridden (inst_and_params.ArrayPtr, ref ret);
			foreach (GLib.Value v in vals)
				v.Dispose ();
		}

		[GLib.Signal("quit-activate")]
		public event System.EventHandler QuitActivate {
			add {
				GLib.Signal sig = GLib.Signal.Lookup (this, "quit-activate");
				sig.AddDelegate (value);
			}
			remove {
				GLib.Signal sig = GLib.Signal.Lookup (this, "quit-activate");
				sig.RemoveDelegate (value);
			}
		}

		[GLib.CDeclCallback]
		delegate void OpenDocumentsVMDelegate (IntPtr inst);

		static OpenDocumentsVMDelegate OpenDocumentsVMCallback;

		static void opendocuments_cb (IntPtr inst)
		{
			try {
				IgeMacDock inst_managed = GLib.Object.GetObject (inst, false) as IgeMacDock;
				inst_managed.OnOpenDocuments ();
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		private static void OverrideOpenDocuments (GLib.GType gtype)
		{
			if (OpenDocumentsVMCallback == null)
				OpenDocumentsVMCallback = new OpenDocumentsVMDelegate (opendocuments_cb);
			OverrideVirtualMethod (gtype, "open-documents", OpenDocumentsVMCallback);
		}

		[GLib.DefaultSignalHandler(Type=typeof(IgeMacIntegration.IgeMacDock), ConnectionMethod="OverrideOpenDocuments")]
		protected virtual void OnOpenDocuments ()
		{
			GLib.Value ret = GLib.Value.Empty;
			GLib.ValueArray inst_and_params = new GLib.ValueArray (1);
			GLib.Value[] vals = new GLib.Value [1];
			vals [0] = new GLib.Value (this);
			inst_and_params.Append (vals [0]);
			g_signal_chain_from_overridden (inst_and_params.ArrayPtr, ref ret);
			foreach (GLib.Value v in vals)
				v.Dispose ();
		}

		[GLib.Signal("open-documents")]
		public event System.EventHandler OpenDocuments {
			add {
				GLib.Signal sig = GLib.Signal.Lookup (this, "open-documents");
				sig.AddDelegate (value);
			}
			remove {
				GLib.Signal sig = GLib.Signal.Lookup (this, "open-documents");
				sig.RemoveDelegate (value);
			}
		}

		[GLib.CDeclCallback]
		delegate void ClickedVMDelegate (IntPtr inst);

		static ClickedVMDelegate ClickedVMCallback;

		static void clicked_cb (IntPtr inst)
		{
			try {
				IgeMacDock inst_managed = GLib.Object.GetObject (inst, false) as IgeMacDock;
				inst_managed.OnClicked ();
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		private static void OverrideClicked (GLib.GType gtype)
		{
			if (ClickedVMCallback == null)
				ClickedVMCallback = new ClickedVMDelegate (clicked_cb);
			OverrideVirtualMethod (gtype, "clicked", ClickedVMCallback);
		}

		[GLib.DefaultSignalHandler(Type=typeof(IgeMacIntegration.IgeMacDock), ConnectionMethod="OverrideClicked")]
		protected virtual void OnClicked ()
		{
			GLib.Value ret = GLib.Value.Empty;
			GLib.ValueArray inst_and_params = new GLib.ValueArray (1);
			GLib.Value[] vals = new GLib.Value [1];
			vals [0] = new GLib.Value (this);
			inst_and_params.Append (vals [0]);
			g_signal_chain_from_overridden (inst_and_params.ArrayPtr, ref ret);
			foreach (GLib.Value v in vals)
				v.Dispose ();
		}

		[GLib.Signal("clicked")]
		public event System.EventHandler Clicked {
			add {
				GLib.Signal sig = GLib.Signal.Lookup (this, "clicked");
				sig.AddDelegate (value);
			}
			remove {
				GLib.Signal sig = GLib.Signal.Lookup (this, "clicked");
				sig.RemoveDelegate (value);
			}
		}

		[DllImport("libigemacintegration.dylib")]
		static extern IntPtr ige_mac_dock_attention_request(IntPtr raw, int type);

		public IgeMacIntegration.IgeMacAttentionRequest AttentionRequest(IgeMacIntegration.IgeMacAttentionType type) {
			IntPtr raw_ret = ige_mac_dock_attention_request(Handle, (int) type);
			IgeMacIntegration.IgeMacAttentionRequest ret = raw_ret == IntPtr.Zero ? null : (IgeMacIntegration.IgeMacAttentionRequest) GLib.Opaque.GetOpaque (raw_ret, typeof (IgeMacIntegration.IgeMacAttentionRequest), false);
			return ret;
		}

		[DllImport("libigemacintegration.dylib")]
		static extern void ige_mac_dock_attention_cancel(IntPtr raw, IntPtr request);

		public void AttentionCancel(IgeMacIntegration.IgeMacAttentionRequest request) {
			ige_mac_dock_attention_cancel(Handle, request == null ? IntPtr.Zero : request.Handle);
		}

		[DllImport("libigemacintegration.dylib")]
		static extern void ige_mac_dock_set_overlay_from_resource(IntPtr raw, IntPtr bundle, IntPtr name, IntPtr type, IntPtr subdir);

		public void SetOverlayFromResource(IgeMacIntegration.IgeMacBundle bundle, string name, string type, string subdir) {
			IntPtr native_name = GLib.Marshaller.StringToPtrGStrdup (name);
			IntPtr native_type = GLib.Marshaller.StringToPtrGStrdup (type);
			IntPtr native_subdir = GLib.Marshaller.StringToPtrGStrdup (subdir);
			ige_mac_dock_set_overlay_from_resource(Handle, bundle == null ? IntPtr.Zero : bundle.Handle, native_name, native_type, native_subdir);
			GLib.Marshaller.Free (native_name);
			GLib.Marshaller.Free (native_type);
			GLib.Marshaller.Free (native_subdir);
		}

		[DllImport("libigemacintegration.dylib")]
		static extern IntPtr ige_mac_dock_get_type();

		public static new GLib.GType GType { 
			get {
				IntPtr raw_ret = ige_mac_dock_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

		[DllImport("libigemacintegration.dylib")]
		static extern void ige_mac_dock_set_icon_from_pixbuf(IntPtr raw, IntPtr pixbuf);

		public Gdk.Pixbuf IconFromPixbuf { 
			set {
				ige_mac_dock_set_icon_from_pixbuf(Handle, value == null ? IntPtr.Zero : value.Handle);
			}
		}

		[DllImport("libigemacintegration.dylib")]
		static extern IntPtr ige_mac_dock_get_default();

		public static IgeMacIntegration.IgeMacDock Default { 
			get {
				IntPtr raw_ret = ige_mac_dock_get_default();
				IgeMacIntegration.IgeMacDock ret = GLib.Object.GetObject(raw_ret) as IgeMacIntegration.IgeMacDock;
				return ret;
			}
		}

		[DllImport("libigemacintegration.dylib")]
		static extern void ige_mac_dock_set_icon_from_resource(IntPtr raw, IntPtr bundle, IntPtr name, IntPtr type, IntPtr subdir);

		public void SetIconFromResource(IgeMacIntegration.IgeMacBundle bundle, string name, string type, string subdir) {
			IntPtr native_name = GLib.Marshaller.StringToPtrGStrdup (name);
			IntPtr native_type = GLib.Marshaller.StringToPtrGStrdup (type);
			IntPtr native_subdir = GLib.Marshaller.StringToPtrGStrdup (subdir);
			ige_mac_dock_set_icon_from_resource(Handle, bundle == null ? IntPtr.Zero : bundle.Handle, native_name, native_type, native_subdir);
			GLib.Marshaller.Free (native_name);
			GLib.Marshaller.Free (native_type);
			GLib.Marshaller.Free (native_subdir);
		}

		[DllImport("libigemacintegration.dylib")]
		static extern void ige_mac_dock_set_overlay_from_pixbuf(IntPtr raw, IntPtr pixbuf);

		public Gdk.Pixbuf OverlayFromPixbuf { 
			set {
				ige_mac_dock_set_overlay_from_pixbuf(Handle, value == null ? IntPtr.Zero : value.Handle);
			}
		}


		static IgeMacDock ()
		{
			GtkSharp.IgemacintegrationSharp.ObjectManager.Initialize ();
		}
#endregion
	}
}
