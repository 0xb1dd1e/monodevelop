// created by jay 0.7 (c) 1998 Axel.Schreiner@informatik.uni-osnabrueck.de

#line 2 "cs-parser.jay"
//
// cs-parser.jay: The Parser for the C# compiler
//
// Authors: Miguel de Icaza (miguel@gnu.org)
//          Ravi Pratap     (ravi@ximian.com)
//          Marek Safar		(marek.safar@gmail.com)
//
// Dual Licensed under the terms of the GNU GPL and the MIT X11 license
//
// (C) 2001 Ximian, Inc (http://www.ximian.com)
// (C) 2004 Novell, Inc
//
// TODO:
//   (1) Figure out why error productions dont work.  `type-declaration' is a
//       great spot to put an `error' because you can reproduce it with this input:
//	 "public X { }"
//

using System.Text;
using System.IO;
using System;
using System.Collections.Generic;

namespace Mono.CSharp
{
	/// <summary>
	///    The C# Parser
	/// </summary>
	public class CSharpParser
	{
		[Flags]
		enum ParameterModifierType
		{
			Ref		= 1 << 1,
			Out		= 1 << 2,
			This	= 1 << 3,
			Params	= 1 << 4,
			Arglist	= 1 << 5,
			DefaultValue = 1 << 6,
			
			All = Ref | Out | This | Params | Arglist | DefaultValue
		}
		
		static readonly object ModifierNone = 0;
	
		NamespaceEntry  current_namespace;
		TypeContainer   current_container;
		DeclSpace	current_class;
		PropertyBase current_property;
		EventProperty current_event;
		EventField current_event_field;
		FieldBase current_field;
	
		/// <summary>
		///   Current block is used to add statements as we find
		///   them.  
		/// </summary>
		Block      current_block;

		Delegate   current_delegate;
		
		AnonymousMethodExpression current_anonymous_method;

		/// <summary>
		///   This is used by the unary_expression code to resolve
		///   a name against a parameter.  
		/// </summary>
		
		// FIXME: This is very ugly and it's very hard to reset it correctly
		// on all places, especially when some parameters are autogenerated.
		ParametersCompiled current_local_parameters;

		bool parsing_anonymous_method;

		///
		/// An out-of-band stack.
		///
		static Stack<object> oob_stack;

		///
		/// Switch stack.
		///
		Stack<Block> switch_stack;

		///
		/// Controls the verbosity of the errors produced by the parser
		///
		static public int yacc_verbose_flag;

		/// 
		/// Used by the interactive shell, flags whether EOF was reached
		/// and an error was produced
		///
		public bool UnexpectedEOF;

		///
		/// The current file.
		///
		CompilationUnit file;

		///
		/// Temporary Xml documentation cache.
		/// For enum types, we need one more temporary store.
		///
		string tmpComment;
		string enumTypeComment;
	       		
		/// Current attribute target
		string current_attr_target;
		
		/// assembly and module attribute definitions are enabled
		bool global_attrs_enabled = true;
		
		ParameterModifierType valid_param_mod;
		
		bool default_parameter_used;

		/// When using the interactive parser, this holds the
		/// resulting expression
		public object InteractiveResult;

		//
		// Keeps track of global data changes to undo on parser error
		//
		public Undo undo;
		
		Stack<Linq.QueryBlock> linq_clause_blocks;

		// A counter to create new class names in interactive mode
		static int class_count;
		
		CompilerContext compiler;
		
		//
		// Instead of allocating carrier array everytime we
		// share the bucket for very common constructs which can never
		// be recursive
		//
		static List<Parameter> parameters_bucket = new List<Parameter> (6);
		static List<object> variables_bucket = new List<object> (6);
		
		//
		// Full AST support members
		//
		LocationsBag lbag;
		List<Tuple<Modifiers, Location>> mod_locations;
#line default

  /** error output stream.
      It should be changeable.
    */
  public System.IO.TextWriter ErrorOutput = System.Console.Out;

  /** simplified error message.
      @see <a href="#yyerror(java.lang.String, java.lang.String[])">yyerror</a>
    */
  public void yyerror (string message) {
    yyerror(message, null);
  }

  /* An EOF token */
  public int eof_token;

  /** (syntax) error message.
      Can be overwritten to control message format.
      @param message text to be displayed.
      @param expected vector of acceptable tokens, if available.
    */
  public void yyerror (string message, string[] expected) {
    if ((yacc_verbose_flag > 0) && (expected != null) && (expected.Length  > 0)) {
      ErrorOutput.Write (message+", expecting");
      for (int n = 0; n < expected.Length; ++ n)
        ErrorOutput.Write (" "+expected[n]);
        ErrorOutput.WriteLine ();
    } else
      ErrorOutput.WriteLine (message);
  }

  /** debugging support, requires the package jay.yydebug.
      Set to null to suppress debugging messages.
    */
  internal yydebug.yyDebug debug;

  protected static  int yyFinal = 8;
 // Put this array into a separate class so it is only initialized if debugging is actually used
 // Use MarshalByRefObject to disable inlining
 class YYRules : MarshalByRefObject {
  public static  string [] yyRule = {
    "$accept : compilation_unit",
    "compilation_unit : outer_declarations opt_EOF",
    "compilation_unit : outer_declarations global_attributes opt_EOF",
    "compilation_unit : global_attributes opt_EOF",
    "compilation_unit : opt_EOF",
    "$$1 :",
    "compilation_unit : interactive_parsing $$1 opt_EOF",
    "opt_EOF :",
    "opt_EOF : EOF",
    "outer_declarations : outer_declaration",
    "outer_declarations : outer_declarations outer_declaration",
    "outer_declaration : extern_alias_directive",
    "outer_declaration : using_directive",
    "outer_declaration : namespace_member_declaration",
    "extern_alias_directives : extern_alias_directive",
    "extern_alias_directives : extern_alias_directives extern_alias_directive",
    "extern_alias_directive : EXTERN_ALIAS IDENTIFIER IDENTIFIER SEMICOLON",
    "extern_alias_directive : EXTERN_ALIAS error",
    "using_directives : using_directive",
    "using_directives : using_directives using_directive",
    "using_directive : using_alias_directive",
    "using_directive : using_namespace_directive",
    "using_alias_directive : USING IDENTIFIER ASSIGN namespace_or_type_name SEMICOLON",
    "using_alias_directive : USING error",
    "using_namespace_directive : USING namespace_name SEMICOLON",
    "$$2 :",
    "namespace_declaration : opt_attributes NAMESPACE qualified_identifier $$2 namespace_body opt_semicolon",
    "qualified_identifier : IDENTIFIER",
    "qualified_identifier : qualified_identifier DOT IDENTIFIER",
    "qualified_identifier : error",
    "opt_semicolon :",
    "opt_semicolon : SEMICOLON",
    "opt_comma :",
    "opt_comma : COMMA",
    "namespace_name : namespace_or_type_name",
    "$$3 :",
    "namespace_body : OPEN_BRACE $$3 namespace_body_body",
    "namespace_body_body : opt_extern_alias_directives opt_using_directives opt_namespace_member_declarations CLOSE_BRACE",
    "$$4 :",
    "namespace_body_body : error $$4 CLOSE_BRACE",
    "namespace_body_body : opt_extern_alias_directives opt_using_directives opt_namespace_member_declarations EOF",
    "opt_using_directives :",
    "opt_using_directives : using_directives",
    "opt_extern_alias_directives :",
    "opt_extern_alias_directives : extern_alias_directives",
    "opt_namespace_member_declarations :",
    "opt_namespace_member_declarations : namespace_member_declarations",
    "namespace_member_declarations : namespace_member_declaration",
    "namespace_member_declarations : namespace_member_declarations namespace_member_declaration",
    "namespace_member_declaration : type_declaration",
    "namespace_member_declaration : namespace_declaration",
    "namespace_member_declaration : field_declaration",
    "namespace_member_declaration : method_declaration",
    "type_declaration : class_declaration",
    "type_declaration : struct_declaration",
    "type_declaration : interface_declaration",
    "type_declaration : enum_declaration",
    "type_declaration : delegate_declaration",
    "global_attributes : attribute_sections",
    "opt_attributes :",
    "opt_attributes : attribute_sections",
    "attribute_sections : attribute_section",
    "attribute_sections : attribute_sections attribute_section",
    "attribute_section : OPEN_BRACKET attribute_target_specifier attribute_list opt_comma CLOSE_BRACKET",
    "attribute_section : OPEN_BRACKET attribute_list opt_comma CLOSE_BRACKET",
    "attribute_target_specifier : attribute_target COLON",
    "attribute_target : IDENTIFIER",
    "attribute_target : EVENT",
    "attribute_target : RETURN",
    "attribute_target : error",
    "attribute_list : attribute",
    "attribute_list : attribute_list COMMA attribute",
    "$$5 :",
    "attribute : attribute_name $$5 opt_attribute_arguments",
    "attribute_name : namespace_or_type_name",
    "opt_attribute_arguments :",
    "opt_attribute_arguments : OPEN_PARENS attribute_arguments CLOSE_PARENS",
    "attribute_arguments :",
    "attribute_arguments : positional_or_named_argument",
    "attribute_arguments : named_attribute_argument",
    "attribute_arguments : attribute_arguments COMMA positional_or_named_argument",
    "attribute_arguments : attribute_arguments COMMA named_attribute_argument",
    "positional_or_named_argument : expression",
    "positional_or_named_argument : named_argument",
    "$$6 :",
    "named_attribute_argument : IDENTIFIER ASSIGN $$6 expression",
    "named_argument : IDENTIFIER COLON opt_named_modifier expression",
    "opt_named_modifier :",
    "opt_named_modifier : REF",
    "opt_named_modifier : OUT",
    "opt_class_member_declarations :",
    "opt_class_member_declarations : class_member_declarations",
    "class_member_declarations : class_member_declaration",
    "class_member_declarations : class_member_declarations class_member_declaration",
    "class_member_declaration : constant_declaration",
    "class_member_declaration : field_declaration",
    "class_member_declaration : method_declaration",
    "class_member_declaration : property_declaration",
    "class_member_declaration : event_declaration",
    "class_member_declaration : indexer_declaration",
    "class_member_declaration : operator_declaration",
    "class_member_declaration : constructor_declaration",
    "class_member_declaration : destructor_declaration",
    "class_member_declaration : type_declaration",
    "class_member_declaration : error",
    "$$7 :",
    "$$8 :",
    "$$9 :",
    "$$10 :",
    "struct_declaration : opt_attributes opt_modifiers opt_partial STRUCT $$7 type_declaration_name $$8 opt_class_base opt_type_parameter_constraints_clauses $$9 struct_body $$10 opt_semicolon",
    "struct_declaration : opt_attributes opt_modifiers opt_partial STRUCT error",
    "$$11 :",
    "struct_body : OPEN_BRACE $$11 opt_struct_member_declarations CLOSE_BRACE",
    "opt_struct_member_declarations :",
    "opt_struct_member_declarations : struct_member_declarations",
    "struct_member_declarations : struct_member_declaration",
    "struct_member_declarations : struct_member_declarations struct_member_declaration",
    "struct_member_declaration : constant_declaration",
    "struct_member_declaration : field_declaration",
    "struct_member_declaration : method_declaration",
    "struct_member_declaration : property_declaration",
    "struct_member_declaration : event_declaration",
    "struct_member_declaration : indexer_declaration",
    "struct_member_declaration : operator_declaration",
    "struct_member_declaration : constructor_declaration",
    "struct_member_declaration : type_declaration",
    "struct_member_declaration : destructor_declaration",
    "$$12 :",
    "constant_declaration : opt_attributes opt_modifiers CONST type IDENTIFIER $$12 constant_initializer opt_constant_declarators SEMICOLON",
    "opt_constant_declarators :",
    "opt_constant_declarators : constant_declarators",
    "constant_declarators : constant_declarator",
    "constant_declarators : constant_declarators constant_declarator",
    "constant_declarator : COMMA IDENTIFIER constant_initializer",
    "$$13 :",
    "constant_initializer : ASSIGN $$13 constant_initializer_expr",
    "constant_initializer : error",
    "constant_initializer_expr : constant_expression",
    "constant_initializer_expr : array_initializer",
    "$$14 :",
    "field_declaration : opt_attributes opt_modifiers member_type IDENTIFIER $$14 opt_field_initializer opt_field_declarators SEMICOLON",
    "$$15 :",
    "field_declaration : opt_attributes opt_modifiers FIXED simple_type IDENTIFIER $$15 fixed_field_size opt_fixed_field_declarators SEMICOLON",
    "field_declaration : opt_attributes opt_modifiers FIXED simple_type error SEMICOLON",
    "opt_field_initializer :",
    "$$16 :",
    "opt_field_initializer : ASSIGN $$16 variable_initializer",
    "opt_field_declarators :",
    "opt_field_declarators : field_declarators",
    "field_declarators : field_declarator",
    "field_declarators : field_declarators field_declarator",
    "field_declarator : COMMA IDENTIFIER",
    "$$17 :",
    "field_declarator : COMMA IDENTIFIER ASSIGN $$17 variable_initializer",
    "opt_fixed_field_declarators :",
    "opt_fixed_field_declarators : fixed_field_declarators",
    "fixed_field_declarators : fixed_field_declarator",
    "fixed_field_declarators : fixed_field_declarators fixed_field_declarator",
    "fixed_field_declarator : COMMA IDENTIFIER fixed_field_size",
    "$$18 :",
    "fixed_field_size : OPEN_BRACKET $$18 expression CLOSE_BRACKET",
    "fixed_field_size : OPEN_BRACKET error",
    "local_variable_declarators : local_variable_declarator",
    "local_variable_declarators : local_variable_declarators COMMA local_variable_declarator",
    "local_variable_declarator : IDENTIFIER ASSIGN local_variable_initializer",
    "local_variable_declarator : IDENTIFIER",
    "local_variable_declarator : IDENTIFIER variable_bad_array",
    "local_variable_initializer : expression",
    "local_variable_initializer : array_initializer",
    "local_variable_initializer : STACKALLOC simple_type OPEN_BRACKET_EXPR expression CLOSE_BRACKET",
    "local_variable_initializer : ARGLIST",
    "local_variable_initializer : STACKALLOC simple_type",
    "variable_bad_array : OPEN_BRACKET_EXPR opt_expression CLOSE_BRACKET",
    "variable_initializer : expression",
    "variable_initializer : array_initializer",
    "$$19 :",
    "method_declaration : method_header $$19 method_body",
    "$$20 :",
    "$$21 :",
    "method_header : opt_attributes opt_modifiers member_type method_declaration_name OPEN_PARENS $$20 opt_formal_parameter_list CLOSE_PARENS $$21 opt_type_parameter_constraints_clauses",
    "$$22 :",
    "$$23 :",
    "method_header : opt_attributes opt_modifiers PARTIAL VOID method_declaration_name OPEN_PARENS $$22 opt_formal_parameter_list CLOSE_PARENS $$23 opt_type_parameter_constraints_clauses",
    "method_header : opt_attributes opt_modifiers member_type modifiers method_declaration_name OPEN_PARENS opt_formal_parameter_list CLOSE_PARENS",
    "method_body : block",
    "method_body : SEMICOLON",
    "opt_formal_parameter_list :",
    "opt_formal_parameter_list : formal_parameter_list",
    "formal_parameter_list : fixed_parameters",
    "formal_parameter_list : fixed_parameters COMMA parameter_array",
    "formal_parameter_list : fixed_parameters COMMA arglist_modifier",
    "formal_parameter_list : parameter_array COMMA error",
    "formal_parameter_list : fixed_parameters COMMA parameter_array COMMA error",
    "formal_parameter_list : arglist_modifier COMMA error",
    "formal_parameter_list : fixed_parameters COMMA ARGLIST COMMA error",
    "formal_parameter_list : parameter_array",
    "formal_parameter_list : arglist_modifier",
    "fixed_parameters : fixed_parameter",
    "fixed_parameters : fixed_parameters COMMA fixed_parameter",
    "fixed_parameter : opt_attributes opt_parameter_modifier parameter_type IDENTIFIER",
    "fixed_parameter : opt_attributes opt_parameter_modifier parameter_type IDENTIFIER OPEN_BRACKET CLOSE_BRACKET",
    "fixed_parameter : opt_attributes opt_parameter_modifier parameter_type error",
    "$$24 :",
    "fixed_parameter : opt_attributes opt_parameter_modifier parameter_type IDENTIFIER ASSIGN $$24 constant_expression",
    "opt_parameter_modifier :",
    "opt_parameter_modifier : parameter_modifiers",
    "parameter_modifiers : parameter_modifier",
    "parameter_modifiers : parameter_modifiers parameter_modifier",
    "parameter_modifier : REF",
    "parameter_modifier : OUT",
    "parameter_modifier : THIS",
    "parameter_array : opt_attributes params_modifier type IDENTIFIER",
    "parameter_array : opt_attributes params_modifier type IDENTIFIER ASSIGN constant_expression",
    "parameter_array : opt_attributes params_modifier type error",
    "params_modifier : PARAMS",
    "params_modifier : PARAMS parameter_modifier",
    "params_modifier : PARAMS params_modifier",
    "arglist_modifier : ARGLIST",
    "$$25 :",
    "$$26 :",
    "$$27 :",
    "property_declaration : opt_attributes opt_modifiers member_type member_declaration_name $$25 OPEN_BRACE $$26 accessor_declarations $$27 CLOSE_BRACE",
    "$$28 :",
    "$$29 :",
    "$$30 :",
    "indexer_declaration : opt_attributes opt_modifiers member_type indexer_declaration_name OPEN_BRACKET $$28 opt_formal_parameter_list CLOSE_BRACKET OPEN_BRACE $$29 accessor_declarations $$30 CLOSE_BRACE",
    "accessor_declarations : get_accessor_declaration",
    "accessor_declarations : get_accessor_declaration accessor_declarations",
    "accessor_declarations : set_accessor_declaration",
    "accessor_declarations : set_accessor_declaration accessor_declarations",
    "accessor_declarations : error",
    "$$31 :",
    "get_accessor_declaration : opt_attributes opt_modifiers GET $$31 accessor_body",
    "$$32 :",
    "set_accessor_declaration : opt_attributes opt_modifiers SET $$32 accessor_body",
    "accessor_body : block",
    "accessor_body : SEMICOLON",
    "accessor_body : error",
    "$$33 :",
    "$$34 :",
    "$$35 :",
    "$$36 :",
    "interface_declaration : opt_attributes opt_modifiers opt_partial INTERFACE $$33 type_declaration_name $$34 opt_class_base opt_type_parameter_constraints_clauses $$35 OPEN_BRACE opt_interface_member_declarations CLOSE_BRACE $$36 opt_semicolon",
    "interface_declaration : opt_attributes opt_modifiers opt_partial INTERFACE error",
    "opt_interface_member_declarations :",
    "opt_interface_member_declarations : interface_member_declarations",
    "interface_member_declarations : interface_member_declaration",
    "interface_member_declarations : interface_member_declarations interface_member_declaration",
    "interface_member_declaration : constant_declaration",
    "interface_member_declaration : field_declaration",
    "interface_member_declaration : method_declaration",
    "interface_member_declaration : property_declaration",
    "interface_member_declaration : event_declaration",
    "interface_member_declaration : indexer_declaration",
    "interface_member_declaration : operator_declaration",
    "interface_member_declaration : constructor_declaration",
    "interface_member_declaration : type_declaration",
    "$$37 :",
    "operator_declaration : opt_attributes opt_modifiers operator_declarator $$37 operator_body",
    "operator_body : block",
    "operator_body : SEMICOLON",
    "operator_type : type_expression_or_array",
    "operator_type : VOID",
    "$$38 :",
    "operator_declarator : operator_type OPERATOR overloadable_operator OPEN_PARENS $$38 opt_formal_parameter_list CLOSE_PARENS",
    "operator_declarator : conversion_operator_declarator",
    "overloadable_operator : BANG",
    "overloadable_operator : TILDE",
    "overloadable_operator : OP_INC",
    "overloadable_operator : OP_DEC",
    "overloadable_operator : TRUE",
    "overloadable_operator : FALSE",
    "overloadable_operator : PLUS",
    "overloadable_operator : MINUS",
    "overloadable_operator : STAR",
    "overloadable_operator : DIV",
    "overloadable_operator : PERCENT",
    "overloadable_operator : BITWISE_AND",
    "overloadable_operator : BITWISE_OR",
    "overloadable_operator : CARRET",
    "overloadable_operator : OP_SHIFT_LEFT",
    "overloadable_operator : OP_SHIFT_RIGHT",
    "overloadable_operator : OP_EQ",
    "overloadable_operator : OP_NE",
    "overloadable_operator : OP_GT",
    "overloadable_operator : OP_LT",
    "overloadable_operator : OP_GE",
    "overloadable_operator : OP_LE",
    "$$39 :",
    "conversion_operator_declarator : IMPLICIT OPERATOR type OPEN_PARENS $$39 opt_formal_parameter_list CLOSE_PARENS",
    "$$40 :",
    "conversion_operator_declarator : EXPLICIT OPERATOR type OPEN_PARENS $$40 opt_formal_parameter_list CLOSE_PARENS",
    "conversion_operator_declarator : IMPLICIT error",
    "conversion_operator_declarator : EXPLICIT error",
    "constructor_declaration : constructor_declarator constructor_body",
    "$$41 :",
    "$$42 :",
    "constructor_declarator : opt_attributes opt_modifiers IDENTIFIER $$41 OPEN_PARENS opt_formal_parameter_list CLOSE_PARENS $$42 opt_constructor_initializer",
    "constructor_body : block_prepared",
    "constructor_body : SEMICOLON",
    "opt_constructor_initializer :",
    "opt_constructor_initializer : constructor_initializer",
    "$$43 :",
    "constructor_initializer : COLON BASE OPEN_PARENS $$43 opt_argument_list CLOSE_PARENS",
    "$$44 :",
    "constructor_initializer : COLON THIS OPEN_PARENS $$44 opt_argument_list CLOSE_PARENS",
    "constructor_initializer : COLON error",
    "$$45 :",
    "destructor_declaration : opt_attributes opt_modifiers TILDE $$45 IDENTIFIER OPEN_PARENS CLOSE_PARENS method_body",
    "$$46 :",
    "event_declaration : opt_attributes opt_modifiers EVENT type member_declaration_name $$46 opt_event_initializer opt_event_declarators SEMICOLON",
    "$$47 :",
    "$$48 :",
    "event_declaration : opt_attributes opt_modifiers EVENT type member_declaration_name OPEN_BRACE $$47 event_accessor_declarations $$48 CLOSE_BRACE",
    "opt_event_initializer :",
    "$$49 :",
    "opt_event_initializer : ASSIGN $$49 event_variable_initializer",
    "opt_event_declarators :",
    "opt_event_declarators : event_declarators",
    "event_declarators : event_declarator",
    "event_declarators : event_declarators event_declarator",
    "event_declarator : COMMA IDENTIFIER",
    "$$50 :",
    "event_declarator : COMMA IDENTIFIER ASSIGN $$50 event_variable_initializer",
    "$$51 :",
    "event_variable_initializer : $$51 variable_initializer",
    "event_accessor_declarations : add_accessor_declaration remove_accessor_declaration",
    "event_accessor_declarations : remove_accessor_declaration add_accessor_declaration",
    "event_accessor_declarations : add_accessor_declaration",
    "event_accessor_declarations : remove_accessor_declaration",
    "event_accessor_declarations : error",
    "$$52 :",
    "add_accessor_declaration : opt_attributes opt_modifiers ADD $$52 event_accessor_block",
    "$$53 :",
    "remove_accessor_declaration : opt_attributes opt_modifiers REMOVE $$53 event_accessor_block",
    "event_accessor_block : opt_semicolon",
    "event_accessor_block : block",
    "$$54 :",
    "$$55 :",
    "$$56 :",
    "enum_declaration : opt_attributes opt_modifiers ENUM type_declaration_name opt_enum_base $$54 OPEN_BRACE $$55 opt_enum_member_declarations $$56 CLOSE_BRACE opt_semicolon",
    "opt_enum_base :",
    "opt_enum_base : COLON type",
    "opt_enum_base : COLON error",
    "opt_enum_member_declarations :",
    "opt_enum_member_declarations : enum_member_declarations",
    "opt_enum_member_declarations : enum_member_declarations COMMA",
    "enum_member_declarations : enum_member_declaration",
    "enum_member_declarations : enum_member_declarations COMMA enum_member_declaration",
    "enum_member_declaration : opt_attributes IDENTIFIER",
    "$$57 :",
    "enum_member_declaration : opt_attributes IDENTIFIER $$57 ASSIGN constant_expression",
    "$$58 :",
    "$$59 :",
    "$$60 :",
    "delegate_declaration : opt_attributes opt_modifiers DELEGATE member_type type_declaration_name OPEN_PARENS $$58 opt_formal_parameter_list CLOSE_PARENS $$59 opt_type_parameter_constraints_clauses $$60 SEMICOLON",
    "opt_nullable :",
    "opt_nullable : INTERR_NULLABLE",
    "namespace_or_type_name : member_name",
    "namespace_or_type_name : qualified_alias_member IDENTIFIER opt_type_argument_list",
    "member_name : type_name",
    "member_name : namespace_or_type_name DOT IDENTIFIER opt_type_argument_list",
    "type_name : IDENTIFIER opt_type_argument_list",
    "opt_type_argument_list :",
    "opt_type_argument_list : OP_GENERICS_LT type_arguments OP_GENERICS_GT",
    "opt_type_argument_list : OP_GENERICS_LT error",
    "type_arguments : type",
    "type_arguments : type_arguments COMMA type",
    "$$61 :",
    "type_declaration_name : IDENTIFIER $$61 opt_type_parameter_list",
    "member_declaration_name : method_declaration_name",
    "method_declaration_name : type_declaration_name",
    "method_declaration_name : explicit_interface IDENTIFIER opt_type_parameter_list",
    "indexer_declaration_name : THIS",
    "indexer_declaration_name : explicit_interface THIS",
    "explicit_interface : IDENTIFIER opt_type_argument_list DOT",
    "explicit_interface : qualified_alias_member IDENTIFIER opt_type_argument_list DOT",
    "explicit_interface : explicit_interface IDENTIFIER opt_type_argument_list DOT",
    "opt_type_parameter_list :",
    "opt_type_parameter_list : OP_GENERICS_LT_DECL type_parameters OP_GENERICS_GT",
    "type_parameters : type_parameter",
    "type_parameters : type_parameters COMMA type_parameter",
    "type_parameter : opt_attributes opt_type_parameter_variance IDENTIFIER",
    "type_parameter : error",
    "type_and_void : type_expression_or_array",
    "type_and_void : VOID",
    "member_type : type_and_void",
    "type : type_expression_or_array",
    "type : VOID",
    "simple_type : type_expression",
    "simple_type : VOID",
    "parameter_type : type_expression_or_array",
    "parameter_type : VOID",
    "type_expression_or_array : type_expression",
    "type_expression_or_array : type_expression rank_specifiers",
    "type_expression : namespace_or_type_name opt_nullable",
    "type_expression : builtin_types opt_nullable",
    "type_expression : type_expression STAR",
    "type_expression : VOID STAR",
    "type_list : base_type_name",
    "type_list : type_list COMMA base_type_name",
    "base_type_name : type",
    "base_type_name : error",
    "builtin_types : OBJECT",
    "builtin_types : STRING",
    "builtin_types : BOOL",
    "builtin_types : DECIMAL",
    "builtin_types : FLOAT",
    "builtin_types : DOUBLE",
    "builtin_types : integral_type",
    "integral_type : SBYTE",
    "integral_type : BYTE",
    "integral_type : SHORT",
    "integral_type : USHORT",
    "integral_type : INT",
    "integral_type : UINT",
    "integral_type : LONG",
    "integral_type : ULONG",
    "integral_type : CHAR",
    "primary_expression : primary_expression_no_array_creation",
    "primary_expression : array_creation_expression",
    "primary_expression_no_array_creation : literal",
    "primary_expression_no_array_creation : IDENTIFIER opt_type_argument_list",
    "primary_expression_no_array_creation : IDENTIFIER GENERATE_COMPLETION",
    "primary_expression_no_array_creation : parenthesized_expression",
    "primary_expression_no_array_creation : default_value_expression",
    "primary_expression_no_array_creation : member_access",
    "primary_expression_no_array_creation : invocation_expression",
    "primary_expression_no_array_creation : element_access",
    "primary_expression_no_array_creation : this_access",
    "primary_expression_no_array_creation : base_access",
    "primary_expression_no_array_creation : post_increment_expression",
    "primary_expression_no_array_creation : post_decrement_expression",
    "primary_expression_no_array_creation : object_or_delegate_creation_expression",
    "primary_expression_no_array_creation : anonymous_type_expression",
    "primary_expression_no_array_creation : typeof_expression",
    "primary_expression_no_array_creation : sizeof_expression",
    "primary_expression_no_array_creation : checked_expression",
    "primary_expression_no_array_creation : unchecked_expression",
    "primary_expression_no_array_creation : pointer_member_access",
    "primary_expression_no_array_creation : anonymous_method_expression",
    "literal : boolean_literal",
    "literal : LITERAL",
    "literal : NULL",
    "boolean_literal : TRUE",
    "boolean_literal : FALSE",
    "open_parens_any : OPEN_PARENS",
    "open_parens_any : OPEN_PARENS_CAST",
    "close_parens : CLOSE_PARENS",
    "close_parens : COMPLETE_COMPLETION",
    "parenthesized_expression : OPEN_PARENS expression CLOSE_PARENS",
    "parenthesized_expression : OPEN_PARENS expression COMPLETE_COMPLETION",
    "member_access : primary_expression DOT IDENTIFIER opt_type_argument_list",
    "member_access : builtin_types DOT IDENTIFIER opt_type_argument_list",
    "member_access : BASE DOT IDENTIFIER opt_type_argument_list",
    "member_access : qualified_alias_member IDENTIFIER opt_type_argument_list",
    "member_access : primary_expression DOT GENERATE_COMPLETION",
    "member_access : primary_expression DOT IDENTIFIER GENERATE_COMPLETION",
    "member_access : builtin_types DOT GENERATE_COMPLETION",
    "member_access : builtin_types DOT IDENTIFIER GENERATE_COMPLETION",
    "invocation_expression : primary_expression open_parens_any opt_argument_list close_parens",
    "opt_object_or_collection_initializer :",
    "opt_object_or_collection_initializer : object_or_collection_initializer",
    "object_or_collection_initializer : OPEN_BRACE opt_member_initializer_list close_brace_or_complete_completion",
    "object_or_collection_initializer : OPEN_BRACE member_initializer_list COMMA CLOSE_BRACE",
    "opt_member_initializer_list :",
    "opt_member_initializer_list : member_initializer_list",
    "member_initializer_list : member_initializer",
    "member_initializer_list : member_initializer_list COMMA member_initializer",
    "member_initializer_list : member_initializer_list error",
    "member_initializer : IDENTIFIER ASSIGN initializer_value",
    "member_initializer : GENERATE_COMPLETION",
    "member_initializer : non_assignment_expression opt_COMPLETE_COMPLETION",
    "member_initializer : OPEN_BRACE expression_list CLOSE_BRACE",
    "member_initializer : OPEN_BRACE CLOSE_BRACE",
    "initializer_value : expression",
    "initializer_value : object_or_collection_initializer",
    "opt_argument_list :",
    "opt_argument_list : argument_list",
    "argument_list : argument_or_named_argument",
    "argument_list : argument_list COMMA argument",
    "argument_list : argument_list COMMA named_argument",
    "argument_list : argument_list COMMA",
    "argument_list : COMMA error",
    "argument : expression",
    "argument : non_simple_argument",
    "argument_or_named_argument : argument",
    "argument_or_named_argument : named_argument",
    "non_simple_argument : REF variable_reference",
    "non_simple_argument : OUT variable_reference",
    "non_simple_argument : ARGLIST OPEN_PARENS argument_list CLOSE_PARENS",
    "non_simple_argument : ARGLIST OPEN_PARENS CLOSE_PARENS",
    "non_simple_argument : ARGLIST",
    "variable_reference : expression",
    "element_access : primary_expression OPEN_BRACKET_EXPR expression_list_arguments CLOSE_BRACKET",
    "expression_list : expression",
    "expression_list : expression_list COMMA expression",
    "expression_list : expression_list error",
    "expression_list_arguments : expression_list_argument",
    "expression_list_arguments : expression_list_arguments COMMA expression_list_argument",
    "expression_list_argument : expression",
    "expression_list_argument : named_argument",
    "this_access : THIS",
    "base_access : BASE OPEN_BRACKET_EXPR expression_list_arguments CLOSE_BRACKET",
    "base_access : BASE OPEN_BRACKET error",
    "post_increment_expression : primary_expression OP_INC",
    "post_decrement_expression : primary_expression OP_DEC",
    "object_or_delegate_creation_expression : NEW new_expr_type open_parens_any opt_argument_list CLOSE_PARENS opt_object_or_collection_initializer",
    "object_or_delegate_creation_expression : NEW new_expr_type object_or_collection_initializer",
    "array_creation_expression : NEW new_expr_type OPEN_BRACKET_EXPR expression_list CLOSE_BRACKET opt_rank_specifier opt_array_initializer",
    "array_creation_expression : NEW new_expr_type rank_specifiers opt_array_initializer",
    "array_creation_expression : NEW rank_specifiers array_initializer",
    "array_creation_expression : NEW new_expr_type OPEN_BRACKET CLOSE_BRACKET OPEN_BRACKET_EXPR error CLOSE_BRACKET",
    "array_creation_expression : NEW new_expr_type error",
    "$$62 :",
    "new_expr_type : $$62 simple_type",
    "anonymous_type_expression : NEW OPEN_BRACE anonymous_type_parameters_opt_comma CLOSE_BRACE",
    "anonymous_type_parameters_opt_comma : anonymous_type_parameters_opt",
    "anonymous_type_parameters_opt_comma : anonymous_type_parameters COMMA",
    "anonymous_type_parameters_opt :",
    "anonymous_type_parameters_opt : anonymous_type_parameters",
    "anonymous_type_parameters : anonymous_type_parameter",
    "anonymous_type_parameters : anonymous_type_parameters COMMA anonymous_type_parameter",
    "anonymous_type_parameter : IDENTIFIER ASSIGN variable_initializer",
    "anonymous_type_parameter : IDENTIFIER",
    "anonymous_type_parameter : member_access",
    "anonymous_type_parameter : error",
    "opt_rank_specifier :",
    "opt_rank_specifier : rank_specifiers",
    "opt_rank_specifier_or_nullable : opt_nullable",
    "opt_rank_specifier_or_nullable : opt_nullable rank_specifiers",
    "rank_specifiers : rank_specifier",
    "rank_specifiers : rank_specifier rank_specifiers",
    "rank_specifier : OPEN_BRACKET CLOSE_BRACKET",
    "rank_specifier : OPEN_BRACKET dim_separators CLOSE_BRACKET",
    "dim_separators : COMMA",
    "dim_separators : dim_separators COMMA",
    "opt_array_initializer :",
    "opt_array_initializer : array_initializer",
    "array_initializer : OPEN_BRACE CLOSE_BRACE",
    "array_initializer : OPEN_BRACE variable_initializer_list opt_comma CLOSE_BRACE",
    "variable_initializer_list : variable_initializer",
    "variable_initializer_list : variable_initializer_list COMMA variable_initializer",
    "variable_initializer_list : error",
    "$$63 :",
    "typeof_expression : TYPEOF $$63 open_parens_any typeof_type_expression CLOSE_PARENS",
    "typeof_type_expression : type_and_void",
    "typeof_type_expression : unbound_type_name",
    "typeof_type_expression : error",
    "unbound_type_name : IDENTIFIER generic_dimension",
    "unbound_type_name : qualified_alias_member IDENTIFIER generic_dimension",
    "unbound_type_name : unbound_type_name DOT IDENTIFIER",
    "unbound_type_name : unbound_type_name DOT IDENTIFIER generic_dimension",
    "unbound_type_name : namespace_or_type_name DOT IDENTIFIER generic_dimension",
    "generic_dimension : GENERIC_DIMENSION",
    "qualified_alias_member : IDENTIFIER DOUBLE_COLON",
    "sizeof_expression : SIZEOF open_parens_any type CLOSE_PARENS",
    "checked_expression : CHECKED open_parens_any expression CLOSE_PARENS",
    "unchecked_expression : UNCHECKED open_parens_any expression CLOSE_PARENS",
    "pointer_member_access : primary_expression OP_PTR IDENTIFIER",
    "$$64 :",
    "anonymous_method_expression : DELEGATE opt_anonymous_method_signature $$64 block",
    "opt_anonymous_method_signature :",
    "opt_anonymous_method_signature : anonymous_method_signature",
    "$$65 :",
    "anonymous_method_signature : OPEN_PARENS $$65 opt_formal_parameter_list CLOSE_PARENS",
    "default_value_expression : DEFAULT open_parens_any type CLOSE_PARENS",
    "unary_expression : primary_expression",
    "unary_expression : BANG prefixed_unary_expression",
    "unary_expression : TILDE prefixed_unary_expression",
    "unary_expression : cast_expression",
    "cast_expression : OPEN_PARENS_CAST type CLOSE_PARENS prefixed_unary_expression",
    "cast_expression : OPEN_PARENS builtin_types CLOSE_PARENS prefixed_unary_expression",
    "prefixed_unary_expression : unary_expression",
    "prefixed_unary_expression : PLUS prefixed_unary_expression",
    "prefixed_unary_expression : MINUS prefixed_unary_expression",
    "prefixed_unary_expression : OP_INC prefixed_unary_expression",
    "prefixed_unary_expression : OP_DEC prefixed_unary_expression",
    "prefixed_unary_expression : STAR prefixed_unary_expression",
    "prefixed_unary_expression : BITWISE_AND prefixed_unary_expression",
    "multiplicative_expression : prefixed_unary_expression",
    "multiplicative_expression : multiplicative_expression STAR prefixed_unary_expression",
    "multiplicative_expression : multiplicative_expression DIV prefixed_unary_expression",
    "multiplicative_expression : multiplicative_expression PERCENT prefixed_unary_expression",
    "additive_expression : multiplicative_expression",
    "additive_expression : additive_expression PLUS multiplicative_expression",
    "additive_expression : additive_expression MINUS multiplicative_expression",
    "additive_expression : parenthesized_expression MINUS multiplicative_expression",
    "additive_expression : additive_expression AS type",
    "additive_expression : additive_expression IS type",
    "shift_expression : additive_expression",
    "shift_expression : shift_expression OP_SHIFT_LEFT additive_expression",
    "shift_expression : shift_expression OP_SHIFT_RIGHT additive_expression",
    "relational_expression : shift_expression",
    "relational_expression : relational_expression OP_LT shift_expression",
    "relational_expression : relational_expression OP_GT shift_expression",
    "relational_expression : relational_expression OP_LE shift_expression",
    "relational_expression : relational_expression OP_GE shift_expression",
    "equality_expression : relational_expression",
    "equality_expression : equality_expression OP_EQ relational_expression",
    "equality_expression : equality_expression OP_NE relational_expression",
    "and_expression : equality_expression",
    "and_expression : and_expression BITWISE_AND equality_expression",
    "exclusive_or_expression : and_expression",
    "exclusive_or_expression : exclusive_or_expression CARRET and_expression",
    "inclusive_or_expression : exclusive_or_expression",
    "inclusive_or_expression : inclusive_or_expression BITWISE_OR exclusive_or_expression",
    "conditional_and_expression : inclusive_or_expression",
    "conditional_and_expression : conditional_and_expression OP_AND inclusive_or_expression",
    "conditional_or_expression : conditional_and_expression",
    "conditional_or_expression : conditional_or_expression OP_OR conditional_and_expression",
    "null_coalescing_expression : conditional_or_expression",
    "null_coalescing_expression : conditional_or_expression OP_COALESCING null_coalescing_expression",
    "conditional_expression : null_coalescing_expression",
    "conditional_expression : null_coalescing_expression INTERR expression COLON expression",
    "assignment_expression : prefixed_unary_expression ASSIGN expression",
    "assignment_expression : prefixed_unary_expression OP_MULT_ASSIGN expression",
    "assignment_expression : prefixed_unary_expression OP_DIV_ASSIGN expression",
    "assignment_expression : prefixed_unary_expression OP_MOD_ASSIGN expression",
    "assignment_expression : prefixed_unary_expression OP_ADD_ASSIGN expression",
    "assignment_expression : prefixed_unary_expression OP_SUB_ASSIGN expression",
    "assignment_expression : prefixed_unary_expression OP_SHIFT_LEFT_ASSIGN expression",
    "assignment_expression : prefixed_unary_expression OP_SHIFT_RIGHT_ASSIGN expression",
    "assignment_expression : prefixed_unary_expression OP_AND_ASSIGN expression",
    "assignment_expression : prefixed_unary_expression OP_OR_ASSIGN expression",
    "assignment_expression : prefixed_unary_expression OP_XOR_ASSIGN expression",
    "lambda_parameter_list : lambda_parameter",
    "lambda_parameter_list : lambda_parameter_list COMMA lambda_parameter",
    "lambda_parameter : parameter_modifier parameter_type IDENTIFIER",
    "lambda_parameter : parameter_type IDENTIFIER",
    "lambda_parameter : IDENTIFIER",
    "opt_lambda_parameter_list :",
    "opt_lambda_parameter_list : lambda_parameter_list",
    "$$66 :",
    "lambda_expression_body : $$66 expression",
    "lambda_expression_body : block",
    "$$67 :",
    "lambda_expression : IDENTIFIER ARROW $$67 lambda_expression_body",
    "$$68 :",
    "$$69 :",
    "lambda_expression : OPEN_PARENS_LAMBDA $$68 opt_lambda_parameter_list CLOSE_PARENS ARROW $$69 lambda_expression_body",
    "expression : assignment_expression",
    "expression : non_assignment_expression",
    "non_assignment_expression : conditional_expression",
    "non_assignment_expression : lambda_expression",
    "non_assignment_expression : query_expression",
    "constant_expression : expression",
    "boolean_expression : expression",
    "$$70 :",
    "$$71 :",
    "$$72 :",
    "$$73 :",
    "class_declaration : opt_attributes opt_modifiers opt_partial CLASS $$70 type_declaration_name $$71 opt_class_base opt_type_parameter_constraints_clauses $$72 OPEN_BRACE opt_class_member_declarations CLOSE_BRACE $$73 opt_semicolon",
    "opt_partial :",
    "opt_partial : PARTIAL",
    "opt_modifiers :",
    "opt_modifiers : modifiers",
    "modifiers : modifier",
    "modifiers : modifiers modifier",
    "modifier : NEW",
    "modifier : PUBLIC",
    "modifier : PROTECTED",
    "modifier : INTERNAL",
    "modifier : PRIVATE",
    "modifier : ABSTRACT",
    "modifier : SEALED",
    "modifier : STATIC",
    "modifier : READONLY",
    "modifier : VIRTUAL",
    "modifier : OVERRIDE",
    "modifier : EXTERN",
    "modifier : VOLATILE",
    "modifier : UNSAFE",
    "opt_class_base :",
    "opt_class_base : COLON type_list",
    "opt_type_parameter_constraints_clauses :",
    "opt_type_parameter_constraints_clauses : type_parameter_constraints_clauses",
    "type_parameter_constraints_clauses : type_parameter_constraints_clause",
    "type_parameter_constraints_clauses : type_parameter_constraints_clauses type_parameter_constraints_clause",
    "type_parameter_constraints_clause : WHERE IDENTIFIER COLON type_parameter_constraints",
    "type_parameter_constraints : type_parameter_constraint",
    "type_parameter_constraints : type_parameter_constraints COMMA type_parameter_constraint",
    "type_parameter_constraint : type",
    "type_parameter_constraint : NEW OPEN_PARENS CLOSE_PARENS",
    "type_parameter_constraint : CLASS",
    "type_parameter_constraint : STRUCT",
    "opt_type_parameter_variance :",
    "opt_type_parameter_variance : type_parameter_variance",
    "type_parameter_variance : OUT",
    "type_parameter_variance : IN",
    "$$74 :",
    "block : OPEN_BRACE $$74 opt_statement_list block_end",
    "block_end : CLOSE_BRACE",
    "block_end : COMPLETE_COMPLETION",
    "$$75 :",
    "block_prepared : OPEN_BRACE $$75 opt_statement_list CLOSE_BRACE",
    "opt_statement_list :",
    "opt_statement_list : statement_list",
    "statement_list : statement",
    "statement_list : statement_list statement",
    "statement : declaration_statement",
    "statement : valid_declaration_statement",
    "statement : labeled_statement",
    "interactive_statement_list : interactive_statement",
    "interactive_statement_list : interactive_statement_list interactive_statement",
    "interactive_statement : declaration_statement",
    "interactive_statement : interactive_valid_declaration_statement",
    "interactive_statement : labeled_statement",
    "valid_declaration_statement : block",
    "valid_declaration_statement : empty_statement",
    "valid_declaration_statement : expression_statement",
    "valid_declaration_statement : selection_statement",
    "valid_declaration_statement : iteration_statement",
    "valid_declaration_statement : jump_statement",
    "valid_declaration_statement : try_statement",
    "valid_declaration_statement : checked_statement",
    "valid_declaration_statement : unchecked_statement",
    "valid_declaration_statement : lock_statement",
    "valid_declaration_statement : using_statement",
    "valid_declaration_statement : unsafe_statement",
    "valid_declaration_statement : fixed_statement",
    "interactive_valid_declaration_statement : block",
    "interactive_valid_declaration_statement : empty_statement",
    "interactive_valid_declaration_statement : interactive_expression_statement",
    "interactive_valid_declaration_statement : selection_statement",
    "interactive_valid_declaration_statement : iteration_statement",
    "interactive_valid_declaration_statement : jump_statement",
    "interactive_valid_declaration_statement : try_statement",
    "interactive_valid_declaration_statement : checked_statement",
    "interactive_valid_declaration_statement : unchecked_statement",
    "interactive_valid_declaration_statement : lock_statement",
    "interactive_valid_declaration_statement : using_statement",
    "interactive_valid_declaration_statement : unsafe_statement",
    "interactive_valid_declaration_statement : fixed_statement",
    "embedded_statement : valid_declaration_statement",
    "embedded_statement : declaration_statement",
    "embedded_statement : labeled_statement",
    "empty_statement : SEMICOLON",
    "$$76 :",
    "labeled_statement : IDENTIFIER COLON $$76 statement",
    "declaration_statement : local_variable_declaration SEMICOLON",
    "declaration_statement : local_constant_declaration SEMICOLON",
    "variable_type : primary_expression_no_array_creation opt_rank_specifier_or_nullable",
    "variable_type : builtin_types opt_rank_specifier_or_nullable",
    "variable_type : VOID opt_rank_specifier",
    "local_variable_pointer_type : primary_expression_no_array_creation STAR",
    "local_variable_pointer_type : builtin_types STAR",
    "local_variable_pointer_type : VOID STAR",
    "local_variable_pointer_type : local_variable_pointer_type STAR",
    "local_variable_type : variable_type",
    "local_variable_type : local_variable_pointer_type opt_rank_specifier",
    "local_variable_declaration : local_variable_type local_variable_declarators",
    "local_constant_declaration : CONST variable_type local_constant_declarators",
    "local_constant_declarators : local_constant_declarator",
    "local_constant_declarators : local_constant_declarators COMMA local_constant_declarator",
    "local_constant_declarator : IDENTIFIER ASSIGN constant_initializer_expr",
    "local_constant_declarator : IDENTIFIER error",
    "expression_statement : statement_expression SEMICOLON",
    "expression_statement : statement_expression COMPLETE_COMPLETION",
    "interactive_expression_statement : interactive_statement_expression SEMICOLON",
    "interactive_expression_statement : interactive_statement_expression COMPLETE_COMPLETION",
    "statement_expression : expression",
    "statement_expression : error",
    "interactive_statement_expression : expression",
    "interactive_statement_expression : error",
    "selection_statement : if_statement",
    "selection_statement : switch_statement",
    "if_statement : IF open_parens_any boolean_expression CLOSE_PARENS embedded_statement",
    "if_statement : IF open_parens_any boolean_expression CLOSE_PARENS embedded_statement ELSE embedded_statement",
    "$$77 :",
    "switch_statement : SWITCH open_parens_any $$77 expression CLOSE_PARENS OPEN_BRACE opt_switch_sections CLOSE_BRACE",
    "opt_switch_sections :",
    "opt_switch_sections : switch_sections",
    "switch_sections : switch_section",
    "switch_sections : switch_sections switch_section",
    "$$78 :",
    "switch_section : switch_labels $$78 statement_list",
    "switch_labels : switch_label",
    "switch_labels : switch_labels switch_label",
    "switch_label : CASE constant_expression COLON",
    "switch_label : DEFAULT_COLON",
    "iteration_statement : while_statement",
    "iteration_statement : do_statement",
    "iteration_statement : for_statement",
    "iteration_statement : foreach_statement",
    "while_statement : WHILE open_parens_any boolean_expression CLOSE_PARENS embedded_statement",
    "do_statement : DO embedded_statement WHILE open_parens_any boolean_expression CLOSE_PARENS SEMICOLON",
    "$$79 :",
    "for_statement : FOR open_parens_any opt_for_initializer SEMICOLON $$79 opt_for_condition SEMICOLON opt_for_iterator CLOSE_PARENS embedded_statement",
    "opt_for_initializer :",
    "opt_for_initializer : for_initializer",
    "for_initializer : local_variable_declaration",
    "for_initializer : statement_expression_list",
    "opt_for_condition :",
    "opt_for_condition : boolean_expression",
    "opt_for_iterator :",
    "opt_for_iterator : for_iterator",
    "for_iterator : statement_expression_list",
    "statement_expression_list : statement_expression",
    "statement_expression_list : statement_expression_list COMMA statement_expression",
    "foreach_statement : FOREACH open_parens_any type IN expression CLOSE_PARENS",
    "$$80 :",
    "foreach_statement : FOREACH open_parens_any type IDENTIFIER IN expression CLOSE_PARENS $$80 embedded_statement",
    "jump_statement : break_statement",
    "jump_statement : continue_statement",
    "jump_statement : goto_statement",
    "jump_statement : return_statement",
    "jump_statement : throw_statement",
    "jump_statement : yield_statement",
    "break_statement : BREAK SEMICOLON",
    "continue_statement : CONTINUE SEMICOLON",
    "goto_statement : GOTO IDENTIFIER SEMICOLON",
    "goto_statement : GOTO CASE constant_expression SEMICOLON",
    "goto_statement : GOTO DEFAULT SEMICOLON",
    "return_statement : RETURN opt_expression SEMICOLON",
    "throw_statement : THROW opt_expression SEMICOLON",
    "yield_statement : IDENTIFIER RETURN opt_expression SEMICOLON",
    "yield_statement : IDENTIFIER BREAK SEMICOLON",
    "opt_expression :",
    "opt_expression : expression",
    "try_statement : TRY block catch_clauses",
    "try_statement : TRY block FINALLY block",
    "try_statement : TRY block catch_clauses FINALLY block",
    "try_statement : TRY block error",
    "catch_clauses : catch_clause",
    "catch_clauses : catch_clauses catch_clause",
    "opt_identifier :",
    "opt_identifier : IDENTIFIER",
    "$$81 :",
    "catch_clause : CATCH opt_catch_args $$81 block",
    "opt_catch_args :",
    "opt_catch_args : catch_args",
    "catch_args : open_parens_any type opt_identifier CLOSE_PARENS",
    "catch_args : open_parens_any CLOSE_PARENS",
    "checked_statement : CHECKED block",
    "unchecked_statement : UNCHECKED block",
    "$$82 :",
    "unsafe_statement : UNSAFE $$82 block",
    "$$83 :",
    "fixed_statement : FIXED open_parens_any type_and_void fixed_pointer_declarators CLOSE_PARENS $$83 embedded_statement",
    "fixed_pointer_declarators : fixed_pointer_declarator",
    "fixed_pointer_declarators : fixed_pointer_declarators COMMA fixed_pointer_declarator",
    "fixed_pointer_declarator : IDENTIFIER ASSIGN expression",
    "fixed_pointer_declarator : IDENTIFIER",
    "lock_statement : LOCK open_parens_any expression CLOSE_PARENS embedded_statement",
    "$$84 :",
    "using_statement : USING open_parens_any local_variable_declaration CLOSE_PARENS $$84 embedded_statement",
    "$$85 :",
    "using_statement : USING open_parens_any expression CLOSE_PARENS $$85 embedded_statement",
    "query_expression : first_from_clause query_body",
    "query_expression : nested_from_clause query_body",
    "query_expression : first_from_clause COMPLETE_COMPLETION",
    "query_expression : nested_from_clause COMPLETE_COMPLETION",
    "first_from_clause : FROM_FIRST IDENTIFIER IN expression",
    "first_from_clause : FROM_FIRST type IDENTIFIER IN expression",
    "nested_from_clause : FROM IDENTIFIER IN expression",
    "nested_from_clause : FROM type IDENTIFIER IN expression",
    "$$86 :",
    "from_clause : FROM IDENTIFIER IN $$86 expression",
    "$$87 :",
    "from_clause : FROM type IDENTIFIER IN $$87 expression",
    "query_body : opt_query_body_clauses select_or_group_clause opt_query_continuation",
    "query_body : opt_query_body_clauses COMPLETE_COMPLETION",
    "$$88 :",
    "select_or_group_clause : SELECT $$88 expression",
    "$$89 :",
    "$$90 :",
    "select_or_group_clause : GROUP $$89 expression $$90 BY expression",
    "opt_query_body_clauses :",
    "opt_query_body_clauses : query_body_clauses",
    "query_body_clauses : query_body_clause",
    "query_body_clauses : query_body_clauses query_body_clause",
    "query_body_clause : from_clause",
    "query_body_clause : let_clause",
    "query_body_clause : where_clause",
    "query_body_clause : join_clause",
    "query_body_clause : orderby_clause",
    "$$91 :",
    "let_clause : LET IDENTIFIER ASSIGN $$91 expression",
    "$$92 :",
    "where_clause : WHERE $$92 boolean_expression",
    "$$93 :",
    "$$94 :",
    "$$95 :",
    "join_clause : JOIN IDENTIFIER IN $$93 expression ON $$94 expression EQUALS $$95 expression opt_join_into",
    "$$96 :",
    "$$97 :",
    "$$98 :",
    "join_clause : JOIN type IDENTIFIER IN $$96 expression ON $$97 expression EQUALS $$98 expression opt_join_into",
    "opt_join_into :",
    "opt_join_into : INTO IDENTIFIER",
    "$$99 :",
    "orderby_clause : ORDERBY $$99 orderings",
    "orderings : order_by",
    "$$100 :",
    "orderings : order_by COMMA $$100 orderings_then_by",
    "orderings_then_by : then_by",
    "$$101 :",
    "orderings_then_by : orderings_then_by COMMA $$101 then_by",
    "order_by : expression",
    "order_by : expression ASCENDING",
    "order_by : expression DESCENDING",
    "then_by : expression",
    "then_by : expression ASCENDING",
    "then_by : expression DESCENDING",
    "opt_query_continuation :",
    "$$102 :",
    "opt_query_continuation : INTO IDENTIFIER $$102 query_body",
    "interactive_parsing : EVAL_STATEMENT_PARSER EOF",
    "interactive_parsing : EVAL_USING_DECLARATIONS_UNIT_PARSER using_directives",
    "$$103 :",
    "interactive_parsing : EVAL_STATEMENT_PARSER $$103 interactive_statement_list opt_COMPLETE_COMPLETION",
    "$$104 :",
    "interactive_parsing : EVAL_COMPILATION_UNIT_PARSER $$104 interactive_compilation_unit",
    "interactive_compilation_unit : outer_declarations",
    "interactive_compilation_unit : outer_declarations global_attributes",
    "interactive_compilation_unit : global_attributes",
    "interactive_compilation_unit :",
    "opt_COMPLETE_COMPLETION :",
    "opt_COMPLETE_COMPLETION : COMPLETE_COMPLETION",
    "close_brace_or_complete_completion : CLOSE_BRACE",
    "close_brace_or_complete_completion : COMPLETE_COMPLETION",
  };
 public static string getRule (int index) {
    return yyRule [index];
 }
}
  protected static  string [] yyNames = {    
    "end-of-file",null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,"EOF","NONE","ERROR",
    "FIRST_KEYWORD","ABSTRACT","AS","ADD","BASE","BOOL","BREAK","BYTE",
    "CASE","CATCH","CHAR","CHECKED","CLASS","CONST","CONTINUE","DECIMAL",
    "DEFAULT","DELEGATE","DO","DOUBLE","ELSE","ENUM","EVENT","EXPLICIT",
    "EXTERN","FALSE","FINALLY","FIXED","FLOAT","FOR","FOREACH","GOTO",
    "IF","IMPLICIT","IN","INT","INTERFACE","INTERNAL","IS","LOCK","LONG",
    "NAMESPACE","NEW","NULL","OBJECT","OPERATOR","OUT","OVERRIDE",
    "PARAMS","PRIVATE","PROTECTED","PUBLIC","READONLY","REF","RETURN",
    "REMOVE","SBYTE","SEALED","SHORT","SIZEOF","STACKALLOC","STATIC",
    "STRING","STRUCT","SWITCH","THIS","THROW","TRUE","TRY","TYPEOF",
    "UINT","ULONG","UNCHECKED","UNSAFE","USHORT","USING","VIRTUAL","VOID",
    "VOLATILE","WHERE","WHILE","ARGLIST","PARTIAL","ARROW","FROM",
    "FROM_FIRST","JOIN","ON","EQUALS","SELECT","GROUP","BY","LET",
    "ORDERBY","ASCENDING","DESCENDING","INTO","INTERR_NULLABLE",
    "EXTERN_ALIAS","OP_GENERICS_LT","OP_GENERICS_LT_DECL",
    "OP_GENERICS_GT","GET","SET","LAST_KEYWORD","OPEN_BRACE",
    "CLOSE_BRACE","OPEN_BRACKET","CLOSE_BRACKET","OPEN_PARENS",
    "CLOSE_PARENS","DOT","COMMA","COLON","SEMICOLON","TILDE","PLUS",
    "MINUS","BANG","ASSIGN","OP_LT","OP_GT","BITWISE_AND","BITWISE_OR",
    "STAR","PERCENT","DIV","CARRET","INTERR","DOUBLE_COLON","OP_INC",
    "OP_DEC","OP_SHIFT_LEFT","OP_SHIFT_RIGHT","OP_LE","OP_GE","OP_EQ",
    "OP_NE","OP_AND","OP_OR","OP_MULT_ASSIGN","OP_DIV_ASSIGN",
    "OP_MOD_ASSIGN","OP_ADD_ASSIGN","OP_SUB_ASSIGN",
    "OP_SHIFT_LEFT_ASSIGN","OP_SHIFT_RIGHT_ASSIGN","OP_AND_ASSIGN",
    "OP_XOR_ASSIGN","OP_OR_ASSIGN","OP_PTR","OP_COALESCING","LITERAL",
    "IDENTIFIER","OPEN_PARENS_LAMBDA","OPEN_PARENS_CAST",
    "GENERIC_DIMENSION","DEFAULT_COLON","OPEN_BRACKET_EXPR",
    "EVAL_STATEMENT_PARSER","EVAL_COMPILATION_UNIT_PARSER",
    "EVAL_USING_DECLARATIONS_UNIT_PARSER","GENERATE_COMPLETION",
    "COMPLETE_COMPLETION","UMINUS",
  };

  /** index-checked interface to yyNames[].
      @param token single character or %token value.
      @return token name or [illegal] or [unknown].
    */
  public static string yyname (int token) {
    if ((token < 0) || (token > yyNames.Length)) return "[illegal]";
    string name;
    if ((name = yyNames[token]) != null) return name;
    return "[unknown]";
  }

  int yyExpectingState;
  /** computes list of expected tokens on error by tracing the tables.
      @param state for which to compute the list.
      @return list of token names.
    */
  protected int [] yyExpectingTokens (int state){
    int token, n, len = 0;
    bool[] ok = new bool[yyNames.Length];
    if ((n = yySindex[state]) != 0)
      for (token = n < 0 ? -n : 0;
           (token < yyNames.Length) && (n+token < yyTable.Length); ++ token)
        if (yyCheck[n+token] == token && !ok[token] && yyNames[token] != null) {
          ++ len;
          ok[token] = true;
        }
    if ((n = yyRindex[state]) != 0)
      for (token = n < 0 ? -n : 0;
           (token < yyNames.Length) && (n+token < yyTable.Length); ++ token)
        if (yyCheck[n+token] == token && !ok[token] && yyNames[token] != null) {
          ++ len;
          ok[token] = true;
        }
    int [] result = new int [len];
    for (n = token = 0; n < len;  ++ token)
      if (ok[token]) result[n++] = token;
    return result;
  }
  protected string[] yyExpecting (int state) {
    int [] tokens = yyExpectingTokens (state);
    string [] result = new string[tokens.Length];
    for (int n = 0; n < tokens.Length;  n++)
      result[n++] = yyNames[tokens [n]];
    return result;
  }

  /** the generated parser, with debugging messages.
      Maintains a state and a value stack, currently with fixed maximum size.
      @param yyLex scanner.
      @param yydebug debug message writer implementing yyDebug, or null.
      @return result of the last reduction, if any.
      @throws yyException on irrecoverable parse error.
    */
  internal Object yyparse (yyParser.yyInput yyLex, Object yyd)
				 {
    this.debug = (yydebug.yyDebug)yyd;
    return yyparse(yyLex);
  }

  /** initial size and increment of the state/value stack [default 256].
      This is not final so that it can be overwritten outside of invocations
      of yyparse().
    */
  protected int yyMax;

  /** executed at the beginning of a reduce action.
      Used as $$ = yyDefault($1), prior to the user-specified action, if any.
      Can be overwritten to provide deep copy, etc.
      @param first value for $1, or null.
      @return first.
    */
  protected Object yyDefault (Object first) {
    return first;
  }

	static int[] global_yyStates;
	static object[] global_yyVals;
	protected bool use_global_stacks;

  /** the generated parser.
      Maintains a state and a value stack, currently with fixed maximum size.
      @param yyLex scanner.
      @return result of the last reduction, if any.
      @throws yyException on irrecoverable parse error.
    */
  internal Object yyparse (yyParser.yyInput yyLex)
  {
    if (yyMax <= 0) yyMax = 256;		// initial size
    int yyState = 0;                   // state stack ptr
    int [] yyStates;               	// state stack 
    Object yyVal = null;                // value stack ptr
    Object [] yyVals;					// value stack
    int yyToken = -1;					// current input
    int yyErrorFlag = 0;				// #tks to shift
	if (use_global_stacks && global_yyStates != null) {
		yyVals = global_yyVals;
		yyStates = global_yyStates;
   } else {
		yyVals = new object [yyMax];
		yyStates = new int [yyMax];
		if (use_global_stacks) {
			global_yyVals = yyVals;
			global_yyStates = yyStates;
		}
	}

    /*yyLoop:*/ for (int yyTop = 0;; ++ yyTop) {
      if (yyTop >= yyStates.Length) {			// dynamically increase
        global::System.Array.Resize (ref yyStates, yyStates.Length+yyMax);
        global::System.Array.Resize (ref yyVals, yyVals.Length+yyMax);
      }
      yyStates[yyTop] = yyState;
      yyVals[yyTop] = yyVal;
      if (debug != null) debug.push(yyState, yyVal);

      /*yyDiscarded:*/ for (;;) {	// discarding a token does not change stack
        int yyN;
        if ((yyN = yyDefRed[yyState]) == 0) {	// else [default] reduce (yyN)
          if (yyToken < 0) {
            yyToken = yyLex.advance() ? yyLex.token() : 0;
            if (debug != null)
              debug.lex(yyState, yyToken, yyname(yyToken), yyLex.value());
          }
          if ((yyN = yySindex[yyState]) != 0 && ((yyN += yyToken) >= 0)
              && (yyN < yyTable.Length) && (yyCheck[yyN] == yyToken)) {
            if (debug != null)
              debug.shift(yyState, yyTable[yyN], yyErrorFlag-1);
            yyState = yyTable[yyN];		// shift to yyN
            yyVal = yyLex.value();
            yyToken = -1;
            if (yyErrorFlag > 0) -- yyErrorFlag;
            goto continue_yyLoop;
          }
          if ((yyN = yyRindex[yyState]) != 0 && (yyN += yyToken) >= 0
              && yyN < yyTable.Length && yyCheck[yyN] == yyToken)
            yyN = yyTable[yyN];			// reduce (yyN)
          else
            switch (yyErrorFlag) {
  
            case 0:
              yyExpectingState = yyState;
              // yyerror(String.Format ("syntax error, got token `{0}'", yyname (yyToken)), yyExpecting(yyState));
              if (debug != null) debug.error("syntax error");
              if (yyToken == 0 /*eof*/ || yyToken == eof_token) throw new yyParser.yyUnexpectedEof ();
              goto case 1;
            case 1: case 2:
              yyErrorFlag = 3;
              do {
                if ((yyN = yySindex[yyStates[yyTop]]) != 0
                    && (yyN += Token.yyErrorCode) >= 0 && yyN < yyTable.Length
                    && yyCheck[yyN] == Token.yyErrorCode) {
                  if (debug != null)
                    debug.shift(yyStates[yyTop], yyTable[yyN], 3);
                  yyState = yyTable[yyN];
                  yyVal = yyLex.value();
                  goto continue_yyLoop;
                }
                if (debug != null) debug.pop(yyStates[yyTop]);
              } while (-- yyTop >= 0);
              if (debug != null) debug.reject();
              throw new yyParser.yyException("irrecoverable syntax error");
  
            case 3:
              if (yyToken == 0) {
                if (debug != null) debug.reject();
                throw new yyParser.yyException("irrecoverable syntax error at end-of-file");
              }
              if (debug != null)
                debug.discard(yyState, yyToken, yyname(yyToken),
  							yyLex.value());
              yyToken = -1;
              goto continue_yyDiscarded;		// leave stack alone
            }
        }
        int yyV = yyTop + 1-yyLen[yyN];
        if (debug != null)
          debug.reduce(yyState, yyStates[yyV-1], yyN, YYRules.getRule (yyN), yyLen[yyN]);
        yyVal = yyDefault(yyV > yyTop ? null : yyVals[yyV]);
        switch (yyN) {
case 5:
#line 376 "cs-parser.jay"
  { Lexer.CompleteOnEOF = false; }
  break;
case 7:
#line 381 "cs-parser.jay"
  {
		Lexer.check_incorrect_doc_comment ();
	  }
  break;
case 8:
#line 385 "cs-parser.jay"
  {
		Lexer.check_incorrect_doc_comment ();
	  }
  break;
case 16:
#line 408 "cs-parser.jay"
  {
		var lt = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
		string s = lt.Value;
		if (s != "alias"){
			syntax_error (lt.Location, "`alias' expected");
		} else if (RootContext.Version == LanguageVersion.ISO_1) {
			Report.FeatureIsNotAvailable (lt.Location, "external alias");
		} else {
			lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop]; 
			current_namespace.AddUsingExternalAlias (lt.Value, lt.Location, Report);
		}
	  }
  break;
case 17:
#line 421 "cs-parser.jay"
  {
	  	syntax_error (GetLocation (yyVals[-1+yyTop]), "`alias' expected");   /* TODO: better*/
	  }
  break;
case 20:
#line 433 "cs-parser.jay"
  {
		if (RootContext.Documentation != null)
			Lexer.doc_state = XmlCommentState.Allowed;
	  }
  break;
case 21:
#line 438 "cs-parser.jay"
  {
		if (RootContext.Documentation != null)
			Lexer.doc_state = XmlCommentState.Allowed;
	  }
  break;
case 22:
#line 446 "cs-parser.jay"
  {
		var lt = (Tokenizer.LocatedToken) yyVals[-3+yyTop];
		current_namespace.AddUsingAlias (lt.Value, (MemberName) yyVals[-1+yyTop], GetLocation (yyVals[-4+yyTop]));
	  }
  break;
case 23:
#line 450 "cs-parser.jay"
  {
		CheckIdentifierToken (yyToken, GetLocation (yyVals[0+yyTop]));
		yyVal = null;
	  }
  break;
case 24:
#line 458 "cs-parser.jay"
  {
		current_namespace.AddUsing ((MemberName) yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));
	  }
  break;
case 25:
#line 470 "cs-parser.jay"
  {
		MemberName name = (MemberName) yyVals[0+yyTop];

		if (yyVals[-2+yyTop] != null) {
			Report.Error(1671, name.Location, "A namespace declaration cannot have modifiers or attributes");
		}

		current_namespace = new NamespaceEntry (
			current_namespace, file, name.GetName ());
		current_class = current_namespace.SlaveDeclSpace;
		current_container = current_class.PartialContainer;
	  }
  break;
case 26:
#line 483 "cs-parser.jay"
  { 
		current_namespace = current_namespace.Parent;
		current_class = current_namespace.SlaveDeclSpace;
		current_container = current_class.PartialContainer;
	  }
  break;
case 27:
#line 492 "cs-parser.jay"
  {
		var lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];
		yyVal = new MemberName (lt.Value, lt.Location);
	  }
  break;
case 28:
#line 497 "cs-parser.jay"
  {
		var lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];
		yyVal = new MemberName ((MemberName) yyVals[-2+yyTop], lt.Value, lt.Location);		
	  }
  break;
case 29:
#line 502 "cs-parser.jay"
  {
		syntax_error (lexer.Location, "`.' expected");
		yyVal = new MemberName ("<invalid>", lexer.Location);
	  }
  break;
case 34:
#line 520 "cs-parser.jay"
  {
		MemberName name = (MemberName) yyVals[0+yyTop];

		if (name.TypeArguments != null)
			syntax_error (lexer.Location, "namespace name expected");

		yyVal = name;
	  }
  break;
case 35:
#line 532 "cs-parser.jay"
  {
		if (RootContext.Documentation != null)
			Lexer.doc_state = XmlCommentState.Allowed;
	  }
  break;
case 38:
#line 545 "cs-parser.jay"
  {
		Report.Error (1518, lexer.Location, "Expected `class', `delegate', `enum', `interface', or `struct'");
	  }
  break;
case 40:
#line 553 "cs-parser.jay"
  {
		Report.Error (1513, lexer.Location, "Expected `}'");
	  }
  break;
case 49:
#line 580 "cs-parser.jay"
  {
		if (yyVals[0+yyTop] != null) {
			DeclSpace ds = (DeclSpace)yyVals[0+yyTop];

			if ((ds.ModFlags & (Modifiers.PRIVATE|Modifiers.PROTECTED)) != 0){
				Report.Error (1527, ds.Location, 
				"Namespace elements cannot be explicitly declared as private, protected or protected internal");
			}
		}
		current_namespace.DeclarationFound = true;
	  }
  break;
case 50:
#line 591 "cs-parser.jay"
  {
		current_namespace.DeclarationFound = true;
	  }
  break;
case 51:
#line 595 "cs-parser.jay"
  {
		Report.Error (116, ((MemberCore) yyVals[0+yyTop]).Location, "A namespace can only contain types and namespace declarations");
	  }
  break;
case 52:
#line 598 "cs-parser.jay"
  {
		Report.Error (116, ((MemberCore) yyVals[0+yyTop]).Location, "A namespace can only contain types and namespace declarations");
	  }
  break;
case 58:
#line 624 "cs-parser.jay"
  {
		if (yyVals[0+yyTop] != null) {
			Attributes attrs = (Attributes)yyVals[0+yyTop];
			if (global_attrs_enabled) {
				CodeGen.Assembly.AddAttributes (attrs.Attrs, current_namespace);
			} else {
				foreach (Attribute a in attrs.Attrs) {
					Report.Error (1730, a.Location, "Assembly and module attributes must precede all other elements except using clauses and extern alias declarations");
				}
			}
		}
		yyVal = yyVals[0+yyTop];
	  }
  break;
case 59:
#line 641 "cs-parser.jay"
  {
		global_attrs_enabled = false;
		yyVal = null;
      }
  break;
case 60:
#line 646 "cs-parser.jay"
  { 
		global_attrs_enabled = false;
		yyVal = yyVals[0+yyTop];
	  }
  break;
case 61:
#line 655 "cs-parser.jay"
  {
		if (current_attr_target != String.Empty) {
			var sect = (List<Attribute>) yyVals[0+yyTop];

			if (global_attrs_enabled) {
				if (current_attr_target == "module") {
					current_container.Module.Compiled.AddAttributes (sect);
					yyVal = null;
				} else if (current_attr_target != null && current_attr_target.Length > 0) {
					CodeGen.Assembly.AddAttributes (sect, current_namespace);
					yyVal = null;
				} else {
					yyVal = new Attributes (sect);
				}
				if (yyVal == null) {
					if (RootContext.Documentation != null) {
						Lexer.check_incorrect_doc_comment ();
						Lexer.doc_state =
							XmlCommentState.Allowed;
					}
				}
			} else {
				yyVal = new Attributes (sect);
			}		
		}
		else
			yyVal = null;
		current_attr_target = null;
	  }
  break;
case 62:
#line 685 "cs-parser.jay"
  {
		if (current_attr_target != String.Empty) {
			Attributes attrs = yyVals[-1+yyTop] as Attributes;
			var sect = (List<Attribute>) yyVals[0+yyTop];

			if (global_attrs_enabled) {
				if (current_attr_target == "module") {
					current_container.Module.Compiled.AddAttributes (sect);
					yyVal = null;
				} else if (current_attr_target == "assembly") {
					CodeGen.Assembly.AddAttributes (sect, current_namespace);
					yyVal = null;
				} else {
					if (attrs == null)
						attrs = new Attributes (sect);
					else
						attrs.AddAttributes (sect);			
				}
			} else {
				if (attrs == null)
					attrs = new Attributes (sect);
				else
					attrs.AddAttributes (sect);
			}		
			yyVal = attrs;
		}
		else
			yyVal = null;
		current_attr_target = null;
	  }
  break;
case 63:
#line 719 "cs-parser.jay"
  {
		yyVal = yyVals[-2+yyTop];
 	  }
  break;
case 64:
#line 723 "cs-parser.jay"
  {
		yyVal = yyVals[-2+yyTop];
	  }
  break;
case 65:
#line 730 "cs-parser.jay"
  {
		current_attr_target = (string)yyVals[-1+yyTop];
		yyVal = yyVals[-1+yyTop];
	  }
  break;
case 66:
#line 738 "cs-parser.jay"
  {
		var lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];
		yyVal = CheckAttributeTarget (lt.Value, lt.Location);
	  }
  break;
case 67:
#line 742 "cs-parser.jay"
  { yyVal = "event"; }
  break;
case 68:
#line 743 "cs-parser.jay"
  { yyVal = "return"; }
  break;
case 69:
#line 745 "cs-parser.jay"
  {
		string name = GetTokenName (yyToken);
		yyVal = CheckAttributeTarget (name, GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 70:
#line 753 "cs-parser.jay"
  {
		yyVal = new List<Attribute> (4) { (Attribute) yyVals[0+yyTop] };
	  }
  break;
case 71:
#line 757 "cs-parser.jay"
  {
		var attrs = (List<Attribute>) yyVals[-2+yyTop];
		attrs.Add ((Attribute) yyVals[0+yyTop]);

		yyVal = attrs;
	  }
  break;
case 72:
#line 767 "cs-parser.jay"
  {
		++lexer.parsing_block;
	  }
  break;
case 73:
#line 771 "cs-parser.jay"
  {
		--lexer.parsing_block;
		MemberName mname = (MemberName) yyVals[-2+yyTop];
		if (mname.IsGeneric) {
			Report.Error (404, lexer.Location,
				      "'<' unexpected: attributes cannot be generic");
		}

		Arguments [] arguments = (Arguments []) yyVals[0+yyTop];
		ATypeNameExpression expr = mname.GetTypeExpression ();

		if (current_attr_target == String.Empty)
			yyVal = null;
		else if (global_attrs_enabled && (current_attr_target == "assembly" || current_attr_target == "module"))
			/* FIXME: supply "nameEscaped" parameter here.*/
			yyVal = new GlobalAttribute (current_namespace, current_attr_target,
						  expr, arguments, mname.Location, lexer.IsEscapedIdentifier (mname.Location));
		else
			yyVal = new Attribute (current_attr_target, expr, arguments, mname.Location, lexer.IsEscapedIdentifier (mname.Location));
	  }
  break;
case 74:
#line 794 "cs-parser.jay"
  { /* reserved attribute name or identifier: 17.4 */ }
  break;
case 75:
#line 798 "cs-parser.jay"
  { yyVal = null; }
  break;
case 76:
#line 800 "cs-parser.jay"
  {
		yyVal = yyVals[-1+yyTop];
	  }
  break;
case 77:
#line 807 "cs-parser.jay"
  { yyVal = null; }
  break;
case 78:
#line 809 "cs-parser.jay"
  {
	  	Arguments a = new Arguments (4);
		a.Add ((Argument) yyVals[0+yyTop]);
		yyVal = new Arguments [] { a, null };
	  }
  break;
case 79:
#line 815 "cs-parser.jay"
  {
	  	Arguments a = new Arguments (4);
		a.Add ((Argument) yyVals[0+yyTop]);  
		yyVal = new Arguments [] { null, a };
	  }
  break;
case 80:
#line 821 "cs-parser.jay"
  {
		Arguments[] o = (Arguments[]) yyVals[-2+yyTop];
		if (o [1] != null) {
			Report.Error (1016, ((Argument) yyVals[0+yyTop]).Expr.Location, "Named attribute arguments must appear after the positional arguments");
			o [0] = new Arguments (4);
		}
		
		Arguments args = ((Arguments) o [0]);
		if (args.Count > 0 && !(yyVals[0+yyTop] is NamedArgument) && args [args.Count - 1] is NamedArgument)
			Error_NamedArgumentExpected ((NamedArgument) args [args.Count - 1]);
		
		args.Add ((Argument) yyVals[0+yyTop]);
		lbag.AppendTo (args, GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 81:
#line 836 "cs-parser.jay"
  {
		Arguments[] o = (Arguments[]) yyVals[-2+yyTop];
		if (o [1] == null) {
			o [1] = new Arguments (4);
		}

		((Arguments) o [1]).Add ((Argument) yyVals[0+yyTop]);
		lbag.AppendTo (o[1], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 82:
#line 849 "cs-parser.jay"
  {
	  	yyVal = new Argument ((Expression) yyVals[0+yyTop]);
	  }
  break;
case 84:
#line 857 "cs-parser.jay"
  {
		++lexer.parsing_block;
	  }
  break;
case 85:
#line 861 "cs-parser.jay"
  {
	  	--lexer.parsing_block;
	  	var lt = (Tokenizer.LocatedToken) yyVals[-3+yyTop];
		yyVal = new NamedArgument (lt.Value, lt.Location, (Expression) yyVals[0+yyTop]);	  
	  }
  break;
case 86:
#line 870 "cs-parser.jay"
  {
		if (RootContext.Version <= LanguageVersion.V_3)
			Report.FeatureIsNotAvailable (GetLocation (yyVals[-3+yyTop]), "named argument");
			
		/* Avoid boxing in common case (no modifier)*/
		var arg_mod = yyVals[-1+yyTop] == null ? Argument.AType.None : (Argument.AType) yyVals[-1+yyTop];
			
		var lt = (Tokenizer.LocatedToken) yyVals[-3+yyTop];
		yyVal = new NamedArgument (lt.Value, lt.Location, (Expression) yyVals[0+yyTop], arg_mod);
	  }
  break;
case 87:
#line 883 "cs-parser.jay"
  { yyVal = null; }
  break;
case 88:
#line 885 "cs-parser.jay"
  { 
		yyVal = Argument.AType.Ref;
	  }
  break;
case 89:
#line 889 "cs-parser.jay"
  { 
		yyVal = Argument.AType.Out;
	  }
  break;
case 104:
#line 917 "cs-parser.jay"
  {
		Report.Error (1519, lexer.Location, "Unexpected symbol `{0}' in class, struct, or interface member declaration",
			GetSymbolName (yyToken));
		yyVal = null;
		lexer.parsing_generic_declaration = false;
	  }
  break;
case 105:
#line 930 "cs-parser.jay"
  {
		lexer.ConstraintsParsing = true;
	  }
  break;
case 106:
#line 934 "cs-parser.jay"
  { 
		MemberName name = MakeName ((MemberName) yyVals[0+yyTop]);
		push_current_class (new Struct (current_namespace, current_class, name, (Modifiers) yyVals[-4+yyTop], (Attributes) yyVals[-5+yyTop]), yyVals[-3+yyTop]);
	  }
  break;
case 107:
#line 940 "cs-parser.jay"
  {
		lexer.ConstraintsParsing = false;

		current_class.SetParameterInfo ((List<Constraints>) yyVals[0+yyTop]);

		if (RootContext.Documentation != null)
			current_container.DocComment = Lexer.consume_doc_comment ();

		lbag.AddMember (current_class, mod_locations, GetLocation (yyVals[-5+yyTop]));
	  }
  break;
case 108:
#line 951 "cs-parser.jay"
  {
		--lexer.parsing_declaration;	  
		if (RootContext.Documentation != null)
			Lexer.doc_state = XmlCommentState.Allowed;
	  }
  break;
case 109:
#line 957 "cs-parser.jay"
  {
		lbag.AppendToMember (current_class, GetLocation (yyVals[0+yyTop]));
		yyVal = pop_current_class ();
	  }
  break;
case 110:
#line 961 "cs-parser.jay"
  {
		CheckIdentifierToken (yyToken, GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 111:
#line 968 "cs-parser.jay"
  {
		if (RootContext.Documentation != null)
			Lexer.doc_state = XmlCommentState.Allowed;
	  }
  break;
case 112:
#line 973 "cs-parser.jay"
  {
		lbag.AppendToMember (current_class, GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 127:
#line 1010 "cs-parser.jay"
  {
		var lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];
		var mod = (Modifiers) yyVals[-3+yyTop];
		current_field = new Const (current_class, (FullNamedExpression) yyVals[-1+yyTop], mod, new MemberName (lt.Value, lt.Location), (Attributes) yyVals[-4+yyTop]);
		current_container.AddConstant ((Const) current_field);
		
		if ((mod & Modifiers.STATIC) != 0) {
			Report.Error (504, current_field.Location, "The constant `{0}' cannot be marked static", current_field.GetSignatureForError ());
		}
		
		yyVal = current_field;
	  }
  break;
case 128:
#line 1023 "cs-parser.jay"
  {
		if (RootContext.Documentation != null) {
			current_field.DocComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.Allowed;
		}
		
		current_field.Initializer = (ConstInitializer) yyVals[-2+yyTop];
		lbag.AddMember (current_field, mod_locations, GetLocation (yyVals[-6+yyTop]), GetLocation (yyVals[0+yyTop]));
		current_field = null;
	  }
  break;
case 131:
#line 1042 "cs-parser.jay"
  {
		current_field.AddDeclarator ((FieldDeclarator) yyVals[0+yyTop]);
	  }
  break;
case 132:
#line 1046 "cs-parser.jay"
  {
		current_field.AddDeclarator ((FieldDeclarator) yyVals[0+yyTop]);
	  }
  break;
case 133:
#line 1053 "cs-parser.jay"
  {
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
	  	yyVal = new FieldDeclarator (new SimpleMemberName (lt.Value, lt.Location), (ConstInitializer) yyVals[0+yyTop]);
	  	lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]));
	  }
  break;
case 134:
#line 1062 "cs-parser.jay"
  {
		++lexer.parsing_block;
	  }
  break;
case 135:
#line 1066 "cs-parser.jay"
  {
		--lexer.parsing_block;
		yyVal = new ConstInitializer (current_field, (Expression) yyVals[0+yyTop], GetLocation (yyVals[-2+yyTop]));
	  }
  break;
case 136:
#line 1071 "cs-parser.jay"
  {
		Report.Error (145, lexer.Location, "A const field requires a value to be provided");
		yyVal = null;
	  }
  break;
case 139:
#line 1086 "cs-parser.jay"
  {
	  	lexer.parsing_generic_declaration = false;

		FullNamedExpression type = (FullNamedExpression) yyVals[-1+yyTop];
		if (type.Type == TypeManager.void_type)
			Report.Error (670, GetLocation (yyVals[-1+yyTop]), "Fields cannot have void type");
			
		var lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];
		current_field = new Field (current_class, type, (Modifiers) yyVals[-2+yyTop], new MemberName (lt.Value, lt.Location), (Attributes) yyVals[-3+yyTop]);
		current_container.AddField (current_field);
		yyVal = current_field;
	  }
  break;
case 140:
#line 1101 "cs-parser.jay"
  { 
		if (RootContext.Documentation != null) {
			current_field.DocComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.Allowed;
		}
			
		lbag.AddMember (current_field, mod_locations, GetLocation (yyVals[0+yyTop]));
		yyVal = current_field;
		current_field = null;
	  }
  break;
case 141:
#line 1114 "cs-parser.jay"
  { 
		if (RootContext.Version < LanguageVersion.ISO_2)
			Report.FeatureIsNotAvailable (GetLocation (yyVals[-2+yyTop]), "fixed size buffers");

		var lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];
		current_field = new FixedField (current_class, (FullNamedExpression) yyVals[-1+yyTop], (Modifiers) yyVals[-3+yyTop],
			new MemberName (lt.Value, lt.Location), (Attributes) yyVals[-4+yyTop]);
			
		current_container.AddField (current_field);
	  }
  break;
case 142:
#line 1125 "cs-parser.jay"
  {
		if (RootContext.Documentation != null) {
			current_field.DocComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.Allowed;
	    }

		current_field.Initializer = (ConstInitializer) yyVals[-2+yyTop];	    
		lbag.AddMember (current_field, mod_locations, GetLocation (yyVals[0+yyTop]), GetLocation (yyVals[-6+yyTop]));
		yyVal = current_field;
	    current_field = null;
	  }
  break;
case 143:
#line 1140 "cs-parser.jay"
  {
		Report.Error (1641, GetLocation (yyVals[-1+yyTop]), "A fixed size buffer field must have the array size specifier after the field name");
	  }
  break;
case 145:
#line 1148 "cs-parser.jay"
  {
	  	++lexer.parsing_block;
	  }
  break;
case 146:
#line 1152 "cs-parser.jay"
  {
	  	--lexer.parsing_block;
		current_field.Initializer = (Expression) yyVals[0+yyTop];
		lbag.AppendToMember (current_field, GetLocation (yyVals[-2+yyTop]));
	  }
  break;
case 149:
#line 1166 "cs-parser.jay"
  {
		current_field.AddDeclarator ((FieldDeclarator) yyVals[0+yyTop]);
	  }
  break;
case 150:
#line 1170 "cs-parser.jay"
  {
		current_field.AddDeclarator ((FieldDeclarator) yyVals[0+yyTop]);
	  }
  break;
case 151:
#line 1177 "cs-parser.jay"
  {
		var lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];
	  	yyVal = new FieldDeclarator (new SimpleMemberName (lt.Value, lt.Location), null);
	  	lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 152:
#line 1183 "cs-parser.jay"
  {
		++lexer.parsing_block;
	  }
  break;
case 153:
#line 1187 "cs-parser.jay"
  {
		--lexer.parsing_block;
		var lt = (Tokenizer.LocatedToken) yyVals[-3+yyTop];	  
	  	yyVal = new FieldDeclarator (new SimpleMemberName (lt.Value, lt.Location), (Expression) yyVals[0+yyTop]);
	  	lbag.AddLocation (yyVal, GetLocation (yyVals[-4+yyTop]), GetLocation (yyVals[-2+yyTop]));
	  }
  break;
case 156:
#line 1202 "cs-parser.jay"
  {
		current_field.AddDeclarator ((FieldDeclarator) yyVals[0+yyTop]);
	  }
  break;
case 157:
#line 1206 "cs-parser.jay"
  {
		current_field.AddDeclarator ((FieldDeclarator) yyVals[0+yyTop]);
	  }
  break;
case 158:
#line 1213 "cs-parser.jay"
  {
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];	  
		yyVal = new FieldDeclarator (new SimpleMemberName (lt.Value, lt.Location), (ConstInitializer) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]));
	  }
  break;
case 159:
#line 1222 "cs-parser.jay"
  {
		++lexer.parsing_block;
	  }
  break;
case 160:
#line 1226 "cs-parser.jay"
  {
		--lexer.parsing_block;
		yyVal = new ConstInitializer (current_field, (Expression) yyVals[-1+yyTop], GetLocation (yyVals[-3+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 161:
#line 1232 "cs-parser.jay"
  {
		Report.Error (443, lexer.Location, "Value or constant expected");
		yyVal = null;
	  }
  break;
case 162:
#line 1241 "cs-parser.jay"
  {
		variables_bucket.Clear ();
		if (yyVals[0+yyTop] != null)
			variables_bucket.Add (yyVals[0+yyTop]);
		yyVal = variables_bucket;
	  }
  break;
case 163:
#line 1248 "cs-parser.jay"
  {
		var decls = (List<object>) yyVals[-2+yyTop];
		decls.Add (yyVals[0+yyTop]);
		lbag.AppendTo (yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
		yyVal = yyVals[-2+yyTop];
	  }
  break;
case 164:
#line 1258 "cs-parser.jay"
  {
		yyVal = new VariableDeclaration ((Tokenizer.LocatedToken) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 165:
#line 1263 "cs-parser.jay"
  {
		yyVal = new VariableDeclaration ((Tokenizer.LocatedToken) yyVals[0+yyTop], null);
	  }
  break;
case 166:
#line 1267 "cs-parser.jay"
  {
		yyVal = null;
	  }
  break;
case 169:
#line 1276 "cs-parser.jay"
  {
		yyVal = new StackAlloc ((Expression) yyVals[-3+yyTop], (Expression) yyVals[-1+yyTop], GetLocation (yyVals[-4+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 170:
#line 1281 "cs-parser.jay"
  {
		yyVal = new ArglistAccess (GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 171:
#line 1285 "cs-parser.jay"
  {
		Report.Error (1575, GetLocation (yyVals[-1+yyTop]), "A stackalloc expression requires [] after type");
		yyVal = new StackAlloc ((Expression) yyVals[0+yyTop], null, GetLocation (yyVals[-1+yyTop]));		
	  }
  break;
case 172:
#line 1293 "cs-parser.jay"
  {
		Report.Error (650, GetLocation (yyVals[-2+yyTop]), "Syntax error, bad array declarator. To declare a managed array the rank specifier precedes the variable's identifier. " +
			"To declare a fixed size buffer field, use the fixed keyword before the field type");
	  }
  break;
case 175:
#line 1305 "cs-parser.jay"
  {
		if (RootContext.Documentation != null)
			Lexer.doc_state = XmlCommentState.NotAllowed;
	  }
  break;
case 176:
#line 1310 "cs-parser.jay"
  {
		Method method = (Method) yyVals[-2+yyTop];
		method.Block = (ToplevelBlock) yyVals[0+yyTop];
		current_container.AddMethod (method);
		
		if (current_container.Kind == MemberKind.Interface && method.Block != null) {
			Report.Error (531, method.Location, "`{0}': interface members cannot have a definition", method.GetSignatureForError ());
		}

		current_local_parameters = null;

		if (RootContext.Documentation != null)
			Lexer.doc_state = XmlCommentState.Allowed;
	  }
  break;
case 177:
#line 1331 "cs-parser.jay"
  {
		valid_param_mod = ParameterModifierType.All;
	  }
  break;
case 178:
#line 1335 "cs-parser.jay"
  {
		lexer.ConstraintsParsing = true;
	  }
  break;
case 179:
#line 1339 "cs-parser.jay"
  {
		lexer.ConstraintsParsing = false;
		valid_param_mod = 0;
		MemberName name = (MemberName) yyVals[-6+yyTop];
		current_local_parameters = (ParametersCompiled) yyVals[-3+yyTop];

		GenericMethod generic = null;
		if (name.TypeArguments != null) {
			generic = new GenericMethod (current_namespace, current_class, name,
						     (FullNamedExpression) yyVals[-7+yyTop], current_local_parameters);

			generic.SetParameterInfo ((List<Constraints>) yyVals[0+yyTop]);
		} else if (yyVals[0+yyTop] != null) {
			Report.Error (80, GetLocation (yyVals[0+yyTop]),
				"Constraints are not allowed on non-generic declarations");
		}

		Method method = new Method (current_class, generic, (FullNamedExpression) yyVals[-7+yyTop], (Modifiers) yyVals[-8+yyTop],
				     name, current_local_parameters, (Attributes) yyVals[-9+yyTop]);
				     
		if (yyVals[0+yyTop] != null && ((method.ModFlags & Modifiers.OVERRIDE) != 0 || method.IsExplicitImpl)) {
			Report.Error (460, method.Location,
				"`{0}': Cannot specify constraints for overrides and explicit interface implementation methods",
				method.GetSignatureForError ());
		}

		if (RootContext.Documentation != null)
			method.DocComment = Lexer.consume_doc_comment ();

		lbag.AddMember (method, mod_locations, GetLocation (yyVals[-5+yyTop]), GetLocation (yyVals[-2+yyTop]));
		yyVal = method;
	  }
  break;
case 180:
#line 1376 "cs-parser.jay"
  {
	  	valid_param_mod = ParameterModifierType.All;
	  }
  break;
case 181:
#line 1380 "cs-parser.jay"
  {
		lexer.ConstraintsParsing = true;
	  }
  break;
case 182:
#line 1384 "cs-parser.jay"
  {
		lexer.ConstraintsParsing = false;
		valid_param_mod = 0;

		MemberName name = (MemberName) yyVals[-6+yyTop];
		current_local_parameters = (ParametersCompiled) yyVals[-3+yyTop];

		if (yyVals[-1+yyTop] != null && name.TypeArguments == null)
			Report.Error (80, lexer.Location,
				      "Constraints are not allowed on non-generic declarations");

		Method method;
		GenericMethod generic = null;
		if (name.TypeArguments != null) {
			generic = new GenericMethod (current_namespace, current_class, name,
				new TypeExpression (TypeManager.void_type, GetLocation (yyVals[-7+yyTop])),
				current_local_parameters);

			generic.SetParameterInfo ((List<Constraints>) yyVals[0+yyTop]);
		}

		var modifiers = (Modifiers) yyVals[-9+yyTop];


		const Modifiers invalid_partial_mod = Modifiers.AccessibilityMask | Modifiers.ABSTRACT | Modifiers.EXTERN |
			Modifiers.NEW | Modifiers.OVERRIDE | Modifiers.SEALED | Modifiers.VIRTUAL;

		if ((modifiers & invalid_partial_mod) != 0) {
			Report.Error (750, name.Location, "A partial method cannot define access modifier or " +
       			"any of abstract, extern, new, override, sealed, or virtual modifiers");
			modifiers &= ~invalid_partial_mod;
		}

		if ((current_class.ModFlags & Modifiers.PARTIAL) == 0) {
			Report.Error (751, name.Location, "A partial method must be declared within a " +
       			"partial class or partial struct");
		}
		
		modifiers |= Modifiers.PARTIAL | Modifiers.PRIVATE;
		
		method = new Method (current_class, generic, new TypeExpression (TypeManager.void_type, GetLocation (yyVals[-7+yyTop])),
				     modifiers, name, current_local_parameters, (Attributes) yyVals[-10+yyTop]);

		if (RootContext.Documentation != null)
			method.DocComment = Lexer.consume_doc_comment ();

		/* TODO: lbag, push void*/
		StoreModifierLocation (Modifiers.PARTIAL, GetLocation (yyVals[-8+yyTop]));
		lbag.AddMember (method, mod_locations, GetLocation (yyVals[-5+yyTop]), GetLocation (yyVals[-2+yyTop]));
		yyVal = method;
	  }
  break;
case 183:
#line 1439 "cs-parser.jay"
  {
		MemberName name = (MemberName) yyVals[-3+yyTop];
		Report.Error (1585, name.Location, 
			"Member modifier `{0}' must precede the member type and name", ModifiersExtensions.Name ((Modifiers) yyVals[-4+yyTop]));

		Method method = new Method (current_class, null, (FullNamedExpression) yyVals[-5+yyTop],
					    0, name, (ParametersCompiled) yyVals[-1+yyTop], (Attributes) yyVals[-7+yyTop]);

		current_local_parameters = (ParametersCompiled) yyVals[-1+yyTop];

		if (RootContext.Documentation != null)
			method.DocComment = Lexer.consume_doc_comment ();

		yyVal = method;
	  }
  break;
case 185:
#line 1458 "cs-parser.jay"
  { yyVal = null; }
  break;
case 186:
#line 1462 "cs-parser.jay"
  { yyVal = ParametersCompiled.EmptyReadOnlyParameters; }
  break;
case 188:
#line 1468 "cs-parser.jay"
  { 
		var pars_list = (List<Parameter>) yyVals[0+yyTop];
	  	yyVal = new ParametersCompiled (compiler, pars_list.ToArray ());
	  }
  break;
case 189:
#line 1473 "cs-parser.jay"
  {
		var pars_list = (List<Parameter>) yyVals[-2+yyTop];
		pars_list.Add ((Parameter) yyVals[0+yyTop]);

		yyVal = new ParametersCompiled (compiler, pars_list.ToArray ()); 
	  }
  break;
case 190:
#line 1480 "cs-parser.jay"
  {
		var pars_list = (List<Parameter>) yyVals[-2+yyTop];
		pars_list.Add (new ArglistParameter (GetLocation (yyVals[0+yyTop])));
		yyVal = new ParametersCompiled (compiler, pars_list.ToArray (), true);
	  }
  break;
case 191:
#line 1486 "cs-parser.jay"
  {
		if (yyVals[-2+yyTop] != null)
			Report.Error (231, ((Parameter) yyVals[-2+yyTop]).Location, "A params parameter must be the last parameter in a formal parameter list");

		yyVal = new ParametersCompiled (compiler, new Parameter[] { (Parameter) yyVals[-2+yyTop] } );			
	  }
  break;
case 192:
#line 1493 "cs-parser.jay"
  {
		if (yyVals[-2+yyTop] != null)
			Report.Error (231, ((Parameter) yyVals[-2+yyTop]).Location, "A params parameter must be the last parameter in a formal parameter list");

		var pars_list = (List<Parameter>) yyVals[-4+yyTop];
		pars_list.Add (new ArglistParameter (GetLocation (yyVals[-2+yyTop])));

		yyVal = new ParametersCompiled (compiler, pars_list.ToArray (), true);
	  }
  break;
case 193:
#line 1503 "cs-parser.jay"
  {
		Report.Error (257, GetLocation (yyVals[-2+yyTop]), "An __arglist parameter must be the last parameter in a formal parameter list");

		yyVal = new ParametersCompiled (compiler, new Parameter [] { new ArglistParameter (GetLocation (yyVals[-2+yyTop])) }, true);
	  }
  break;
case 194:
#line 1509 "cs-parser.jay"
  {
		Report.Error (257, GetLocation (yyVals[-2+yyTop]), "An __arglist parameter must be the last parameter in a formal parameter list");

		var pars_list = (List<Parameter>) yyVals[-4+yyTop];
		pars_list.Add (new ArglistParameter (GetLocation (yyVals[-2+yyTop])));

		yyVal = new ParametersCompiled (compiler, pars_list.ToArray (), true);
	  }
  break;
case 195:
#line 1518 "cs-parser.jay"
  {
		yyVal = new ParametersCompiled (compiler, new Parameter[] { (Parameter) yyVals[0+yyTop] } );
	  }
  break;
case 196:
#line 1522 "cs-parser.jay"
  {
		yyVal = new ParametersCompiled (compiler, new Parameter [] { new ArglistParameter (GetLocation (yyVals[0+yyTop])) }, true);
	  }
  break;
case 197:
#line 1529 "cs-parser.jay"
  {
		parameters_bucket.Clear ();
		Parameter p = (Parameter) yyVals[0+yyTop];
		parameters_bucket.Add (p);
		
		default_parameter_used = p.HasDefaultValue;
		yyVal = parameters_bucket;
	  }
  break;
case 198:
#line 1538 "cs-parser.jay"
  {
		var pars = (List<Parameter>) yyVals[-2+yyTop];
		Parameter p = (Parameter) yyVals[0+yyTop];
		if (p != null) {
			if (p.HasExtensionMethodModifier)
				Report.Error (1100, p.Location, "The parameter modifier `this' can only be used on the first parameter");
			else if (!p.HasDefaultValue && default_parameter_used)
				Report.Error (1737, p.Location, "Optional parameter cannot precede required parameters");

			default_parameter_used |= p.HasDefaultValue;
			pars.Add (p);
			
			lbag.AddLocation (p, GetLocation (yyVals[-1+yyTop]));
		}
		
		yyVal = yyVals[-2+yyTop];
	  }
  break;
case 199:
#line 1562 "cs-parser.jay"
  {
		var lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];
		yyVal = new Parameter ((FullNamedExpression) yyVals[-1+yyTop], lt.Value, (Parameter.Modifier) yyVals[-2+yyTop], (Attributes) yyVals[-3+yyTop], lt.Location);
	  }
  break;
case 200:
#line 1570 "cs-parser.jay"
  {
		var lt = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
		Report.Error (1552, lt.Location, "Array type specifier, [], must appear before parameter name");
		yyVal = new Parameter ((FullNamedExpression) yyVals[-3+yyTop], lt.Value, (Parameter.Modifier) yyVals[-4+yyTop], (Attributes) yyVals[-5+yyTop], lt.Location);
	  }
  break;
case 201:
#line 1579 "cs-parser.jay"
  {
	  	Location l = GetLocation (yyVals[0+yyTop]);
		CheckIdentifierToken (yyToken, l);
		yyVal = new Parameter ((FullNamedExpression) yyVals[-1+yyTop], "NeedSomeGeneratorHere", (Parameter.Modifier) yyVals[-2+yyTop], (Attributes) yyVals[-3+yyTop], l);
	  }
  break;
case 202:
#line 1589 "cs-parser.jay"
  {
	  	++lexer.parsing_block;
	  }
  break;
case 203:
#line 1593 "cs-parser.jay"
  {
	  	--lexer.parsing_block;
		if (RootContext.Version <= LanguageVersion.V_3) {
			Report.FeatureIsNotAvailable (GetLocation (yyVals[-2+yyTop]), "optional parameter");
		}
		
		Parameter.Modifier mod = (Parameter.Modifier) yyVals[-5+yyTop];
		if (mod != Parameter.Modifier.NONE) {
			switch (mod) {
			case Parameter.Modifier.REF:
			case Parameter.Modifier.OUT:
				Report.Error (1741, GetLocation (yyVals[-5+yyTop]), "Cannot specify a default value for the `{0}' parameter",
					Parameter.GetModifierSignature (mod));
				break;
				
			case Parameter.Modifier.This:
				Report.Error (1743, GetLocation (yyVals[-5+yyTop]), "Cannot specify a default value for the `{0}' parameter",
					Parameter.GetModifierSignature (mod));
				break;
			default:
				throw new NotImplementedException (mod.ToString ());
			}
				
			mod = Parameter.Modifier.NONE;
		}
		
		if ((valid_param_mod & ParameterModifierType.DefaultValue) == 0)
			Report.Error (1065, GetLocation (yyVals[-2+yyTop]), "Optional parameter is not valid in this context");
		
		var lt = (Tokenizer.LocatedToken) yyVals[-3+yyTop];
		yyVal = new Parameter ((FullNamedExpression) yyVals[-4+yyTop], lt.Value, mod, (Attributes) yyVals[-6+yyTop], lt.Location);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]));
		
		if (yyVals[0+yyTop] != null)
			((Parameter) yyVal).DefaultValue = (Expression) yyVals[0+yyTop];
	  }
  break;
case 204:
#line 1632 "cs-parser.jay"
  { yyVal = Parameter.Modifier.NONE; }
  break;
case 206:
#line 1638 "cs-parser.jay"
  {
		yyVal = yyVals[0+yyTop];
	  }
  break;
case 207:
#line 1642 "cs-parser.jay"
  {
		Parameter.Modifier p2 = (Parameter.Modifier)yyVals[0+yyTop];
  		Parameter.Modifier mod = (Parameter.Modifier)yyVals[-1+yyTop] | p2;
  		if (((Parameter.Modifier)yyVals[-1+yyTop] & p2) == p2) {
  			Error_DuplicateParameterModifier (lexer.Location, p2);
  		} else {
	  		switch (mod & ~Parameter.Modifier.This) {
  				case Parameter.Modifier.REF:
					Report.Error (1101, lexer.Location, "The parameter modifiers `this' and `ref' cannot be used altogether");
  					break;
   				case Parameter.Modifier.OUT:
					Report.Error (1102, lexer.Location, "The parameter modifiers `this' and `out' cannot be used altogether");
  					break;
  				default:
 					Report.Error (1108, lexer.Location, "A parameter cannot have specified more than one modifier");
 					break;
 			}
  		}
  		yyVal = mod;
	  }
  break;
case 208:
#line 1666 "cs-parser.jay"
  {
	  	if ((valid_param_mod & ParameterModifierType.Ref) == 0)
	  		Error_ParameterModifierNotValid ("ref", GetLocation (yyVals[0+yyTop]));
	  		
	  	yyVal = Parameter.Modifier.REF;
	  }
  break;
case 209:
#line 1673 "cs-parser.jay"
  {
	  	if ((valid_param_mod & ParameterModifierType.Out) == 0)
	  		Error_ParameterModifierNotValid ("out", GetLocation (yyVals[0+yyTop]));
	  
	  	yyVal = Parameter.Modifier.OUT;
	  }
  break;
case 210:
#line 1680 "cs-parser.jay"
  {
		if ((valid_param_mod & ParameterModifierType.This) == 0)
	  		Error_ParameterModifierNotValid ("this", GetLocation (yyVals[0+yyTop]));

	  	if (RootContext.Version <= LanguageVersion.ISO_2)
	  		Report.FeatureIsNotAvailable (GetLocation (yyVals[0+yyTop]), "extension methods");
	  			
		yyVal = Parameter.Modifier.This;
	  }
  break;
case 211:
#line 1693 "cs-parser.jay"
  {
		var lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];
		yyVal = new ParamsParameter ((FullNamedExpression) yyVals[-1+yyTop], lt.Value, (Attributes) yyVals[-3+yyTop], lt.Location);
	  }
  break;
case 212:
#line 1698 "cs-parser.jay"
  {
		Report.Error (1751, GetLocation (yyVals[-4+yyTop]), "Cannot specify a default value for a parameter array");
		
		var lt = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
		yyVal = new ParamsParameter ((FullNamedExpression) yyVals[-3+yyTop], lt.Value, (Attributes) yyVals[-5+yyTop], lt.Location);		
	  }
  break;
case 213:
#line 1705 "cs-parser.jay"
  {
		CheckIdentifierToken (yyToken, GetLocation (yyVals[0+yyTop]));
		yyVal = null;
	  }
  break;
case 214:
#line 1713 "cs-parser.jay"
  {
		if ((valid_param_mod & ParameterModifierType.Params) == 0)
			Report.Error (1670, (GetLocation (yyVals[0+yyTop])), "The `params' modifier is not allowed in current context");
	  }
  break;
case 215:
#line 1718 "cs-parser.jay"
  {
		Parameter.Modifier mod = (Parameter.Modifier)yyVals[0+yyTop];
		if ((mod & Parameter.Modifier.This) != 0) {
			Report.Error (1104, GetLocation (yyVals[-1+yyTop]), "The parameter modifiers `this' and `params' cannot be used altogether");
		} else {
			Report.Error (1611, GetLocation (yyVals[-1+yyTop]), "The params parameter cannot be declared as ref or out");
		}	  
	  }
  break;
case 216:
#line 1727 "cs-parser.jay"
  {
		Error_DuplicateParameterModifier (GetLocation (yyVals[-1+yyTop]), Parameter.Modifier.PARAMS);
	  }
  break;
case 217:
#line 1734 "cs-parser.jay"
  {
	  	if ((valid_param_mod & ParameterModifierType.Arglist) == 0)
	  		Report.Error (1669, GetLocation (yyVals[0+yyTop]), "__arglist is not valid in this context");
	  }
  break;
case 218:
#line 1745 "cs-parser.jay"
  {
		if (RootContext.Documentation != null)
			tmpComment = Lexer.consume_doc_comment ();
	  }
  break;
case 219:
#line 1750 "cs-parser.jay"
  {
		current_property = new Property (current_class, (FullNamedExpression) yyVals[-3+yyTop], (Modifiers) yyVals[-4+yyTop],
			(MemberName) yyVals[-2+yyTop], (Attributes) yyVals[-5+yyTop]);
			
		if (current_property.TypeExpression.Type == TypeManager.void_type)
			Report.Error (547, GetLocation (yyVals[-3+yyTop]), "`{0}': property or indexer cannot have void type", current_property.GetSignatureForError ());					
			
		current_container.AddProperty ((Property)current_property);
		lbag.AddMember (current_property, mod_locations, GetLocation (yyVals[0+yyTop]));
		
		lexer.PropertyParsing = true;
	  }
  break;
case 220:
#line 1763 "cs-parser.jay"
  {
		lexer.PropertyParsing = false;
		
		if (RootContext.Documentation != null)
			current_property.DocComment = ConsumeStoredComment ();				
	  }
  break;
case 221:
#line 1770 "cs-parser.jay"
  {
		lbag.AppendToMember (current_property, GetLocation (yyVals[0+yyTop]));
		current_property = null;
	  }
  break;
case 222:
#line 1780 "cs-parser.jay"
  {
	  	valid_param_mod = ParameterModifierType.Params | ParameterModifierType.DefaultValue;
	  }
  break;
case 223:
#line 1784 "cs-parser.jay"
  {
		valid_param_mod = 0;
	  
		Indexer indexer = new Indexer (current_class, (FullNamedExpression) yyVals[-6+yyTop],
			(MemberName)yyVals[-5+yyTop], (Modifiers) yyVals[-7+yyTop], (ParametersCompiled) yyVals[-2+yyTop], (Attributes) yyVals[-8+yyTop]);
			
		current_property = indexer;

  		current_container.AddIndexer (indexer);
		lbag.AddMember (current_property, mod_locations, GetLocation (yyVals[-4+yyTop]), GetLocation (yyVals[-1+yyTop]), GetLocation (yyVals[0+yyTop]));
  		
		if (indexer.TypeExpression.Type == TypeManager.void_type)
			Report.Error (620, GetLocation (yyVals[-6+yyTop]), "`{0}': indexer return type cannot be `void'", indexer.GetSignatureForError ());  		

		if (indexer.Parameters.IsEmpty) {
			Report.Error (1551, GetLocation (yyVals[-4+yyTop]), "Indexers must have at least one parameter");
		}

		if (RootContext.Documentation != null) {
			tmpComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.Allowed;
		}

		lexer.PropertyParsing = true;
	  }
  break;
case 224:
#line 1810 "cs-parser.jay"
  {
		  lexer.PropertyParsing = false;
	  }
  break;
case 225:
#line 1814 "cs-parser.jay"
  { 
		if (RootContext.Documentation != null)
			current_property.DocComment = ConsumeStoredComment ();
			
		lbag.AppendToMember (current_property, GetLocation (yyVals[-1+yyTop]));
		current_property = null;		
	  }
  break;
case 230:
#line 1830 "cs-parser.jay"
  {
	  	if (yyToken == Token.CLOSE_BRACE) {
	  		Report.Error (548, lexer.Location, "`{0}': property or indexer must have at least one accessor", current_property.GetSignatureForError ());
		} else {
			if (yyToken == Token.SEMICOLON)
				Report.Error (1597, lexer.Location, "Semicolon after method or accessor block is not valid");
			else
				Report.Error (1014, GetLocation (yyVals[0+yyTop]), "A get or set accessor expected");
		}
	  }
  break;
case 231:
#line 1844 "cs-parser.jay"
  {
		if (yyVals[-1+yyTop] != ModifierNone && RootContext.Version == LanguageVersion.ISO_1) {
			Report.FeatureIsNotAvailable (GetLocation (yyVals[-1+yyTop]), "access modifiers on properties");
		}
	  
		if (current_property.Get != null) {
			Report.Error (1007, GetLocation (yyVals[0+yyTop]), "Property accessor already defined");
		}
		
		if (current_property is Indexer) {
			current_property.Get = new Indexer.GetIndexerMethod (current_property, (Modifiers) yyVals[-1+yyTop], ((Indexer)current_property).ParameterInfo.Clone (),
				(Attributes) yyVals[-2+yyTop], GetLocation (yyVals[0+yyTop]));
		} else {
			current_property.Get = new Property.GetMethod (current_property,
				(Modifiers) yyVals[-1+yyTop], (Attributes) yyVals[-2+yyTop], GetLocation (yyVals[0+yyTop]));
		}	
	  
		current_local_parameters = current_property.Get.ParameterInfo;	  
		lbag.AddMember (current_property.Get, mod_locations);
		lexer.PropertyParsing = false;
	  }
  break;
case 232:
#line 1866 "cs-parser.jay"
  {
	  	if (yyVals[0+yyTop] != null) {
	  		current_property.Get.Block = (ToplevelBlock) yyVals[0+yyTop];			
	  	
			if (current_container.Kind == MemberKind.Interface) {
				Report.Error (531, current_property.Get.Block.StartLocation,
					"`{0}': interface members cannot have a definition", current_property.Get.GetSignatureForError ());
			}		
		}
	  
		current_local_parameters = null;
		lexer.PropertyParsing = true;

		if (RootContext.Documentation != null)
			if (Lexer.doc_state == XmlCommentState.Error)
				Lexer.doc_state = XmlCommentState.NotAllowed;
	  }
  break;
case 233:
#line 1887 "cs-parser.jay"
  {
		if (yyVals[-1+yyTop] != ModifierNone && RootContext.Version == LanguageVersion.ISO_1) {
			Report.FeatureIsNotAvailable (GetLocation (yyVals[-1+yyTop]), "access modifiers on properties");
		}
		
		if (current_property.Set != null) {
			Report.Error (1007, GetLocation (yyVals[0+yyTop]), "Property accessor already defined");
		}
	  
		if (current_property is Indexer) {
			current_property.Set = new Indexer.SetIndexerMethod (current_property, (Modifiers) yyVals[-1+yyTop],
				ParametersCompiled.MergeGenerated (compiler,
				((Indexer)current_property).ParameterInfo, true, new Parameter (
					current_property.TypeExpression, "value", Parameter.Modifier.NONE, null, GetLocation (yyVals[0+yyTop])),
					null),
				(Attributes) yyVals[-2+yyTop], GetLocation (yyVals[0+yyTop]));
		} else {
			current_property.Set = new Property.SetMethod (current_property, (Modifiers) yyVals[-1+yyTop], 
				ParametersCompiled.CreateImplicitParameter (current_property.TypeExpression, GetLocation (yyVals[0+yyTop])),
				(Attributes) yyVals[-2+yyTop], GetLocation (yyVals[0+yyTop]));
		}
		
		current_local_parameters = current_property.Set.ParameterInfo;	
		lbag.AddMember (current_property.Set, mod_locations);
		lexer.PropertyParsing = false;
	  }
  break;
case 234:
#line 1914 "cs-parser.jay"
  {
		if (yyVals[0+yyTop] != null) {		
			current_property.Set.Block = (ToplevelBlock) yyVals[0+yyTop];
		
			if (current_container.Kind == MemberKind.Interface) {
				Report.Error (531, current_property.Set.Block.StartLocation,
					"`{0}': interface members cannot have a definition", current_property.Set.GetSignatureForError ());
			}
		}
		
		current_local_parameters = null;
		lexer.PropertyParsing = true;

		if (RootContext.Documentation != null
			&& Lexer.doc_state == XmlCommentState.Error)
			Lexer.doc_state = XmlCommentState.NotAllowed;
	  }
  break;
case 236:
#line 1936 "cs-parser.jay"
  {
		/* TODO: lbag*/
	  	yyVal = null;
	  }
  break;
case 237:
#line 1941 "cs-parser.jay"
  {
	  	Error_SyntaxError (1043, yyToken, "Invalid accessor body");
	  	yyVal = null;
	  }
  break;
case 238:
#line 1952 "cs-parser.jay"
  {
		lexer.ConstraintsParsing = true;
	  }
  break;
case 239:
#line 1956 "cs-parser.jay"
  {
		MemberName name = MakeName ((MemberName) yyVals[0+yyTop]);
		push_current_class (new Interface (current_namespace, current_class, name, (Modifiers) yyVals[-4+yyTop], (Attributes) yyVals[-5+yyTop]), yyVals[-3+yyTop]);
		lbag.AddMember (current_class, mod_locations, GetLocation (yyVals[-2+yyTop]));		
	  }
  break;
case 240:
#line 1963 "cs-parser.jay"
  {
		lexer.ConstraintsParsing = false;

		current_class.SetParameterInfo ((List<Constraints>) yyVals[0+yyTop]);

		if (RootContext.Documentation != null) {
			current_container.DocComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.Allowed;
		}
	  }
  break;
case 241:
#line 1974 "cs-parser.jay"
  {
		--lexer.parsing_declaration;	  
		if (RootContext.Documentation != null)
			Lexer.doc_state = XmlCommentState.Allowed;
	  }
  break;
case 242:
#line 1980 "cs-parser.jay"
  {
	    lbag.AppendToMember (current_class, GetLocation (yyVals[-4+yyTop]), GetLocation (yyVals[-2+yyTop]));
		yyVal = pop_current_class ();
	  }
  break;
case 243:
#line 1984 "cs-parser.jay"
  {
		CheckIdentifierToken (yyToken, GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 248:
#line 2001 "cs-parser.jay"
  {
		Report.Error (525, GetLocation (yyVals[0+yyTop]), "Interfaces cannot contain fields or constants");
	  }
  break;
case 249:
#line 2005 "cs-parser.jay"
  {
		Report.Error (525, GetLocation (yyVals[0+yyTop]), "Interfaces cannot contain fields or constants");
	  }
  break;
case 254:
#line 2013 "cs-parser.jay"
  {
	  	Report.Error (567, GetLocation (yyVals[0+yyTop]), "Interfaces cannot contain operators");
	  }
  break;
case 255:
#line 2017 "cs-parser.jay"
  {
	  	Report.Error (526, GetLocation (yyVals[0+yyTop]), "Interfaces cannot contain contructors");
	  }
  break;
case 256:
#line 2021 "cs-parser.jay"
  {
	  	Report.Error (524, GetLocation (yyVals[0+yyTop]), "Interfaces cannot declare classes, structs, interfaces, delegates, or enumerations");
	  }
  break;
case 257:
#line 2028 "cs-parser.jay"
  {
	  }
  break;
case 258:
#line 2031 "cs-parser.jay"
  {
		if (yyVals[-2+yyTop] == null)
			break;

		OperatorDeclaration decl = (OperatorDeclaration) yyVals[-2+yyTop];
		Operator op = new Operator (
			current_class, decl.optype, decl.ret_type, (Modifiers) yyVals[-3+yyTop], 
			current_local_parameters,
			(ToplevelBlock) yyVals[0+yyTop], (Attributes) yyVals[-4+yyTop], decl.location);

		if (RootContext.Documentation != null) {
			op.DocComment = tmpComment;
			Lexer.doc_state = XmlCommentState.Allowed;
		}

		/* Note again, checking is done in semantic analysis*/
		current_container.AddOperator (op);

		lbag.AddMember (op, mod_locations, lbag.GetLocations (decl));
		current_local_parameters = null;
	  }
  break;
case 260:
#line 2056 "cs-parser.jay"
  { yyVal = null; }
  break;
case 262:
#line 2062 "cs-parser.jay"
  {
		Report.Error (590, GetLocation (yyVals[0+yyTop]), "User-defined operators cannot return void");
		yyVal = new TypeExpression (TypeManager.void_type, GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 263:
#line 2070 "cs-parser.jay"
  {
		valid_param_mod = ParameterModifierType.DefaultValue;
	  }
  break;
case 264:
#line 2074 "cs-parser.jay"
  {
		valid_param_mod = 0;

		Location loc = GetLocation (yyVals[-5+yyTop]);
		Operator.OpType op = (Operator.OpType) yyVals[-4+yyTop];
		current_local_parameters = (ParametersCompiled)yyVals[-1+yyTop];
		
		int p_count = current_local_parameters.Count;
		if (p_count == 1) {
			if (op == Operator.OpType.Addition)
				op = Operator.OpType.UnaryPlus;
			else if (op == Operator.OpType.Subtraction)
				op = Operator.OpType.UnaryNegation;
		}
		
		if (IsUnaryOperator (op)) {
			if (p_count == 2) {
				Report.Error (1020, loc, "Overloadable binary operator expected");
			} else if (p_count != 1) {
				Report.Error (1535, loc, "Overloaded unary operator `{0}' takes one parameter",
					Operator.GetName (op));
			}
		} else {
			if (p_count > 2) {
				Report.Error (1534, loc, "Overloaded binary operator `{0}' takes two parameters",
					Operator.GetName (op));
			} else if (p_count != 2) {
				Report.Error (1019, loc, "Overloadable unary operator expected");
			}
		}
		
		if (RootContext.Documentation != null) {
			tmpComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.NotAllowed;
		}

		yyVal = new OperatorDeclaration (op, (FullNamedExpression) yyVals[-6+yyTop], loc);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-5+yyTop]), GetLocation (yyVals[-4+yyTop]), GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 266:
#line 2118 "cs-parser.jay"
  { yyVal = Operator.OpType.LogicalNot; }
  break;
case 267:
#line 2119 "cs-parser.jay"
  { yyVal = Operator.OpType.OnesComplement; }
  break;
case 268:
#line 2120 "cs-parser.jay"
  { yyVal = Operator.OpType.Increment; }
  break;
case 269:
#line 2121 "cs-parser.jay"
  { yyVal = Operator.OpType.Decrement; }
  break;
case 270:
#line 2122 "cs-parser.jay"
  { yyVal = Operator.OpType.True; }
  break;
case 271:
#line 2123 "cs-parser.jay"
  { yyVal = Operator.OpType.False; }
  break;
case 272:
#line 2125 "cs-parser.jay"
  { yyVal = Operator.OpType.Addition; }
  break;
case 273:
#line 2126 "cs-parser.jay"
  { yyVal = Operator.OpType.Subtraction; }
  break;
case 274:
#line 2128 "cs-parser.jay"
  { yyVal = Operator.OpType.Multiply; }
  break;
case 275:
#line 2129 "cs-parser.jay"
  {  yyVal = Operator.OpType.Division; }
  break;
case 276:
#line 2130 "cs-parser.jay"
  { yyVal = Operator.OpType.Modulus; }
  break;
case 277:
#line 2131 "cs-parser.jay"
  { yyVal = Operator.OpType.BitwiseAnd; }
  break;
case 278:
#line 2132 "cs-parser.jay"
  { yyVal = Operator.OpType.BitwiseOr; }
  break;
case 279:
#line 2133 "cs-parser.jay"
  { yyVal = Operator.OpType.ExclusiveOr; }
  break;
case 280:
#line 2134 "cs-parser.jay"
  { yyVal = Operator.OpType.LeftShift; }
  break;
case 281:
#line 2135 "cs-parser.jay"
  { yyVal = Operator.OpType.RightShift; }
  break;
case 282:
#line 2136 "cs-parser.jay"
  { yyVal = Operator.OpType.Equality; }
  break;
case 283:
#line 2137 "cs-parser.jay"
  { yyVal = Operator.OpType.Inequality; }
  break;
case 284:
#line 2138 "cs-parser.jay"
  { yyVal = Operator.OpType.GreaterThan; }
  break;
case 285:
#line 2139 "cs-parser.jay"
  { yyVal = Operator.OpType.LessThan; }
  break;
case 286:
#line 2140 "cs-parser.jay"
  { yyVal = Operator.OpType.GreaterThanOrEqual; }
  break;
case 287:
#line 2141 "cs-parser.jay"
  { yyVal = Operator.OpType.LessThanOrEqual; }
  break;
case 288:
#line 2146 "cs-parser.jay"
  {
		valid_param_mod = ParameterModifierType.DefaultValue;
	  }
  break;
case 289:
#line 2150 "cs-parser.jay"
  {
		valid_param_mod = 0;

		Location loc = GetLocation (yyVals[-5+yyTop]);
		current_local_parameters = (ParametersCompiled)yyVals[-1+yyTop];  
		  
		if (RootContext.Documentation != null) {
			tmpComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.NotAllowed;
		}

		yyVal = new OperatorDeclaration (Operator.OpType.Implicit, (FullNamedExpression) yyVals[-4+yyTop], loc);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-6+yyTop]), GetLocation (yyVals[-5+yyTop]), GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 290:
#line 2165 "cs-parser.jay"
  {
		valid_param_mod = ParameterModifierType.DefaultValue;
	  }
  break;
case 291:
#line 2169 "cs-parser.jay"
  {
		valid_param_mod = 0;
		
		Location loc = GetLocation (yyVals[-5+yyTop]);
		current_local_parameters = (ParametersCompiled)yyVals[-1+yyTop];  
		  
		if (RootContext.Documentation != null) {
			tmpComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.NotAllowed;
		}

		yyVal = new OperatorDeclaration (Operator.OpType.Explicit, (FullNamedExpression) yyVals[-4+yyTop], loc);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-6+yyTop]), GetLocation (yyVals[-5+yyTop]), GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 292:
#line 2184 "cs-parser.jay"
  {
	  	Error_SyntaxError (yyToken);
		current_local_parameters = ParametersCompiled.EmptyReadOnlyParameters;
		yyVal = new OperatorDeclaration (Operator.OpType.Implicit, null, GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 293:
#line 2190 "cs-parser.jay"
  {
	  	Error_SyntaxError (yyToken);
		current_local_parameters = ParametersCompiled.EmptyReadOnlyParameters;
	  	yyVal = new OperatorDeclaration (Operator.OpType.Explicit, null, GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 294:
#line 2200 "cs-parser.jay"
  { 
		Constructor c = (Constructor) yyVals[-1+yyTop];
		c.Block = (ToplevelBlock) yyVals[0+yyTop];
		
		if (RootContext.Documentation != null)
			c.DocComment = ConsumeStoredComment ();

		current_container.AddConstructor (c);

		current_local_parameters = null;
		if (RootContext.Documentation != null)
			Lexer.doc_state = XmlCommentState.Allowed;
	  }
  break;
case 295:
#line 2219 "cs-parser.jay"
  {
		if (RootContext.Documentation != null) {
			tmpComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.Allowed;
		}
		
		valid_param_mod = ParameterModifierType.All;
	  }
  break;
case 296:
#line 2228 "cs-parser.jay"
  {
		valid_param_mod = 0;
		current_local_parameters = (ParametersCompiled) yyVals[-1+yyTop];  
		
		/**/
		/* start block here, so possible anonymous methods inside*/
		/* constructor initializer can get correct parent block*/
		/**/
	  	start_block (lexer.Location);
	  }
  break;
case 297:
#line 2239 "cs-parser.jay"
  {
		var lt = (Tokenizer.LocatedToken) yyVals[-6+yyTop];
		var mods = (Modifiers) yyVals[-7+yyTop];
		ConstructorInitializer ci = (ConstructorInitializer) yyVals[0+yyTop];

		Constructor c = new Constructor (current_class, lt.Value, mods,
			(Attributes) yyVals[-8+yyTop], current_local_parameters, ci, lt.Location);
		
		if (lt.Value != current_container.MemberName.Name) {
			Report.Error (1520, c.Location, "Class, struct, or interface method must have a return type");
		} else if ((mods & Modifiers.STATIC) != 0) {
			if ((mods & Modifiers.AccessibilityMask) != 0){
				Report.Error (515, c.Location,
					"`{0}': static constructor cannot have an access modifier",
					c.GetSignatureForError ());
			}
			if (ci != null) {
				Report.Error (514, c.Location,
					"`{0}': static constructor cannot have an explicit `this' or `base' constructor call",
					c.GetSignatureForError ());
			
			}
		}
		
		lbag.AddMember (c, mod_locations, GetLocation (yyVals[-4+yyTop]), GetLocation (yyVals[-2+yyTop]));
		yyVal = c;
	  }
  break;
case 299:
#line 2270 "cs-parser.jay"
  { current_block = null; yyVal = null; }
  break;
case 302:
#line 2280 "cs-parser.jay"
  {
		++lexer.parsing_block;
	  }
  break;
case 303:
#line 2284 "cs-parser.jay"
  {
	  	--lexer.parsing_block;
		yyVal = new ConstructorBaseInitializer ((Arguments) yyVals[-1+yyTop], GetLocation (yyVals[-4+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-5+yyTop]), GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 304:
#line 2290 "cs-parser.jay"
  {
		++lexer.parsing_block;
	  }
  break;
case 305:
#line 2294 "cs-parser.jay"
  {
	  	--lexer.parsing_block;
		yyVal = new ConstructorThisInitializer ((Arguments) yyVals[-1+yyTop], GetLocation (yyVals[-4+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-5+yyTop]), GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 306:
#line 2299 "cs-parser.jay"
  {
		Report.Error (1018, GetLocation (yyVals[-1+yyTop]), "Keyword `this' or `base' expected");
		yyVal = null;
	  }
  break;
case 307:
#line 2307 "cs-parser.jay"
  {
		if (RootContext.Documentation != null) {
			tmpComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.NotAllowed;
		}
		
		current_local_parameters = ParametersCompiled.EmptyReadOnlyParameters;
	  }
  break;
case 308:
#line 2316 "cs-parser.jay"
  {
		var lt = (Tokenizer.LocatedToken) yyVals[-3+yyTop];
		if (lt.Value != current_container.MemberName.Name){
			Report.Error (574, lt.Location, "Name of destructor must match name of class");
		} else if (current_container.Kind != MemberKind.Class){
			Report.Error (575, lt.Location, "Only class types can contain destructor");
		}
		
		Destructor d = new Destructor (current_class, (Modifiers) yyVals[-6+yyTop],
			ParametersCompiled.EmptyReadOnlyParameters, (Attributes) yyVals[-7+yyTop], lt.Location);
		if (RootContext.Documentation != null)
			d.DocComment = ConsumeStoredComment ();
		  
		d.Block = (ToplevelBlock) yyVals[0+yyTop];
		current_container.AddMethod (d);
		lbag.AddMember (d, mod_locations, GetLocation (yyVals[-5+yyTop]), GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[-1+yyTop]));

		current_local_parameters = null;
	  }
  break;
case 309:
#line 2341 "cs-parser.jay"
  {
		current_event_field = new EventField (current_class, (FullNamedExpression) yyVals[-1+yyTop], (Modifiers) yyVals[-3+yyTop], (MemberName) yyVals[0+yyTop], (Attributes) yyVals[-4+yyTop]);
		current_container.AddEvent (current_event_field);
		
		if (current_event_field.MemberName.Left != null) {
			Report.Error (71, current_event_field.Location, "`{0}': An explicit interface implementation of an event must use property syntax",
			current_event_field.GetSignatureForError ());
		}
		
		yyVal = current_event_field;
	  }
  break;
case 310:
#line 2355 "cs-parser.jay"
  {
		if (RootContext.Documentation != null) {
			current_event_field.DocComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.Allowed;
		}
		
		lbag.AddMember (current_event_field, mod_locations, GetLocation (yyVals[-6+yyTop]), GetLocation (yyVals[0+yyTop]));
		current_event_field = null;
	  }
  break;
case 311:
#line 2368 "cs-parser.jay"
  {
		current_event = new EventProperty (current_class, (FullNamedExpression) yyVals[-2+yyTop], (Modifiers) yyVals[-4+yyTop], (MemberName) yyVals[-1+yyTop], (Attributes) yyVals[-5+yyTop]);
		current_container.AddEvent (current_event);
		lbag.AddMember (current_event, mod_locations, GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[0+yyTop]));
		
		lexer.EventParsing = true;
	  }
  break;
case 312:
#line 2376 "cs-parser.jay"
  {
		if (current_container.Kind == MemberKind.Interface)
			Report.Error (69, GetLocation (yyVals[-2+yyTop]), "Event in interface cannot have add or remove accessors");
	  
		lexer.EventParsing = false;
	  }
  break;
case 313:
#line 2383 "cs-parser.jay"
  {
		if (RootContext.Documentation != null) {
			current_event.DocComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.Allowed;
		}
		
		lbag.AppendToMember (current_event, GetLocation (yyVals[-1+yyTop]));
	  	current_event = null;	
		current_local_parameters = null;
	  }
  break;
case 315:
#line 2398 "cs-parser.jay"
  {
	  	++lexer.parsing_block;
	  }
  break;
case 316:
#line 2402 "cs-parser.jay"
  {
	  	--lexer.parsing_block;
		current_event_field.Initializer = (Expression) yyVals[0+yyTop];
	  }
  break;
case 319:
#line 2415 "cs-parser.jay"
  {
		current_event_field.AddDeclarator ((FieldDeclarator) yyVals[0+yyTop]);
	  }
  break;
case 320:
#line 2419 "cs-parser.jay"
  {
		current_event_field.AddDeclarator ((FieldDeclarator) yyVals[0+yyTop]);
	  }
  break;
case 321:
#line 2426 "cs-parser.jay"
  {
		var lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];
	  	yyVal = new FieldDeclarator (new SimpleMemberName (lt.Value, lt.Location), null);
	  	lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 322:
#line 2432 "cs-parser.jay"
  {
		++lexer.parsing_block;
	  }
  break;
case 323:
#line 2436 "cs-parser.jay"
  {
		--lexer.parsing_block;
		var lt = (Tokenizer.LocatedToken) yyVals[-3+yyTop];	  
	  	yyVal = new FieldDeclarator (new SimpleMemberName (lt.Value, lt.Location), (Expression) yyVals[0+yyTop]);
	  	lbag.AddLocation (yyVal, GetLocation (yyVals[-4+yyTop]), GetLocation (yyVals[-2+yyTop]));
	  }
  break;
case 324:
#line 2445 "cs-parser.jay"
  {
		if (current_container.Kind == MemberKind.Interface) {
			Report.Error (68, lexer.Location, "`{0}': event in interface cannot have an initializer",
				current_event_field.GetSignatureForError ());
		}
		
	  	if ((current_event_field.ModFlags & Modifiers.ABSTRACT) != 0) {
			Report.Error (74, lexer.Location, "`{0}': abstract event cannot have an initializer",
				current_event_field.GetSignatureForError ());
	  	}		
	  }
  break;
case 325:
#line 2457 "cs-parser.jay"
  {
		yyVal = yyVals[0+yyTop];
	  }
  break;
case 328:
#line 2466 "cs-parser.jay"
  {
		Report.Error (65, lexer.Location, "`{0}': event property must have both add and remove accessors",
			current_event.GetSignatureForError ());
	  }
  break;
case 329:
#line 2471 "cs-parser.jay"
  {
		Report.Error (65, lexer.Location, "`{0}': event property must have both add and remove accessors",
			current_event.GetSignatureForError ());
	  }
  break;
case 330:
#line 2476 "cs-parser.jay"
  { 
		Report.Error (1055, GetLocation (yyVals[0+yyTop]), "An add or remove accessor expected");
		yyVal = null;
	  }
  break;
case 331:
#line 2484 "cs-parser.jay"
  {
	  	if (yyVals[-1+yyTop] != ModifierNone) {
			Report.Error (1609, GetLocation (yyVals[-1+yyTop]), "Modifiers cannot be placed on event accessor declarations");
	  	}
	  	
	  	current_event.Add = new EventProperty.AddDelegateMethod (current_event, (Attributes) yyVals[-2+yyTop], GetLocation (yyVals[0+yyTop]));
		current_local_parameters = current_event.Add.ParameterInfo;
		
		lbag.AddMember (current_event.Add, mod_locations);
		lexer.EventParsing = false;		
	  }
  break;
case 332:
#line 2496 "cs-parser.jay"
  {
		lexer.EventParsing = true;
	  
	  	current_event.Add.Block = (ToplevelBlock) yyVals[0+yyTop];
		
		if (current_container.Kind == MemberKind.Interface) {
			Report.Error (531, current_event.Add.Block.StartLocation,
				"`{0}': interface members cannot have a definition", current_event.Add.GetSignatureForError ());
		}
		
		current_local_parameters = null;
	  }
  break;
case 333:
#line 2512 "cs-parser.jay"
  {
	  	if (yyVals[-1+yyTop] != ModifierNone) {
			Report.Error (1609, GetLocation (yyVals[-1+yyTop]), "Modifiers cannot be placed on event accessor declarations");
	  	}
	  	
	  	current_event.Remove = new EventProperty.RemoveDelegateMethod (current_event, (Attributes) yyVals[-2+yyTop], GetLocation (yyVals[0+yyTop]));
		current_local_parameters = current_event.Remove.ParameterInfo;

		lbag.AddMember (current_event.Remove, mod_locations);
		lexer.EventParsing = false;		
	  }
  break;
case 334:
#line 2524 "cs-parser.jay"
  {
		lexer.EventParsing = true;
	  
	  	current_event.Remove.Block = (ToplevelBlock) yyVals[0+yyTop];
		
		if (current_container.Kind == MemberKind.Interface) {
			Report.Error (531, current_event.Remove.Block.StartLocation,
				"`{0}': interface members cannot have a definition", current_event.Remove.GetSignatureForError ());
		}
		
		current_local_parameters = null;
	  }
  break;
case 335:
#line 2540 "cs-parser.jay"
  {
		Report.Error (73, lexer.Location, "An add or remove accessor must have a body");
		yyVal = null;
	  }
  break;
case 337:
#line 2552 "cs-parser.jay"
  {
		if (RootContext.Documentation != null)
			enumTypeComment = Lexer.consume_doc_comment ();
	  }
  break;
case 338:
#line 2557 "cs-parser.jay"
  {
		if (RootContext.Documentation != null)
			Lexer.doc_state = XmlCommentState.Allowed;

		MemberName name = (MemberName) yyVals[-3+yyTop];
		if (name.IsGeneric) {
			Report.Error (1675, name.Location, "Enums cannot have type parameters");
		}
		
		push_current_class (new Enum (current_namespace, current_class, (TypeExpression) yyVals[-2+yyTop], (Modifiers) yyVals[-5+yyTop], MakeName (name), (Attributes) yyVals[-6+yyTop]), null);
	  }
  break;
case 339:
#line 2569 "cs-parser.jay"
  {
	  	/* here will be evaluated after CLOSE_BLACE is consumed.*/
		if (RootContext.Documentation != null)
			Lexer.doc_state = XmlCommentState.Allowed;
	  }
  break;
case 340:
#line 2575 "cs-parser.jay"
  {
		if (RootContext.Documentation != null)
			current_class.DocComment = enumTypeComment;
			
		--lexer.parsing_declaration;

/*			if (RootContext.Documentation != null)*/
/*				em.DocComment = ev.DocComment;*/

		lbag.AddMember (current_class, mod_locations, GetLocation (yyVals[-9+yyTop]), GetLocation (yyVals[-5+yyTop]), GetLocation (yyVals[-1+yyTop]));
		yyVal = pop_current_class ();
	  }
  break;
case 342:
#line 2592 "cs-parser.jay"
  {
	 	var te = yyVals[0+yyTop] as TypeExpression;
		if (te == null ||
			(te.Type != TypeManager.int32_type && te.Type != TypeManager.uint32_type &&
			te.Type != TypeManager.int64_type && te.Type != TypeManager.uint64_type &&
			te.Type != TypeManager.short_type && te.Type != TypeManager.ushort_type &&
			te.Type != TypeManager.byte_type && te.Type != TypeManager.sbyte_type)) {
			Enum.Error_1008 (GetLocation (yyVals[0+yyTop]), Report);
			yyVal = null;
		} else {
			yyVal = yyVals[0+yyTop];
		}
	 }
  break;
case 343:
#line 2606 "cs-parser.jay"
  {
	 	Error_TypeExpected (GetLocation (yyVals[-1+yyTop]));
		yyVal = null;
	 }
  break;
case 346:
#line 2616 "cs-parser.jay"
  {
	  	lbag.AddLocation (yyVals[-1+yyTop], GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 348:
#line 2624 "cs-parser.jay"
  {
	  	lbag.AddLocation (yyVals[-2+yyTop], GetLocation (yyVals[-1+yyTop]));
	  	yyVal = yyVals[0+yyTop];
	  }
  break;
case 349:
#line 2632 "cs-parser.jay"
  {
		var lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];
	  	var em = new EnumMember ((Enum) current_class, new MemberName (lt.Value, lt.Location), (Attributes) yyVals[-1+yyTop]);
	  	((Enum) current_class).AddEnumMember (em);

		if (RootContext.Documentation != null) {
			em.DocComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.Allowed;
		}

		yyVal = em;
	  }
  break;
case 350:
#line 2645 "cs-parser.jay"
  {
	  	++lexer.parsing_block;
		if (RootContext.Documentation != null) {
			tmpComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.NotAllowed;
		}
	  }
  break;
case 351:
#line 2653 "cs-parser.jay"
  { 
		--lexer.parsing_block;
		
		var lt = (Tokenizer.LocatedToken) yyVals[-3+yyTop];
	  	var em = new EnumMember ((Enum) current_class, new MemberName (lt.Value, lt.Location), (Attributes) yyVals[-4+yyTop]);
	  	em.Initializer = new ConstInitializer (em, (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  	((Enum) current_class).AddEnumMember (em);
		
		if (RootContext.Documentation != null)
			em.DocComment = ConsumeStoredComment ();

		yyVal = em;
	  }
  break;
case 352:
#line 2674 "cs-parser.jay"
  {
		valid_param_mod = ParameterModifierType.Ref | ParameterModifierType.Out | ParameterModifierType.Params | ParameterModifierType.DefaultValue;
	  }
  break;
case 353:
#line 2678 "cs-parser.jay"
  {
		valid_param_mod = 0;

		MemberName name = MakeName ((MemberName) yyVals[-4+yyTop]);
		ParametersCompiled p = (ParametersCompiled) yyVals[-1+yyTop];

		Delegate del = new Delegate (current_namespace, current_class, (FullNamedExpression) yyVals[-5+yyTop],
					     (Modifiers) yyVals[-7+yyTop], name, p, (Attributes) yyVals[-8+yyTop]);

		if (RootContext.Documentation != null) {
			del.DocComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.Allowed;
		}

		current_container.AddDelegate (del);
		current_delegate = del;
		lexer.ConstraintsParsing = true;
	  }
  break;
case 354:
#line 2697 "cs-parser.jay"
  {
		lexer.ConstraintsParsing = false;
	  }
  break;
case 355:
#line 2701 "cs-parser.jay"
  {
		current_delegate.SetParameterInfo ((List<Constraints>) yyVals[-2+yyTop]);
		lbag.AddMember (current_delegate, mod_locations, GetLocation (yyVals[-10+yyTop]), GetLocation (yyVals[-7+yyTop]), GetLocation (yyVals[-4+yyTop]), GetLocation (yyVals[0+yyTop]));

		yyVal = current_delegate;

		current_delegate = null;
	  }
  break;
case 356:
#line 2713 "cs-parser.jay"
  {
		yyVal = null;
	  }
  break;
case 357:
#line 2717 "cs-parser.jay"
  {
		if (RootContext.MetadataCompatibilityVersion < MetadataVersion.v2)	  
	  		Report.FeatureIsNotSupported (GetLocation (yyVals[0+yyTop]), "nullable types");
		else if (RootContext.Version < LanguageVersion.ISO_2)
			Report.FeatureIsNotAvailable (GetLocation (yyVals[0+yyTop]), "nullable types");
	  
	  	yyVal = ComposedTypeSpecifier.CreateNullable (GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 359:
#line 2730 "cs-parser.jay"
  {
		var lt1 = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
		var lt2 = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
		
		yyVal = new MemberName (lt1.Value, lt2.Value, (TypeArguments) yyVals[0+yyTop], lt1.Location);
	  }
  break;
case 361:
#line 2741 "cs-parser.jay"
  {
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
		yyVal = new MemberName ((MemberName) yyVals[-3+yyTop], lt.Value, (TypeArguments) yyVals[0+yyTop], lt.Location);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]));		
	  }
  break;
case 362:
#line 2750 "cs-parser.jay"
  {
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
		yyVal = new MemberName (lt.Value, (TypeArguments)yyVals[0+yyTop], lt.Location);	  
	  }
  break;
case 363:
#line 2760 "cs-parser.jay"
  { yyVal = null; }
  break;
case 364:
#line 2762 "cs-parser.jay"
  {
		if (RootContext.MetadataCompatibilityVersion < MetadataVersion.v2)	  
	  		Report.FeatureIsNotSupported (GetLocation (yyVals[-2+yyTop]), "generics");
		else if (RootContext.Version < LanguageVersion.ISO_2)
			Report.FeatureIsNotAvailable (GetLocation (yyVals[-2+yyTop]), "generics");	  
	  
		yyVal = yyVals[-1+yyTop];
	  }
  break;
case 365:
#line 2771 "cs-parser.jay"
  {
		Error_TypeExpected (lexer.Location);
		yyVal = new TypeArguments ();
	  }
  break;
case 366:
#line 2779 "cs-parser.jay"
  {
		TypeArguments type_args = new TypeArguments ();
		type_args.Add ((FullNamedExpression) yyVals[0+yyTop]);
		yyVal = type_args;
	  }
  break;
case 367:
#line 2785 "cs-parser.jay"
  {
		TypeArguments type_args = (TypeArguments) yyVals[-2+yyTop];
		type_args.Add ((FullNamedExpression) yyVals[0+yyTop]);
		yyVal = type_args;
	  }
  break;
case 368:
#line 2797 "cs-parser.jay"
  {
		lexer.parsing_generic_declaration = true;
	  }
  break;
case 369:
#line 2801 "cs-parser.jay"
  {
		lexer.parsing_generic_declaration = false;
		var lt = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
		yyVal = new MemberName (lt.Value, (TypeArguments)yyVals[0+yyTop], lt.Location);	  
	  }
  break;
case 370:
#line 2810 "cs-parser.jay"
  {
	  	MemberName mn = (MemberName)yyVals[0+yyTop];
	  	if (mn.TypeArguments != null)
	  		syntax_error (mn.Location, string.Format ("Member `{0}' cannot declare type arguments",
	  			mn.GetSignatureForError ()));
	  }
  break;
case 372:
#line 2821 "cs-parser.jay"
  {
		lexer.parsing_generic_declaration = false;	  
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
		yyVal = new MemberName ((MemberName) yyVals[-2+yyTop], lt.Value, (TypeArguments) yyVals[0+yyTop], lt.Location);
	  }
  break;
case 373:
#line 2830 "cs-parser.jay"
  {
		lexer.parsing_generic_declaration = false;	  
		yyVal = new MemberName (TypeContainer.DefaultIndexerName, GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 374:
#line 2835 "cs-parser.jay"
  {
		lexer.parsing_generic_declaration = false;
		yyVal = new MemberName ((MemberName) yyVals[-1+yyTop], TypeContainer.DefaultIndexerName, null, GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 375:
#line 2843 "cs-parser.jay"
  {
		var lt = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
		yyVal = new MemberName (lt.Value, (TypeArguments) yyVals[-1+yyTop], lt.Location);
		lbag.AddLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 376:
#line 2849 "cs-parser.jay"
  {
		var lt1 = (Tokenizer.LocatedToken) yyVals[-3+yyTop];
		var lt2 = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
		
		yyVal = new MemberName (lt1.Value, lt2.Value, (TypeArguments) yyVals[-1+yyTop], lt1.Location);
		lbag.AddLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 377:
#line 2857 "cs-parser.jay"
  {
		var lt = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
		yyVal = new MemberName ((MemberName) yyVals[-3+yyTop], lt.Value, (TypeArguments) yyVals[-1+yyTop], lt.Location);
		lbag.AddLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 378:
#line 2865 "cs-parser.jay"
  { yyVal = null; }
  break;
case 379:
#line 2867 "cs-parser.jay"
  {
		if (RootContext.MetadataCompatibilityVersion < MetadataVersion.v2)	  
	  		Report.FeatureIsNotSupported (GetLocation (yyVals[-2+yyTop]), "generics");
		else if (RootContext.Version < LanguageVersion.ISO_2)
			Report.FeatureIsNotAvailable (GetLocation (yyVals[-2+yyTop]), "generics");
	  
		yyVal = yyVals[-1+yyTop];
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 380:
#line 2880 "cs-parser.jay"
  {
		TypeArguments type_args = new TypeArguments ();
		type_args.Add ((FullNamedExpression)yyVals[0+yyTop]);
		yyVal = type_args;
	  }
  break;
case 381:
#line 2886 "cs-parser.jay"
  {
		TypeArguments type_args = (TypeArguments) yyVals[-2+yyTop];
		type_args.Add ((FullNamedExpression)yyVals[0+yyTop]);
		yyVal = type_args;
		lbag.AddLocation (yyVals[0+yyTop], GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 382:
#line 2896 "cs-parser.jay"
  {
		var lt = (Tokenizer.LocatedToken)yyVals[0+yyTop];
		yyVal = new TypeParameterName (lt.Value, (Attributes)yyVals[-2+yyTop], (Variance) yyVals[-1+yyTop], lt.Location);
  	  }
  break;
case 383:
#line 2901 "cs-parser.jay"
  {
  	  	if (GetTokenName (yyToken) == "type")
			Report.Error (81, GetLocation (yyVals[0+yyTop]), "Type parameter declaration must be an identifier not a type");
		else
			Error_SyntaxError (yyToken);
			
  	  	yyVal = new TypeParameterName ("", null, lexer.Location);
  	  }
  break;
case 385:
#line 2917 "cs-parser.jay"
  {
		yyVal = new TypeExpression (TypeManager.void_type, GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 386:
#line 2924 "cs-parser.jay"
  {
		lexer.parsing_generic_declaration = true;
	  }
  break;
case 388:
#line 2935 "cs-parser.jay"
  {
	  	Expression.Error_VoidInvalidInTheContext (GetLocation (yyVals[0+yyTop]), Report);
		yyVal = new TypeExpression (TypeManager.void_type, GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 390:
#line 2944 "cs-parser.jay"
  {
	  	Expression.Error_VoidInvalidInTheContext (GetLocation (yyVals[0+yyTop]), Report);
		yyVal = new TypeExpression (TypeManager.void_type, GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 392:
#line 2953 "cs-parser.jay"
  {
	  	Report.Error (1536, GetLocation (yyVals[0+yyTop]), "Invalid parameter type `void'");
		yyVal = new TypeExpression (TypeManager.void_type, GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 394:
#line 2962 "cs-parser.jay"
  {
		yyVal = new ComposedCast ((FullNamedExpression) yyVals[-1+yyTop], (ComposedTypeSpecifier) yyVals[0+yyTop]);
	  }
  break;
case 395:
#line 2969 "cs-parser.jay"
  {
		MemberName name = (MemberName) yyVals[-1+yyTop];

		if (yyVals[0+yyTop] != null) {
			yyVal = new ComposedCast (name.GetTypeExpression (), (ComposedTypeSpecifier) yyVals[0+yyTop]);
		} else {
			if (name.Left == null && name.Name == "var")
				yyVal = new VarExpr (name.Location);
			else
				yyVal = name.GetTypeExpression ();
		}
	  }
  break;
case 396:
#line 2982 "cs-parser.jay"
  {
		if (yyVals[0+yyTop] != null)
			yyVal = new ComposedCast ((FullNamedExpression) yyVals[-1+yyTop], (ComposedTypeSpecifier) yyVals[0+yyTop]);
	  }
  break;
case 397:
#line 2987 "cs-parser.jay"
  {
		/**/
		/* Note that here only unmanaged types are allowed but we*/
		/* can't perform checks during this phase - we do it during*/
		/* semantic analysis.*/
		/**/
		yyVal = new ComposedCast ((FullNamedExpression) yyVals[-1+yyTop], ComposedTypeSpecifier.CreatePointer (GetLocation (yyVals[0+yyTop])));
	  }
  break;
case 398:
#line 2996 "cs-parser.jay"
  {
		yyVal = new ComposedCast (new TypeExpression (TypeManager.void_type, GetLocation (yyVals[-1+yyTop])), ComposedTypeSpecifier.CreatePointer (GetLocation (yyVals[0+yyTop])));
	  }
  break;
case 399:
#line 3003 "cs-parser.jay"
  {
		var types = new List<FullNamedExpression> (2);
		types.Add ((FullNamedExpression) yyVals[0+yyTop]);
		yyVal = types;
	  }
  break;
case 400:
#line 3009 "cs-parser.jay"
  {
		var types = (List<FullNamedExpression>) yyVals[-2+yyTop];
		types.Add ((FullNamedExpression) yyVals[0+yyTop]);
		yyVal = types;
	  }
  break;
case 401:
#line 3018 "cs-parser.jay"
  {
		if (yyVals[0+yyTop] is ComposedCast) {
			Report.Error (1521, GetLocation (yyVals[0+yyTop]), "Invalid base type `{0}'", ((ComposedCast)yyVals[0+yyTop]).GetSignatureForError ());
		}
		yyVal = yyVals[0+yyTop];
	  }
  break;
case 402:
#line 3025 "cs-parser.jay"
  {
	  	Error_TypeExpected (lexer.Location);
		yyVal = null;
	  }
  break;
case 403:
#line 3036 "cs-parser.jay"
  { yyVal = new TypeExpression (TypeManager.object_type, GetLocation (yyVals[0+yyTop])); }
  break;
case 404:
#line 3037 "cs-parser.jay"
  { yyVal = new TypeExpression (TypeManager.string_type, GetLocation (yyVals[0+yyTop])); }
  break;
case 405:
#line 3038 "cs-parser.jay"
  { yyVal = new TypeExpression (TypeManager.bool_type, GetLocation (yyVals[0+yyTop])); }
  break;
case 406:
#line 3039 "cs-parser.jay"
  { yyVal = new TypeExpression (TypeManager.decimal_type, GetLocation (yyVals[0+yyTop])); }
  break;
case 407:
#line 3040 "cs-parser.jay"
  { yyVal = new TypeExpression (TypeManager.float_type, GetLocation (yyVals[0+yyTop])); }
  break;
case 408:
#line 3041 "cs-parser.jay"
  { yyVal = new TypeExpression (TypeManager.double_type, GetLocation (yyVals[0+yyTop])); }
  break;
case 410:
#line 3046 "cs-parser.jay"
  { yyVal = new TypeExpression (TypeManager.sbyte_type, GetLocation (yyVals[0+yyTop])); }
  break;
case 411:
#line 3047 "cs-parser.jay"
  { yyVal = new TypeExpression (TypeManager.byte_type, GetLocation (yyVals[0+yyTop])); }
  break;
case 412:
#line 3048 "cs-parser.jay"
  { yyVal = new TypeExpression (TypeManager.short_type, GetLocation (yyVals[0+yyTop])); }
  break;
case 413:
#line 3049 "cs-parser.jay"
  { yyVal = new TypeExpression (TypeManager.ushort_type, GetLocation (yyVals[0+yyTop])); }
  break;
case 414:
#line 3050 "cs-parser.jay"
  { yyVal = new TypeExpression (TypeManager.int32_type, GetLocation (yyVals[0+yyTop])); }
  break;
case 415:
#line 3051 "cs-parser.jay"
  { yyVal = new TypeExpression (TypeManager.uint32_type, GetLocation (yyVals[0+yyTop])); }
  break;
case 416:
#line 3052 "cs-parser.jay"
  { yyVal = new TypeExpression (TypeManager.int64_type, GetLocation (yyVals[0+yyTop])); }
  break;
case 417:
#line 3053 "cs-parser.jay"
  { yyVal = new TypeExpression (TypeManager.uint64_type, GetLocation (yyVals[0+yyTop])); }
  break;
case 418:
#line 3054 "cs-parser.jay"
  { yyVal = new TypeExpression (TypeManager.char_type, GetLocation (yyVals[0+yyTop])); }
  break;
case 422:
#line 3070 "cs-parser.jay"
  {
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
		yyVal = new SimpleName (lt.Value, (TypeArguments)yyVals[0+yyTop], lt.Location);	  
	  }
  break;
case 423:
#line 3074 "cs-parser.jay"
  {
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
	       yyVal = new CompletionSimpleName (MemberName.MakeName (lt.Value, null), lt.Location);
	  }
  break;
case 443:
#line 3100 "cs-parser.jay"
  { yyVal = new NullLiteral (GetLocation (yyVals[0+yyTop])); }
  break;
case 444:
#line 3104 "cs-parser.jay"
  { yyVal = new BoolLiteral (true, GetLocation (yyVals[0+yyTop])); }
  break;
case 445:
#line 3105 "cs-parser.jay"
  { yyVal = new BoolLiteral (false, GetLocation (yyVals[0+yyTop])); }
  break;
case 450:
#line 3131 "cs-parser.jay"
  {
		yyVal = new ParenthesizedExpression ((Expression) yyVals[-1+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 451:
#line 3136 "cs-parser.jay"
  {
		yyVal = new ParenthesizedExpression ((Expression) yyVals[-1+yyTop]);
	  }
  break;
case 452:
#line 3143 "cs-parser.jay"
  {
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
		yyVal = new MemberAccess ((Expression) yyVals[-3+yyTop], lt.Value, (TypeArguments) yyVals[0+yyTop], lt.Location);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]));
	  }
  break;
case 453:
#line 3149 "cs-parser.jay"
  {
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
		yyVal = new MemberAccess ((Expression) yyVals[-3+yyTop], lt.Value, (TypeArguments) yyVals[0+yyTop], lt.Location);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]));
	  }
  break;
case 454:
#line 3155 "cs-parser.jay"
  {
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
		yyVal = new MemberAccess (new BaseThis (GetLocation (yyVals[-3+yyTop])), lt.Value, (TypeArguments) yyVals[0+yyTop], lt.Location);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]));
	  }
  break;
case 455:
#line 3161 "cs-parser.jay"
  {
		var lt1 = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
		var lt2 = (Tokenizer.LocatedToken) yyVals[-1+yyTop];

		yyVal = new QualifiedAliasMember (lt1.Value, lt2.Value, (TypeArguments) yyVals[0+yyTop], lt1.Location);
	  }
  break;
case 456:
#line 3167 "cs-parser.jay"
  {
		yyVal = new CompletionMemberAccess ((Expression) yyVals[-2+yyTop], null,GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 457:
#line 3170 "cs-parser.jay"
  {
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
		yyVal = new CompletionMemberAccess ((Expression) yyVals[-3+yyTop], lt.Value, lt.Location);
	  }
  break;
case 458:
#line 3175 "cs-parser.jay"
  {
		yyVal = new CompletionMemberAccess ((Expression) yyVals[-2+yyTop], null, lexer.Location);
	  }
  break;
case 459:
#line 3178 "cs-parser.jay"
  {
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
		yyVal = new CompletionMemberAccess ((Expression) yyVals[-3+yyTop], lt.Value, lt.Location);
 	  }
  break;
case 460:
#line 3186 "cs-parser.jay"
  {
		yyVal = new Invocation ((Expression) yyVals[-3+yyTop], (Arguments) yyVals[-1+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 461:
#line 3193 "cs-parser.jay"
  { yyVal = null; }
  break;
case 463:
#line 3199 "cs-parser.jay"
  {
	  	if (yyVals[-1+yyTop] == null) {
	  		yyVal = CollectionOrObjectInitializers.Empty;
	  		/* TODO: lbag*/
	  	} else {
	  		yyVal = new CollectionOrObjectInitializers ((List<Expression>) yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));
	  		lbag.AddLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  	}
	  }
  break;
case 464:
#line 3209 "cs-parser.jay"
  {
	  	yyVal = new CollectionOrObjectInitializers ((List<Expression>) yyVals[-2+yyTop], GetLocation (yyVals[-3+yyTop]));
	  	lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 465:
#line 3216 "cs-parser.jay"
  { yyVal = null; }
  break;
case 466:
#line 3218 "cs-parser.jay"
  {
		yyVal = yyVals[0+yyTop];
	}
  break;
case 467:
#line 3225 "cs-parser.jay"
  {
	  	var a = new List<Expression> ();
	  	a.Add ((Expression) yyVals[0+yyTop]);
	  	yyVal = a;
	  }
  break;
case 468:
#line 3231 "cs-parser.jay"
  {
	  	var a = (List<Expression>)yyVals[-2+yyTop];
	  	a.Add ((Expression) yyVals[0+yyTop]);
	  	yyVal = a;
	  }
  break;
case 469:
#line 3236 "cs-parser.jay"
  {
	  	Error_SyntaxError (yyToken);
		yyVal = yyVals[-1+yyTop];
	  }
  break;
case 470:
#line 3244 "cs-parser.jay"
  {
	  	var lt = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
	  	yyVal = new ElementInitializer (lt.Value, (Expression)yyVals[0+yyTop], lt.Location);
	  	lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 471:
#line 3250 "cs-parser.jay"
  {
		yyVal = new CompletionElementInitializer (null, GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 472:
#line 3253 "cs-parser.jay"
  {
		CompletionSimpleName csn = yyVals[-1+yyTop] as CompletionSimpleName;
		if (csn == null)
			yyVal = new CollectionElementInitializer ((Expression)yyVals[-1+yyTop]);
		else
			yyVal = new CompletionElementInitializer (csn.Prefix, csn.Location);
	  }
  break;
case 473:
#line 3261 "cs-parser.jay"
  {
		if (yyVals[-1+yyTop] == null)
			yyVal = null;
		else
	  		yyVal = new CollectionElementInitializer ((List<Expression>)yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));
	  }
  break;
case 474:
#line 3268 "cs-parser.jay"
  {
	  	Report.Error (1920, GetLocation (yyVals[-1+yyTop]), "An element initializer cannot be empty");
		yyVal = null;
	  }
  break;
case 477:
#line 3280 "cs-parser.jay"
  { yyVal = null; }
  break;
case 479:
#line 3286 "cs-parser.jay"
  { 
		Arguments list = new Arguments (4);
		list.Add ((Argument) yyVals[0+yyTop]);
		yyVal = list;
	  }
  break;
case 480:
#line 3292 "cs-parser.jay"
  {
		Arguments list = (Arguments) yyVals[-2+yyTop];
		if (list [list.Count - 1] is NamedArgument)
			Error_NamedArgumentExpected ((NamedArgument) list [list.Count - 1]);
		
		list.Add ((Argument) yyVals[0+yyTop]);
		lbag.AppendTo (list, GetLocation (yyVals[-1+yyTop]));
		yyVal = list;
	  }
  break;
case 481:
#line 3302 "cs-parser.jay"
  {
		Arguments list = (Arguments) yyVals[-2+yyTop];
		NamedArgument a = (NamedArgument) yyVals[0+yyTop];
		for (int i = 0; i < list.Count; ++i) {
			NamedArgument na = list [i] as NamedArgument;
			if (na != null && na.Name == a.Name)
				Report.Error (1740, na.Location, "Named argument `{0}' specified multiple times",
					na.Name);
		}
		
		list.Add (a);
		lbag.AppendTo (list, GetLocation (yyVals[-1+yyTop]));
		yyVal = list;
	  }
  break;
case 482:
#line 3317 "cs-parser.jay"
  {
	  	Report.Error (839, GetLocation (yyVals[0+yyTop]), "An argument is missing");
	  	yyVal = yyVals[-1+yyTop];
	  }
  break;
case 483:
#line 3322 "cs-parser.jay"
  {
	  	Report.Error (839, GetLocation (yyVals[-1+yyTop]), "An argument is missing");
	  	yyVal = null;
	  }
  break;
case 484:
#line 3330 "cs-parser.jay"
  {
		yyVal = new Argument ((Expression) yyVals[0+yyTop]);
	  }
  break;
case 488:
#line 3343 "cs-parser.jay"
  { 
		yyVal = new Argument ((Expression) yyVals[0+yyTop], Argument.AType.Ref);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 489:
#line 3348 "cs-parser.jay"
  { 
		yyVal = new Argument ((Expression) yyVals[0+yyTop], Argument.AType.Out);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 490:
#line 3353 "cs-parser.jay"
  {
		yyVal = new Argument (new Arglist ((Arguments) yyVals[-1+yyTop], GetLocation (yyVals[-3+yyTop])));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 491:
#line 3358 "cs-parser.jay"
  {
		yyVal = new Argument (new Arglist (GetLocation (yyVals[-2+yyTop])));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 492:
#line 3363 "cs-parser.jay"
  {
		yyVal = new Argument (new ArglistAccess (GetLocation (yyVals[0+yyTop])));
	  }
  break;
case 494:
#line 3374 "cs-parser.jay"
  {
		yyVal = new ElementAccess ((Expression) yyVals[-3+yyTop], (Arguments) yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 495:
#line 3382 "cs-parser.jay"
  {
		var list = new List<Expression> (4);
		list.Add ((Expression) yyVals[0+yyTop]);
		yyVal = list;
	  }
  break;
case 496:
#line 3388 "cs-parser.jay"
  {
		var list = (List<Expression>) yyVals[-2+yyTop];
		list.Add ((Expression) yyVals[0+yyTop]);
		lbag.AppendTo (list, GetLocation (yyVals[-1+yyTop]));
		yyVal = list;
	  }
  break;
case 497:
#line 3394 "cs-parser.jay"
  {
	  	Error_SyntaxError (yyToken);
		yyVal = yyVals[-1+yyTop];
	  }
  break;
case 498:
#line 3402 "cs-parser.jay"
  {
		Arguments args = new Arguments (4);
		args.Add ((Argument) yyVals[0+yyTop]);
		yyVal = args;
	  }
  break;
case 499:
#line 3408 "cs-parser.jay"
  {
		Arguments args = (Arguments) yyVals[-2+yyTop];
		args.Add ((Argument) yyVals[0+yyTop]);
		lbag.AppendTo (args, GetLocation (yyVals[-1+yyTop]));
		yyVal = args;	  
	  }
  break;
case 500:
#line 3418 "cs-parser.jay"
  {
	  	yyVal = new Argument ((Expression) yyVals[0+yyTop]);
	  }
  break;
case 502:
#line 3426 "cs-parser.jay"
  {
		yyVal = new This (GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 503:
#line 3433 "cs-parser.jay"
  {
	  	yyVal = new ElementAccess (new BaseThis (GetLocation (yyVals[-3+yyTop])), (Arguments) yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 504:
#line 3438 "cs-parser.jay"
  {
	  	Error_SyntaxError (yyToken);
		yyVal = new ElementAccess (null, null, GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 505:
#line 3446 "cs-parser.jay"
  {
		yyVal = new UnaryMutator (UnaryMutator.Mode.PostIncrement, (Expression) yyVals[-1+yyTop], GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 506:
#line 3453 "cs-parser.jay"
  {
		yyVal = new UnaryMutator (UnaryMutator.Mode.PostDecrement, (Expression) yyVals[-1+yyTop], GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 507:
#line 3460 "cs-parser.jay"
  {
		if (yyVals[0+yyTop] != null) {
			if (RootContext.Version <= LanguageVersion.ISO_2)
				Report.FeatureIsNotAvailable (GetLocation (yyVals[-5+yyTop]), "object initializers");
				
			yyVal = new NewInitialize ((FullNamedExpression) yyVals[-4+yyTop], (Arguments) yyVals[-2+yyTop], (CollectionOrObjectInitializers) yyVals[0+yyTop], GetLocation (yyVals[-5+yyTop]));
		} else {
			yyVal = new New ((FullNamedExpression) yyVals[-4+yyTop], (Arguments) yyVals[-2+yyTop], GetLocation (yyVals[-5+yyTop]));
		}
		
		lbag.AddLocation (yyVal, GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 508:
#line 3473 "cs-parser.jay"
  {
		if (RootContext.Version <= LanguageVersion.ISO_2)
			Report.FeatureIsNotAvailable (GetLocation (yyVals[-2+yyTop]), "collection initializers");
	  
		yyVal = new NewInitialize ((FullNamedExpression) yyVals[-1+yyTop], null, (CollectionOrObjectInitializers) yyVals[0+yyTop], GetLocation (yyVals[-2+yyTop]));
	  }
  break;
case 509:
#line 3485 "cs-parser.jay"
  {
		yyVal = new ArrayCreation ((FullNamedExpression) yyVals[-5+yyTop], (List<Expression>) yyVals[-3+yyTop],
				new ComposedTypeSpecifier (((List<Expression>) yyVals[-3+yyTop]).Count, GetLocation (yyVals[-4+yyTop])) {
	  				Next = (ComposedTypeSpecifier) yyVals[-1+yyTop]
			  	}, (ArrayInitializer) yyVals[0+yyTop], GetLocation (yyVals[-6+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-4+yyTop]), GetLocation (yyVals[-2+yyTop]));
	  }
  break;
case 510:
#line 3493 "cs-parser.jay"
  {
	  	if (yyVals[0+yyTop] == null)
	  		Report.Error (1586, GetLocation (yyVals[-3+yyTop]), "Array creation must have array size or array initializer");

		yyVal = new ArrayCreation ((FullNamedExpression) yyVals[-2+yyTop], (ComposedTypeSpecifier) yyVals[-1+yyTop], (ArrayInitializer) yyVals[0+yyTop], GetLocation (yyVals[-3+yyTop]));
	  }
  break;
case 511:
#line 3500 "cs-parser.jay"
  {
		if (RootContext.Version <= LanguageVersion.ISO_2)
			Report.FeatureIsNotAvailable (GetLocation (yyVals[-2+yyTop]), "implicitly typed arrays");
	  
		yyVal = new ImplicitlyTypedArrayCreation ((ComposedTypeSpecifier) yyVals[-1+yyTop], (ArrayInitializer) yyVals[0+yyTop], GetLocation (yyVals[-2+yyTop]));
	  }
  break;
case 512:
#line 3507 "cs-parser.jay"
  {
		Report.Error (178, GetLocation (yyVals[-1+yyTop]), "Invalid rank specifier, expecting `,' or `]'");
		yyVal = new ArrayCreation ((FullNamedExpression) yyVals[-5+yyTop], null, GetLocation (yyVals[-6+yyTop]));
	  }
  break;
case 513:
#line 3512 "cs-parser.jay"
  {
		Error_SyntaxError (1526, yyToken, "Unexpected symbol");
		yyVal = new ArrayCreation ((FullNamedExpression) yyVals[-1+yyTop], null, GetLocation (yyVals[-2+yyTop]));
	  }
  break;
case 514:
#line 3519 "cs-parser.jay"
  {
		++lexer.parsing_type;
	  }
  break;
case 515:
#line 3523 "cs-parser.jay"
  {
		--lexer.parsing_type;
		yyVal = yyVals[0+yyTop];
	  }
  break;
case 516:
#line 3531 "cs-parser.jay"
  {
		if (RootContext.MetadataCompatibilityVersion < MetadataVersion.v2)	  
	  		Report.FeatureIsNotSupported (GetLocation (yyVals[-3+yyTop]), "anonymous types");
	  	else if (RootContext.Version <= LanguageVersion.ISO_2)
	  		Report.FeatureIsNotAvailable (GetLocation (yyVals[-3+yyTop]), "anonymous types");

		yyVal = new NewAnonymousType ((List<AnonymousTypeParameter>) yyVals[-1+yyTop], current_container, GetLocation (yyVals[-3+yyTop]));
		
		/* TODO: lbag comma location*/
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 519:
#line 3550 "cs-parser.jay"
  { yyVal = null; }
  break;
case 521:
#line 3556 "cs-parser.jay"
  {
	  	var a = new List<AnonymousTypeParameter> (4);
	  	a.Add ((AnonymousTypeParameter) yyVals[0+yyTop]);
	  	yyVal = a;
	  }
  break;
case 522:
#line 3562 "cs-parser.jay"
  {
	  	var a = (List<AnonymousTypeParameter>) yyVals[-2+yyTop];
	  	a.Add ((AnonymousTypeParameter) yyVals[0+yyTop]);
	  	yyVal = a;
	  }
  break;
case 523:
#line 3571 "cs-parser.jay"
  {
		var lt = (Tokenizer.LocatedToken)yyVals[-2+yyTop];
	  	yyVal = new AnonymousTypeParameter ((Expression)yyVals[0+yyTop], lt.Value, lt.Location);
	  	lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 524:
#line 3577 "cs-parser.jay"
  {
		var lt = (Tokenizer.LocatedToken)yyVals[0+yyTop];
	  	yyVal = new AnonymousTypeParameter (new SimpleName (lt.Value, lt.Location),
	  		lt.Value, lt.Location);
	  }
  break;
case 525:
#line 3583 "cs-parser.jay"
  {
	  	MemberAccess ma = (MemberAccess) yyVals[0+yyTop];
	  	yyVal = new AnonymousTypeParameter (ma, ma.Name, ma.Location);
	  }
  break;
case 526:
#line 3588 "cs-parser.jay"
  {
		Report.Error (746, lexer.Location,
			"Invalid anonymous type member declarator. Anonymous type members must be a member assignment, simple name or member access expression");
		yyVal = null;
	  }
  break;
case 527:
#line 3597 "cs-parser.jay"
  {
		yyVal = null;
	  }
  break;
case 530:
#line 3606 "cs-parser.jay"
  {
		if (yyVals[-1+yyTop] != null) {
			((ComposedTypeSpecifier) yyVals[-1+yyTop]).Next = (ComposedTypeSpecifier) yyVals[0+yyTop];
			yyVal = yyVals[-1+yyTop];
		} else {
			yyVal = yyVals[0+yyTop];
		}
	  }
  break;
case 532:
#line 3619 "cs-parser.jay"
  {
	  	((ComposedTypeSpecifier) yyVals[-1+yyTop]).Next = (ComposedTypeSpecifier) yyVals[0+yyTop];
	  	yyVal = yyVals[-1+yyTop];
	  }
  break;
case 533:
#line 3627 "cs-parser.jay"
  {
		yyVal = ComposedTypeSpecifier.CreateArrayDimension (1, GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 534:
#line 3631 "cs-parser.jay"
  {
		yyVal = ComposedTypeSpecifier.CreateArrayDimension ((int)yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));
	  }
  break;
case 535:
#line 3638 "cs-parser.jay"
  {
		yyVal = 2;
	  }
  break;
case 536:
#line 3642 "cs-parser.jay"
  {
		yyVal = ((int) yyVals[-1+yyTop]) + 1;
	  }
  break;
case 537:
#line 3649 "cs-parser.jay"
  {
		yyVal = null;
	  }
  break;
case 538:
#line 3653 "cs-parser.jay"
  {
		yyVal = yyVals[0+yyTop];
	  }
  break;
case 539:
#line 3660 "cs-parser.jay"
  {
		yyVal = new ArrayInitializer (0, GetLocation (yyVals[-1+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 540:
#line 3665 "cs-parser.jay"
  {
		yyVal = new ArrayInitializer ((List<Expression>) yyVals[-2+yyTop], GetLocation (yyVals[-3+yyTop]));
		if (yyVals[-1+yyTop] != null)
			lbag.AppendTo (yyVals[-2+yyTop], GetLocation (yyVals[-1+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 541:
#line 3675 "cs-parser.jay"
  {
		var list = new List<Expression> (4);
		list.Add ((Expression) yyVals[0+yyTop]);
		yyVal = list;
	  }
  break;
case 542:
#line 3681 "cs-parser.jay"
  {
		var list = (List<Expression>) yyVals[-2+yyTop];
		list.Add ((Expression) yyVals[0+yyTop]);
		lbag.AppendTo (list, GetLocation (yyVals[-1+yyTop]));
		yyVal = list;
	  }
  break;
case 543:
#line 3688 "cs-parser.jay"
  {
	  	Error_SyntaxError (yyToken);
	  	yyVal = new List<Expression> ();
	  }
  break;
case 544:
#line 3696 "cs-parser.jay"
  {
	  	lexer.TypeOfParsing = true;
	  }
  break;
case 545:
#line 3700 "cs-parser.jay"
  {
	  	lexer.TypeOfParsing = false;
		yyVal = new TypeOf ((FullNamedExpression) yyVals[-1+yyTop], GetLocation (yyVals[-4+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 548:
#line 3711 "cs-parser.jay"
  {
	 	Error_TypeExpected (lexer.Location);
	 	yyVal = null;
	 }
  break;
case 549:
#line 3719 "cs-parser.jay"
  {  
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];

		yyVal = new SimpleName (lt.Value, (int) yyVals[0+yyTop], lt.Location);
	  }
  break;
case 550:
#line 3725 "cs-parser.jay"
  {
		var lt1 = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
		var lt2 = (Tokenizer.LocatedToken) yyVals[-1+yyTop];

		yyVal = new QualifiedAliasMember (lt1.Value, lt2.Value, (int) yyVals[0+yyTop], lt1.Location);
	  }
  break;
case 551:
#line 3732 "cs-parser.jay"
  {
		var lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];
		
		yyVal = new MemberAccess ((Expression) yyVals[-2+yyTop], lt.Value, lt.Location);		
	  }
  break;
case 552:
#line 3738 "cs-parser.jay"
  {
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
		
		yyVal = new MemberAccess ((Expression) yyVals[-3+yyTop], lt.Value, (int) yyVals[0+yyTop], lt.Location);		
	  }
  break;
case 553:
#line 3744 "cs-parser.jay"
  {
		var te = ((MemberName) yyVals[-3+yyTop]).GetTypeExpression ();
		if (te.HasTypeArguments)
			Error_TypeExpected (GetLocation (yyVals[0+yyTop]));

		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
		yyVal = new MemberAccess (te, lt.Value, (int) yyVals[0+yyTop], lt.Location);		
	  }
  break;
case 554:
#line 3756 "cs-parser.jay"
  {
		if (RootContext.MetadataCompatibilityVersion < MetadataVersion.v2)	  
	  		Report.FeatureIsNotSupported (GetLocation (yyVals[0+yyTop]), "generics");
		else if (RootContext.Version < LanguageVersion.ISO_2)
			Report.FeatureIsNotAvailable (GetLocation (yyVals[0+yyTop]), "generics");

		yyVal = yyVals[0+yyTop];
	  }
  break;
case 555:
#line 3768 "cs-parser.jay"
  {
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
		if (RootContext.Version == LanguageVersion.ISO_1)
			Report.FeatureIsNotAvailable (lt.Location, "namespace alias qualifier");

		yyVal = lt;		
	  }
  break;
case 556:
#line 3779 "cs-parser.jay"
  { 
		yyVal = new SizeOf ((Expression) yyVals[-1+yyTop], GetLocation (yyVals[-3+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 557:
#line 3787 "cs-parser.jay"
  {
		yyVal = new CheckedExpr ((Expression) yyVals[-1+yyTop], GetLocation (yyVals[-3+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 558:
#line 3795 "cs-parser.jay"
  {
		yyVal = new UnCheckedExpr ((Expression) yyVals[-1+yyTop], GetLocation (yyVals[-3+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 559:
#line 3803 "cs-parser.jay"
  {
		var lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];
		yyVal = new MemberAccess (new Indirection ((Expression) yyVals[-2+yyTop], GetLocation (yyVals[-1+yyTop])), lt.Value, lt.Location);
	  }
  break;
case 560:
#line 3811 "cs-parser.jay"
  {
		start_anonymous (false, (ParametersCompiled) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 561:
#line 3815 "cs-parser.jay"
  {
		yyVal = end_anonymous ((ToplevelBlock) yyVals[0+yyTop]);
	}
  break;
case 562:
#line 3822 "cs-parser.jay"
  {
		yyVal = ParametersCompiled.Undefined;
	  }
  break;
case 564:
#line 3830 "cs-parser.jay"
  {
	  	valid_param_mod = ParameterModifierType.Ref | ParameterModifierType.Out;
	  }
  break;
case 565:
#line 3834 "cs-parser.jay"
  {
		valid_param_mod = 0;
	  	yyVal = yyVals[-1+yyTop];
	  }
  break;
case 566:
#line 3842 "cs-parser.jay"
  {
		if (RootContext.Version < LanguageVersion.ISO_2)
			Report.FeatureIsNotAvailable (GetLocation (yyVals[-3+yyTop]), "default value expression");

		yyVal = new DefaultValueExpression ((Expression) yyVals[-1+yyTop], GetLocation (yyVals[-3+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 568:
#line 3854 "cs-parser.jay"
  {
		yyVal = new Unary (Unary.Operator.LogicalNot, (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 569:
#line 3858 "cs-parser.jay"
  {
		yyVal = new Unary (Unary.Operator.OnesComplement, (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 571:
#line 3866 "cs-parser.jay"
  {
		yyVal = new Cast ((FullNamedExpression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-3+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 572:
#line 3871 "cs-parser.jay"
  {
		yyVal = new Cast ((FullNamedExpression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-3+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 574:
#line 3884 "cs-parser.jay"
  { 
	  	yyVal = new Unary (Unary.Operator.UnaryPlus, (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 575:
#line 3888 "cs-parser.jay"
  { 
		yyVal = new Unary (Unary.Operator.UnaryNegation, (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 576:
#line 3892 "cs-parser.jay"
  {
		yyVal = new UnaryMutator (UnaryMutator.Mode.PreIncrement, (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 577:
#line 3896 "cs-parser.jay"
  {
		yyVal = new UnaryMutator (UnaryMutator.Mode.PreDecrement, (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 578:
#line 3900 "cs-parser.jay"
  {
		yyVal = new Indirection ((Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 579:
#line 3904 "cs-parser.jay"
  {
		yyVal = new Unary (Unary.Operator.AddressOf, (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 581:
#line 3912 "cs-parser.jay"
  {
		yyVal = new Binary (Binary.Operator.Multiply, 
			         (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 582:
#line 3917 "cs-parser.jay"
  {
		yyVal = new Binary (Binary.Operator.Division, 
			         (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 583:
#line 3922 "cs-parser.jay"
  {
		yyVal = new Binary (Binary.Operator.Modulus, 
			         (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 585:
#line 3931 "cs-parser.jay"
  {
		yyVal = new Binary (Binary.Operator.Addition, 
			         (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 586:
#line 3936 "cs-parser.jay"
  {
		yyVal = new Binary (Binary.Operator.Subtraction, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 587:
#line 3940 "cs-parser.jay"
  {
	  	/* Shift/Reduce conflict*/
		yyVal = new Binary (Binary.Operator.Subtraction, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
  	  }
  break;
case 588:
#line 3945 "cs-parser.jay"
  {
		yyVal = new As ((Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 589:
#line 3949 "cs-parser.jay"
  {
		yyVal = new Is ((Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 591:
#line 3957 "cs-parser.jay"
  {
		yyVal = new Binary (Binary.Operator.LeftShift, 
			         (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 592:
#line 3962 "cs-parser.jay"
  {
		yyVal = new Binary (Binary.Operator.RightShift, 
			         (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 594:
#line 3971 "cs-parser.jay"
  {
		yyVal = new Binary (Binary.Operator.LessThan, 
			         (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 595:
#line 3976 "cs-parser.jay"
  {
		yyVal = new Binary (Binary.Operator.GreaterThan, 
			         (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 596:
#line 3981 "cs-parser.jay"
  {
		yyVal = new Binary (Binary.Operator.LessThanOrEqual, 
			         (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 597:
#line 3986 "cs-parser.jay"
  {
		yyVal = new Binary (Binary.Operator.GreaterThanOrEqual, 
			         (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 599:
#line 3995 "cs-parser.jay"
  {
		yyVal = new Binary (Binary.Operator.Equality, 
			         (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 600:
#line 4000 "cs-parser.jay"
  {
		yyVal = new Binary (Binary.Operator.Inequality, 
			         (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 602:
#line 4009 "cs-parser.jay"
  {
		yyVal = new Binary (Binary.Operator.BitwiseAnd, 
			         (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 604:
#line 4018 "cs-parser.jay"
  {
		yyVal = new Binary (Binary.Operator.ExclusiveOr, 
			         (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 606:
#line 4027 "cs-parser.jay"
  {
		yyVal = new Binary (Binary.Operator.BitwiseOr, 
			         (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 608:
#line 4036 "cs-parser.jay"
  {
		yyVal = new Binary (Binary.Operator.LogicalAnd, 
			         (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 610:
#line 4045 "cs-parser.jay"
  {
		yyVal = new Binary (Binary.Operator.LogicalOr, 
			         (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 612:
#line 4054 "cs-parser.jay"
  {
		if (RootContext.Version < LanguageVersion.ISO_2)
			Report.FeatureIsNotAvailable (GetLocation (yyVals[-1+yyTop]), "null coalescing operator");
			
		yyVal = new Nullable.NullCoalescingOperator ((Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 614:
#line 4065 "cs-parser.jay"
  {
		yyVal = new Conditional (new BooleanExpression ((Expression) yyVals[-4+yyTop]), (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-3+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 615:
#line 4073 "cs-parser.jay"
  {
		yyVal = new SimpleAssign ((Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 616:
#line 4077 "cs-parser.jay"
  {
		yyVal = new CompoundAssign (
			Binary.Operator.Multiply, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 617:
#line 4082 "cs-parser.jay"
  {
		yyVal = new CompoundAssign (
			Binary.Operator.Division, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 618:
#line 4087 "cs-parser.jay"
  {
		yyVal = new CompoundAssign (
			Binary.Operator.Modulus, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 619:
#line 4092 "cs-parser.jay"
  {
		yyVal = new CompoundAssign (
			Binary.Operator.Addition, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 620:
#line 4097 "cs-parser.jay"
  {
		yyVal = new CompoundAssign (
			Binary.Operator.Subtraction, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 621:
#line 4102 "cs-parser.jay"
  {
		yyVal = new CompoundAssign (
			Binary.Operator.LeftShift, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 622:
#line 4107 "cs-parser.jay"
  {
		yyVal = new CompoundAssign (
			Binary.Operator.RightShift, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 623:
#line 4112 "cs-parser.jay"
  {
		yyVal = new CompoundAssign (
			Binary.Operator.BitwiseAnd, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 624:
#line 4117 "cs-parser.jay"
  {
		yyVal = new CompoundAssign (
			Binary.Operator.BitwiseOr, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 625:
#line 4122 "cs-parser.jay"
  {
		yyVal = new CompoundAssign (
			Binary.Operator.ExclusiveOr, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 626:
#line 4130 "cs-parser.jay"
  {
		var pars = new List<Parameter> (4);
		pars.Add ((Parameter) yyVals[0+yyTop]);

		yyVal = pars;
	  }
  break;
case 627:
#line 4137 "cs-parser.jay"
  {
		var pars = (List<Parameter>) yyVals[-2+yyTop];
		Parameter p = (Parameter)yyVals[0+yyTop];
		if (pars[0].GetType () != p.GetType ()) {
			Report.Error (748, p.Location, "All lambda parameters must be typed either explicitly or implicitly");
		}
		
		pars.Add (p);
		yyVal = pars;
	  }
  break;
case 628:
#line 4151 "cs-parser.jay"
  {
		var lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];

		yyVal = new Parameter ((FullNamedExpression) yyVals[-1+yyTop], lt.Value, (Parameter.Modifier) yyVals[-2+yyTop], null, lt.Location);
	  }
  break;
case 629:
#line 4157 "cs-parser.jay"
  {
		var lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];

		yyVal = new Parameter ((FullNamedExpression) yyVals[-1+yyTop], lt.Value, Parameter.Modifier.NONE, null, lt.Location);
	  }
  break;
case 630:
#line 4163 "cs-parser.jay"
  {
	  	var lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];
		yyVal = new ImplicitLambdaParameter (lt.Value, lt.Location);
	  }
  break;
case 631:
#line 4170 "cs-parser.jay"
  { yyVal = ParametersCompiled.EmptyReadOnlyParameters; }
  break;
case 632:
#line 4171 "cs-parser.jay"
  { 
		var pars_list = (List<Parameter>) yyVals[0+yyTop];
		yyVal = new ParametersCompiled (compiler, pars_list.ToArray ());
	  }
  break;
case 633:
#line 4178 "cs-parser.jay"
  {
		start_block (lexer.Location);
	  }
  break;
case 634:
#line 4182 "cs-parser.jay"
  {
		Block b = end_block (lexer.Location);
		b.AddStatement (new ContextualReturn ((Expression) yyVals[0+yyTop]));
		yyVal = b;
	  }
  break;
case 635:
#line 4187 "cs-parser.jay"
  { 
	  	yyVal = yyVals[0+yyTop]; 
	  }
  break;
case 636:
#line 4194 "cs-parser.jay"
  {
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
		Parameter p = new ImplicitLambdaParameter (lt.Value, lt.Location);
		start_anonymous (true, new ParametersCompiled (compiler, p), GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 637:
#line 4200 "cs-parser.jay"
  {
		yyVal = end_anonymous ((ToplevelBlock) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]));
	  }
  break;
case 638:
#line 4205 "cs-parser.jay"
  {
		if (RootContext.Version <= LanguageVersion.ISO_2)
			Report.FeatureIsNotAvailable (GetLocation (yyVals[0+yyTop]), "lambda expressions");
	  
	  	valid_param_mod = ParameterModifierType.Ref | ParameterModifierType.Out;
	  }
  break;
case 639:
#line 4212 "cs-parser.jay"
  {
	  	valid_param_mod = 0;
		start_anonymous (true, (ParametersCompiled) yyVals[-2+yyTop], GetLocation (yyVals[-4+yyTop]));
	  }
  break;
case 640:
#line 4217 "cs-parser.jay"
  {
		yyVal = end_anonymous ((ToplevelBlock) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-4+yyTop]), GetLocation (yyVals[-3+yyTop]));
	  }
  break;
case 647:
#line 4240 "cs-parser.jay"
  {
		yyVal = new BooleanExpression ((Expression) yyVals[0+yyTop]);
	  }
  break;
case 648:
#line 4253 "cs-parser.jay"
  {
		lexer.ConstraintsParsing = true;
	  }
  break;
case 649:
#line 4257 "cs-parser.jay"
  {
		MemberName name = MakeName ((MemberName) yyVals[0+yyTop]);
		push_current_class (new Class (current_namespace, current_class, name, (Modifiers) yyVals[-4+yyTop], (Attributes) yyVals[-5+yyTop]), yyVals[-3+yyTop]);
	  }
  break;
case 650:
#line 4263 "cs-parser.jay"
  {
		lexer.ConstraintsParsing = false;

		current_class.SetParameterInfo ((List<Constraints>) yyVals[0+yyTop]);
		lbag.AddMember (current_class, mod_locations, GetLocation (yyVals[-5+yyTop]));

		if (RootContext.Documentation != null) {
			current_container.DocComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.Allowed;
		}
	  }
  break;
case 651:
#line 4275 "cs-parser.jay"
  {
		--lexer.parsing_declaration;
		if (RootContext.Documentation != null)
			Lexer.doc_state = XmlCommentState.Allowed;
	  }
  break;
case 652:
#line 4281 "cs-parser.jay"
  {
		lbag.AppendToMember (current_class, GetLocation (yyVals[-4+yyTop]), GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
		yyVal = pop_current_class ();
	  }
  break;
case 653:
#line 4289 "cs-parser.jay"
  { yyVal = null; }
  break;
case 654:
#line 4291 "cs-parser.jay"
  { yyVal = yyVals[0+yyTop]; }
  break;
case 655:
#line 4296 "cs-parser.jay"
  {
	    mod_locations = null;
		yyVal = ModifierNone;
	  }
  break;
case 658:
#line 4306 "cs-parser.jay"
  { 
		var m1 = (Modifiers) yyVals[-1+yyTop];
		var m2 = (Modifiers) yyVals[0+yyTop];

		if ((m1 & m2) != 0) {
			Report.Error (1004, lexer.Location - ModifiersExtensions.Name (m2).Length,
				"Duplicate `{0}' modifier", ModifiersExtensions.Name (m2));
		} else if ((m2 & Modifiers.AccessibilityMask) != 0 && (m1 & Modifiers.AccessibilityMask) != 0 &&
			((m2 | m1 & Modifiers.AccessibilityMask) != (Modifiers.PROTECTED | Modifiers.INTERNAL))) {
			Report.Error (107, lexer.Location - ModifiersExtensions.Name (m2).Length,
				"More than one protection modifier specified");
		}
		
		yyVal = m1 | m2;
	  }
  break;
case 659:
#line 4325 "cs-parser.jay"
  {
		yyVal = Modifiers.NEW;
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
		
		if (current_container == RootContext.ToplevelTypes)
			Report.Error (1530, GetLocation (yyVals[0+yyTop]), "Keyword `new' is not allowed on namespace elements");
	  }
  break;
case 660:
#line 4333 "cs-parser.jay"
  {
		yyVal = Modifiers.PUBLIC;
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 661:
#line 4338 "cs-parser.jay"
  {
		yyVal = Modifiers.PROTECTED;
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 662:
#line 4343 "cs-parser.jay"
  {
		yyVal = Modifiers.INTERNAL;
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 663:
#line 4348 "cs-parser.jay"
  {
		yyVal = Modifiers.PRIVATE;
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 664:
#line 4353 "cs-parser.jay"
  {
		yyVal = Modifiers.ABSTRACT;
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 665:
#line 4358 "cs-parser.jay"
  {
		yyVal = Modifiers.SEALED;
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 666:
#line 4363 "cs-parser.jay"
  {
		yyVal = Modifiers.STATIC;
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 667:
#line 4368 "cs-parser.jay"
  {
		yyVal = Modifiers.READONLY;
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 668:
#line 4373 "cs-parser.jay"
  {
		yyVal = Modifiers.VIRTUAL;
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 669:
#line 4378 "cs-parser.jay"
  {
		yyVal = Modifiers.OVERRIDE;
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 670:
#line 4383 "cs-parser.jay"
  {
		yyVal = Modifiers.EXTERN;
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 671:
#line 4388 "cs-parser.jay"
  {
		yyVal = Modifiers.VOLATILE;
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 672:
#line 4393 "cs-parser.jay"
  {
		yyVal = Modifiers.UNSAFE;
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
		if (!RootContext.Unsafe)
			Error_UnsafeCodeNotAllowed (GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 674:
#line 4404 "cs-parser.jay"
  {
		current_container.AddBasesForPart (current_class, (List<FullNamedExpression>) yyVals[0+yyTop]);
	 }
  break;
case 675:
#line 4410 "cs-parser.jay"
  { yyVal = null; }
  break;
case 676:
#line 4412 "cs-parser.jay"
  {
		yyVal = yyVals[0+yyTop];
	  }
  break;
case 677:
#line 4419 "cs-parser.jay"
  {
		var constraints = new List<Constraints> (1);
		constraints.Add ((Constraints) yyVals[0+yyTop]);
		yyVal = constraints;
	  }
  break;
case 678:
#line 4425 "cs-parser.jay"
  {
		var constraints = (List<Constraints>) yyVals[-1+yyTop];
		Constraints new_constraint = (Constraints)yyVals[0+yyTop];

		foreach (Constraints c in constraints) {
			if (new_constraint.TypeParameter.Value == c.TypeParameter.Value) {
				Report.Error (409, new_constraint.Location,
					"A constraint clause has already been specified for type parameter `{0}'",
					new_constraint.TypeParameter.Value);
			}
		}

		constraints.Add (new_constraint);
		yyVal = constraints;
	  }
  break;
case 679:
#line 4444 "cs-parser.jay"
  {
		var lt = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
		yyVal = new Constraints (new SimpleMemberName (lt.Value, lt.Location), (List<FullNamedExpression>) yyVals[0+yyTop], GetLocation (yyVals[-3+yyTop]));
	  }
  break;
case 680:
#line 4452 "cs-parser.jay"
  {
		var constraints = new List<FullNamedExpression> (1);
		constraints.Add ((FullNamedExpression) yyVals[0+yyTop]);
		yyVal = constraints;
	  }
  break;
case 681:
#line 4458 "cs-parser.jay"
  {
		var constraints = (List<FullNamedExpression>) yyVals[-2+yyTop];
		var prev = constraints [constraints.Count - 1] as SpecialContraintExpr;
		if (prev != null && (prev.Constraint & SpecialConstraint.Constructor) != 0) {			
			Report.Error (401, GetLocation (yyVals[-1+yyTop]), "The `new()' constraint must be the last constraint specified");
		}
		
		prev = yyVals[0+yyTop] as SpecialContraintExpr;
		if (prev != null) {
			if ((prev.Constraint & (SpecialConstraint.Class | SpecialConstraint.Struct)) != 0) {
				Report.Error (449, prev.Location, "The `class' or `struct' constraint must be the first constraint specified");			
			} else {
			 	prev = constraints [0] as SpecialContraintExpr;
			 	if (prev != null && (prev.Constraint & SpecialConstraint.Struct) != 0) {			
					Report.Error (451, GetLocation (yyVals[0+yyTop]), "The `new()' constraint cannot be used with the `struct' constraint");
				}
			}
		}

		constraints.Add ((FullNamedExpression) yyVals[0+yyTop]);
		yyVal = constraints;
	  }
  break;
case 682:
#line 4484 "cs-parser.jay"
  {
		if (yyVals[0+yyTop] is ComposedCast)
			Report.Error (706, GetLocation (yyVals[0+yyTop]), "Invalid constraint type `{0}'", ((ComposedCast)yyVals[0+yyTop]).GetSignatureForError ());
	  
	  	yyVal = yyVals[0+yyTop];
	  }
  break;
case 683:
#line 4491 "cs-parser.jay"
  {
		yyVal = new SpecialContraintExpr (SpecialConstraint.Constructor, GetLocation (yyVals[-2+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 684:
#line 4496 "cs-parser.jay"
  {
		yyVal = new SpecialContraintExpr (SpecialConstraint.Class, GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 685:
#line 4500 "cs-parser.jay"
  {
		yyVal = new SpecialContraintExpr (SpecialConstraint.Struct, GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 686:
#line 4507 "cs-parser.jay"
  {
		yyVal = Variance.None;
	  }
  break;
case 687:
#line 4511 "cs-parser.jay"
  {
		if (RootContext.MetadataCompatibilityVersion < MetadataVersion.v2)	  
	  		Report.FeatureIsNotSupported (lexer.Location, "generic type variance");
		else if (RootContext.Version <= LanguageVersion.V_3)
			Report.FeatureIsNotAvailable (lexer.Location, "generic type variance");

		yyVal = yyVals[0+yyTop];
	  }
  break;
case 688:
#line 4523 "cs-parser.jay"
  {
		yyVal = Variance.Covariant;
	  }
  break;
case 689:
#line 4527 "cs-parser.jay"
  {
		yyVal = Variance.Contravariant;
	  }
  break;
case 690:
#line 4547 "cs-parser.jay"
  {
		++lexer.parsing_block;
		start_block (GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 691:
#line 4552 "cs-parser.jay"
  {
		yyVal = yyVals[0+yyTop];
	  }
  break;
case 692:
#line 4559 "cs-parser.jay"
  {
	 	--lexer.parsing_block;
		yyVal = end_block (GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 693:
#line 4564 "cs-parser.jay"
  {
	 	--lexer.parsing_block;
		yyVal = end_block (lexer.Location);
	  }
  break;
case 694:
#line 4573 "cs-parser.jay"
  {
		++lexer.parsing_block;
		current_block.StartLocation = GetLocation (yyVals[0+yyTop]);
	  }
  break;
case 695:
#line 4578 "cs-parser.jay"
  {
		--lexer.parsing_block;
		yyVal = end_block (GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 700:
#line 4596 "cs-parser.jay"
  {
		if (yyVals[0+yyTop] != null && (Block) yyVals[0+yyTop] != current_block){
			current_block.AddStatement ((Statement) yyVals[0+yyTop]);
			current_block = (Block) yyVals[0+yyTop];
		}
	  }
  break;
case 701:
#line 4603 "cs-parser.jay"
  {
		current_block.AddStatement ((Statement) yyVals[0+yyTop]);
	  }
  break;
case 705:
#line 4622 "cs-parser.jay"
  {
		if (yyVals[0+yyTop] != null && (Block) yyVals[0+yyTop] != current_block){
			current_block.AddStatement ((Statement) yyVals[0+yyTop]);
			current_block = (Block) yyVals[0+yyTop];
		}
	  }
  break;
case 706:
#line 4629 "cs-parser.jay"
  {
		current_block.AddStatement ((Statement) yyVals[0+yyTop]);
	  }
  break;
case 735:
#line 4670 "cs-parser.jay"
  {
		  Report.Error (1023, GetLocation (yyVals[0+yyTop]), "An embedded statement may not be a declaration or labeled statement");
		  yyVal = null;
	  }
  break;
case 736:
#line 4675 "cs-parser.jay"
  {
		  Report.Error (1023, GetLocation (yyVals[0+yyTop]), "An embedded statement may not be a declaration or labeled statement");
		  yyVal = null;
	  }
  break;
case 737:
#line 4683 "cs-parser.jay"
  {
		yyVal = new EmptyStatement (GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 738:
#line 4690 "cs-parser.jay"
  {
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
		LabeledStatement labeled = new LabeledStatement (lt.Value, lt.Location);

		if (current_block.AddLabel (labeled))
			current_block.AddStatement (labeled);
	  }
  break;
case 740:
#line 4702 "cs-parser.jay"
  {
		if (yyVals[-1+yyTop] != null){
			var de = (Tuple<FullNamedExpression, List<object>>) yyVals[-1+yyTop];
			yyVal = declare_local_variables (de.Item1, de.Item2, de.Item1.Location);
		}
	  }
  break;
case 741:
#line 4710 "cs-parser.jay"
  {
		if (yyVals[-1+yyTop] != null){
			var de = (Tuple<FullNamedExpression, List<object>>) yyVals[-1+yyTop];

			yyVal = declare_local_constants (de.Item1, de.Item2);
		}
	  }
  break;
case 742:
#line 4727 "cs-parser.jay"
  { 
		/* Ok, the above "primary_expression" is there to get rid of*/
		/* both reduce/reduce and shift/reduces in the grammar, it should*/
		/* really just be "type_name".  If you use type_name, a reduce/reduce*/
		/* creeps up.  If you use namespace_or_type_name (which is all we need*/
		/* really) two shift/reduces appear.*/
		/* */

		/* So the super-trick is that primary_expression*/
		/* can only be either a SimpleName or a MemberAccess. */
		/* The MemberAccess case arises when you have a fully qualified type-name like :*/
		/* Foo.Bar.Blah i;*/
		/* SimpleName is when you have*/
		/* Blah i;*/
		
		Expression expr = (Expression) yyVals[-1+yyTop];
		if (yyVals[0+yyTop] == null) {
			SimpleName sn = expr as SimpleName;
			if (sn != null && sn.Name == "var")
				yyVal = new VarExpr (sn.Location);
			else
				yyVal = yyVals[-1+yyTop];
		} else if (expr is ATypeNameExpression) {
			yyVal = new ComposedCast ((ATypeNameExpression)expr, (ComposedTypeSpecifier) yyVals[0+yyTop]);
		} else {
			Error_ExpectingTypeName (expr);
			yyVal = null;
		}
	  }
  break;
case 743:
#line 4757 "cs-parser.jay"
  {
		if (yyVals[0+yyTop] == null)
			yyVal = yyVals[-1+yyTop];
		else
			yyVal = new ComposedCast ((FullNamedExpression) yyVals[-1+yyTop], (ComposedTypeSpecifier) yyVals[0+yyTop]);
	  }
  break;
case 744:
#line 4764 "cs-parser.jay"
  {
		Expression.Error_VoidInvalidInTheContext (GetLocation (yyVals[-1+yyTop]), Report);
		yyVal = new TypeExpression (TypeManager.void_type, GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 745:
#line 4772 "cs-parser.jay"
  {
		ATypeNameExpression expr = yyVals[-1+yyTop] as ATypeNameExpression;

		if (expr != null) {
			yyVal = new ComposedCast (expr, ComposedTypeSpecifier.CreatePointer (GetLocation (yyVals[0+yyTop])));
		} else {
			Error_ExpectingTypeName ((Expression)yyVals[-1+yyTop]);
			yyVal = expr;
		}
	  }
  break;
case 746:
#line 4783 "cs-parser.jay"
  {
		yyVal = new ComposedCast ((FullNamedExpression) yyVals[-1+yyTop], ComposedTypeSpecifier.CreatePointer (GetLocation (yyVals[0+yyTop])));
	  }
  break;
case 747:
#line 4787 "cs-parser.jay"
  {
		yyVal = new ComposedCast (new TypeExpression (TypeManager.void_type, GetLocation (yyVals[-1+yyTop])), ComposedTypeSpecifier.CreatePointer (GetLocation (yyVals[0+yyTop])));
	  }
  break;
case 748:
#line 4791 "cs-parser.jay"
  {
		yyVal = new ComposedCast ((FullNamedExpression) yyVals[-1+yyTop], ComposedTypeSpecifier.CreatePointer (GetLocation (yyVals[0+yyTop])));
	  }
  break;
case 750:
#line 4799 "cs-parser.jay"
  {
		if (yyVals[-1+yyTop] != null){
			if (yyVals[0+yyTop] == null)
				yyVal = yyVals[-1+yyTop];
			else
				yyVal = new ComposedCast ((FullNamedExpression) yyVals[-1+yyTop], (ComposedTypeSpecifier) yyVals[0+yyTop]);
		} else {
			yyVal = null;
		}
	  }
  break;
case 751:
#line 4813 "cs-parser.jay"
  {
		if (yyVals[-1+yyTop] != null) {
			VarExpr ve = yyVals[-1+yyTop] as VarExpr;
			if (ve != null) {
				if (!((VariableDeclaration) ((List<object>)yyVals[0+yyTop]) [0]).HasInitializer)
					ve.VariableInitializersCount = 0;
				else
					ve.VariableInitializersCount = ((List<object>)yyVals[0+yyTop]).Count;
			}
				
			yyVal = new Tuple<FullNamedExpression, List<object>> ((FullNamedExpression) yyVals[-1+yyTop], (List<object>) yyVals[0+yyTop]);
		} else
			yyVal = null;
	  }
  break;
case 752:
#line 4831 "cs-parser.jay"
  {
		if (yyVals[-1+yyTop] != null)
			yyVal = new Tuple<FullNamedExpression, List<object>> ((FullNamedExpression) yyVals[-1+yyTop], (List<object>) yyVals[0+yyTop]);
		else
			yyVal = null;
	  }
  break;
case 753:
#line 4841 "cs-parser.jay"
  {
  	  	variables_bucket.Clear ();
		if (yyVals[0+yyTop] != null)
			variables_bucket.Add (yyVals[0+yyTop]);
		yyVal = variables_bucket;
	  }
  break;
case 754:
#line 4848 "cs-parser.jay"
  {
		if (yyVals[0+yyTop] != null) {
			var constants = (List<object>) yyVals[-2+yyTop];
			constants.Add (yyVals[0+yyTop]);
		}
	  }
  break;
case 755:
#line 4858 "cs-parser.jay"
  {
		yyVal = new VariableDeclaration ((Tokenizer.LocatedToken) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
	  }
  break;
case 756:
#line 4862 "cs-parser.jay"
  {
		Report.Error (145, GetLocation (yyVals[-1+yyTop]), "A const field requires a value to be provided");
		yyVal = null;
	  }
  break;
case 757:
#line 4870 "cs-parser.jay"
  {
		yyVal = yyVals[-1+yyTop];
		lbag.AddStatement (yyVal, GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 758:
#line 4874 "cs-parser.jay"
  { yyVal = yyVals[-1+yyTop]; }
  break;
case 759:
#line 4878 "cs-parser.jay"
  { yyVal = yyVals[-1+yyTop]; }
  break;
case 760:
#line 4879 "cs-parser.jay"
  { yyVal = yyVals[-1+yyTop]; }
  break;
case 761:
#line 4888 "cs-parser.jay"
  {
		ExpressionStatement s = yyVals[0+yyTop] as ExpressionStatement;
		if (s == null) {
			Expression.Error_InvalidExpressionStatement (Report, GetLocation (yyVals[0+yyTop]));
			s = EmptyExpressionStatement.Instance;
		}

		yyVal = new StatementExpression (s);
	  }
  break;
case 762:
#line 4898 "cs-parser.jay"
  {
		Error_SyntaxError (yyToken);
		yyVal = null;
	  }
  break;
case 763:
#line 4906 "cs-parser.jay"
  {
		Expression expr = (Expression) yyVals[0+yyTop];
		ExpressionStatement s;

	        s = new OptionalAssign (new SimpleName ("$retval", lexer.Location), expr, lexer.Location);
		yyVal = new StatementExpression (s);
	  }
  break;
case 764:
#line 4914 "cs-parser.jay"
  {
		Error_SyntaxError (yyToken);
		yyVal = new EmptyStatement (GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 767:
#line 4928 "cs-parser.jay"
  { 
		if (yyVals[0+yyTop] is EmptyStatement)
			Report.Warning (642, 3, GetLocation (yyVals[0+yyTop]), "Possible mistaken empty statement");
		
		yyVal = new If ((BooleanExpression) yyVals[-2+yyTop], (Statement) yyVals[0+yyTop], GetLocation (yyVals[-4+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 768:
#line 4937 "cs-parser.jay"
  {
		yyVal = new If ((BooleanExpression) yyVals[-4+yyTop], (Statement) yyVals[-2+yyTop], (Statement) yyVals[0+yyTop], GetLocation (yyVals[-6+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-5+yyTop]), GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[-1+yyTop]));
		
		if (yyVals[-2+yyTop] is EmptyStatement)
			Report.Warning (642, 3, GetLocation (yyVals[-2+yyTop]), "Possible mistaken empty statement");
		if (yyVals[0+yyTop] is EmptyStatement)
			Report.Warning (642, 3, GetLocation (yyVals[0+yyTop]), "Possible mistaken empty statement");
	  }
  break;
case 769:
#line 4950 "cs-parser.jay"
  { 
		if (switch_stack == null)
			switch_stack = new Stack<Block> (2);
		switch_stack.Push (current_block);
	  }
  break;
case 770:
#line 4957 "cs-parser.jay"
  {
		yyVal = new Switch ((Expression) yyVals[-4+yyTop], (List<SwitchSection>) yyVals[-1+yyTop], GetLocation (yyVals[-7+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-6+yyTop]), GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
		
		current_block = (Block) switch_stack.Pop ();
	  }
  break;
case 771:
#line 4967 "cs-parser.jay"
  {
		Report.Warning (1522, 1, lexer.Location, "Empty switch block"); 
		yyVal = new List<SwitchSection> ();
	  }
  break;
case 773:
#line 4976 "cs-parser.jay"
  {
		var sections = new List<SwitchSection> (4);

		sections.Add ((SwitchSection) yyVals[0+yyTop]);
		yyVal = sections;
	  }
  break;
case 774:
#line 4983 "cs-parser.jay"
  {
		var sections = (List<SwitchSection>) yyVals[-1+yyTop];

		sections.Add ((SwitchSection) yyVals[0+yyTop]);
		yyVal = sections;
	  }
  break;
case 775:
#line 4993 "cs-parser.jay"
  {
		current_block = current_block.CreateSwitchBlock (lexer.Location);
	  }
  break;
case 776:
#line 4997 "cs-parser.jay"
  {
		yyVal = new SwitchSection ((List<SwitchLabel>) yyVals[-2+yyTop], current_block.Explicit);
	  }
  break;
case 777:
#line 5004 "cs-parser.jay"
  {
		var labels = new List<SwitchLabel> (4);

		labels.Add ((SwitchLabel) yyVals[0+yyTop]);
		yyVal = labels;
	  }
  break;
case 778:
#line 5011 "cs-parser.jay"
  {
		var labels = (List<SwitchLabel>) (yyVals[-1+yyTop]);
		labels.Add ((SwitchLabel) yyVals[0+yyTop]);

		yyVal = labels;
	  }
  break;
case 779:
#line 5021 "cs-parser.jay"
  {
	 	yyVal = new SwitchLabel ((Expression) yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));
	 	lbag.AddLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	 }
  break;
case 780:
#line 5026 "cs-parser.jay"
  {
		yyVal = new SwitchLabel (null, GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 785:
#line 5040 "cs-parser.jay"
  {
		yyVal = new While ((BooleanExpression) yyVals[-2+yyTop], (Statement) yyVals[0+yyTop], GetLocation (yyVals[-4+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 786:
#line 5049 "cs-parser.jay"
  {
		yyVal = new Do ((Statement) yyVals[-5+yyTop], (BooleanExpression) yyVals[-2+yyTop], GetLocation (yyVals[-6+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-4+yyTop]), GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[-1+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 787:
#line 5057 "cs-parser.jay"
  {
		Location l = lexer.Location;
		start_block (l);  
		current_block.IsGenerated = true;
		Block assign_block = current_block;

		if (yyVals[-1+yyTop] is Tuple<FullNamedExpression, List<object>>){
			var de = (Tuple<FullNamedExpression, List<object>>) yyVals[-1+yyTop];
			
			var type = de.Item1;

			foreach (VariableDeclaration decl in de.Item2){

				LocalInfo vi;

				vi = current_block.AddVariable (type, decl.identifier, decl.Location);
				if (vi == null)
					continue;

				Expression expr = decl.GetInitializer (type);
					
				LocalVariableReference var;
				var = new LocalVariableReference (assign_block, decl.identifier, l);

				if (expr != null) {
					Assign a = new SimpleAssign (var, expr, decl.Location);
					
					assign_block.AddStatement (new StatementExpression (a));
				}
			}
			
			/* Note: the $$ below refers to the value of this code block, not of the LHS non-terminal.*/
			/* This can be referred to as $5 below.*/
			yyVal = null;
		} else {
			yyVal = yyVals[-1+yyTop];
		}
	  }
  break;
case 788:
#line 5098 "cs-parser.jay"
  {
		For f = new For ((Statement) yyVals[-5+yyTop], (BooleanExpression) yyVals[-4+yyTop], (Statement) yyVals[-2+yyTop], (Statement) yyVals[0+yyTop], GetLocation (yyVals[-9+yyTop]));
		current_block.AddStatement (f);
		
		lbag.AddStatement (f, GetLocation (yyVals[-8+yyTop]), GetLocation (yyVals[-6+yyTop]), GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[-1+yyTop]));

		yyVal = end_block (lexer.Location);
	  }
  break;
case 789:
#line 5109 "cs-parser.jay"
  { yyVal = new EmptyStatement (lexer.Location); }
  break;
case 793:
#line 5119 "cs-parser.jay"
  { yyVal = null; }
  break;
case 795:
#line 5124 "cs-parser.jay"
  { yyVal = new EmptyStatement (lexer.Location); }
  break;
case 799:
#line 5135 "cs-parser.jay"
  {
	  	var sl = yyVals[-2+yyTop] as StatementList;
	  	if (sl == null)
	  		sl = new StatementList ((Statement) yyVals[-2+yyTop], (Statement) yyVals[0+yyTop]);
	  	else
	  		sl.Add ((Statement) yyVals[0+yyTop]);
	  		
		lbag.AddStatement (sl, GetLocation (yyVals[-1+yyTop]));
		yyVal = sl;
	  }
  break;
case 800:
#line 5149 "cs-parser.jay"
  {
		Report.Error (230, GetLocation (yyVals[-5+yyTop]), "Type and identifier are both required in a foreach statement");
		yyVal = null;
	  }
  break;
case 801:
#line 5155 "cs-parser.jay"
  {
		start_block (lexer.Location);
		current_block.IsGenerated = true;
		Block foreach_block = current_block;

		var lt = (Tokenizer.LocatedToken) yyVals[-3+yyTop];
		Location l = lt.Location;
		LocalInfo vi = foreach_block.AddVariable ((Expression) yyVals[-4+yyTop], lt.Value, l);
		if (vi != null) {
			vi.SetReadOnlyContext (LocalInfo.ReadOnlyContext.Foreach);

			/* Get a writable reference to this read-only variable.*/
			/**/
			/* Note that the $$ here refers to the value of _this_ code block,*/
			/* not the value of the LHS non-terminal.  This can be referred to as $8 below.*/
			yyVal = new LocalVariableReference (foreach_block, lt.Value, l, vi, false);
		} else {
			yyVal = null;
		}
	  }
  break;
case 802:
#line 5176 "cs-parser.jay"
  {
		if (yyVals[-1+yyTop] != null) {
			Foreach f = new Foreach ((Expression) yyVals[-6+yyTop], (LocalVariableReference) yyVals[-1+yyTop], (Expression) yyVals[-3+yyTop], (Statement) yyVals[0+yyTop], GetLocation (yyVals[-8+yyTop]));
			lbag.AddStatement (f, GetLocation (yyVals[-7+yyTop]), GetLocation (yyVals[-4+yyTop]), GetLocation (yyVals[-2+yyTop]));
			
			current_block.AddStatement (f);
		}

		yyVal = end_block (lexer.Location);
	  }
  break;
case 809:
#line 5199 "cs-parser.jay"
  {
		yyVal = new Break (GetLocation (yyVals[-1+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 810:
#line 5207 "cs-parser.jay"
  {
		yyVal = new Continue (GetLocation (yyVals[-1+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 811:
#line 5215 "cs-parser.jay"
  {
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
		yyVal = new Goto (lt.Value, lt.Location);
		lbag.AddStatement (yyVal, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 812:
#line 5221 "cs-parser.jay"
  {
		yyVal = new GotoCase ((Expression) yyVals[-1+yyTop], GetLocation (yyVals[-3+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 813:
#line 5226 "cs-parser.jay"
  {
		yyVal = new GotoDefault (GetLocation (yyVals[-2+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-1+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 814:
#line 5234 "cs-parser.jay"
  {
		yyVal = new Return ((Expression) yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 815:
#line 5242 "cs-parser.jay"
  {
		yyVal = new Throw ((Expression) yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 816:
#line 5250 "cs-parser.jay"
  {
		var lt = (Tokenizer.LocatedToken) yyVals[-3+yyTop];
		string s = lt.Value;
		if (s != "yield"){
			Report.Error (1003, lt.Location, "; expected");
		} else if (yyVals[-1+yyTop] == null) {
			Report.Error (1627, GetLocation (yyVals[0+yyTop]), "Expression expected after yield return");
		} else if (RootContext.Version == LanguageVersion.ISO_1){
			Report.FeatureIsNotAvailable (lt.Location, "iterators");
		}
		
		current_block.Toplevel.IsIterator = true;
		yyVal = new Yield ((Expression) yyVals[-1+yyTop], lt.Location);
		lbag.AddStatement (yyVal, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 817:
#line 5266 "cs-parser.jay"
  {
		var lt = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
		string s = lt.Value;
		if (s != "yield"){
			Report.Error (1003, lt.Location, "; expected");
		} else if (RootContext.Version == LanguageVersion.ISO_1){
			Report.FeatureIsNotAvailable (lt.Location, "iterators");
		}
		
		current_block.Toplevel.IsIterator = true;
		yyVal = new YieldBreak (lt.Location);
		lbag.AddStatement (yyVal, GetLocation (yyVals[-1+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 820:
#line 5288 "cs-parser.jay"
  {
		yyVal = new TryCatch ((Block) yyVals[-1+yyTop], (List<Catch>) yyVals[0+yyTop], GetLocation (yyVals[-2+yyTop]), false);
	  }
  break;
case 821:
#line 5292 "cs-parser.jay"
  {
		yyVal = new TryFinally ((Statement) yyVals[-2+yyTop], (Block) yyVals[0+yyTop], GetLocation (yyVals[-3+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 822:
#line 5297 "cs-parser.jay"
  {
		yyVal = new TryFinally (new TryCatch ((Block) yyVals[-3+yyTop], (List<Catch>) yyVals[-2+yyTop], GetLocation (yyVals[-4+yyTop]), true), (Block) yyVals[0+yyTop], GetLocation (yyVals[-4+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 823:
#line 5302 "cs-parser.jay"
  {
		Report.Error (1524, GetLocation (yyVals[-2+yyTop]), "Expected catch or finally");
		yyVal = null;
	  }
  break;
case 824:
#line 5310 "cs-parser.jay"
  {
		var l = new List<Catch> (2);

		l.Add ((Catch) yyVals[0+yyTop]);
		yyVal = l;
	  }
  break;
case 825:
#line 5317 "cs-parser.jay"
  {
		var l = (List<Catch>) yyVals[-1+yyTop];
		
		Catch c = (Catch) yyVals[0+yyTop];
		if (l [0].IsGeneral) {
			Report.Error (1017, c.loc, "Try statement already has an empty catch block");
		} else {
			if (c.IsGeneral)
				l.Insert (0, c);
			else
				l.Add (c);
		}
		
		yyVal = l;
	  }
  break;
case 826:
#line 5335 "cs-parser.jay"
  { yyVal = null; }
  break;
case 828:
#line 5341 "cs-parser.jay"
  {
		if (yyVals[0+yyTop] != null) {
			var cc = (Tuple<FullNamedExpression, Tokenizer.LocatedToken>) yyVals[0+yyTop];
			var lt = cc.Item2;

			if (lt != null){
				List<object> one = new List<object> (1);

				one.Add (new VariableDeclaration (lt, null));

				start_block (lexer.Location);
				current_block = declare_local_variables (cc.Item1, one, lt.Location);
			}
		}
	  }
  break;
case 829:
#line 5355 "cs-parser.jay"
  {
		Expression type = null;
		string id = null;
		Block var_block = null;

		if (yyVals[-2+yyTop] != null){
			var cc = (Tuple<FullNamedExpression, Tokenizer.LocatedToken>) yyVals[-2+yyTop];
			type = cc.Item1;
			var lt = cc.Item2;

			if (lt != null){
				id = lt.Value;
				var_block = end_block (lexer.Location);
			}
		}

		yyVal = new Catch (type, id, (Block) yyVals[0+yyTop], var_block, ((Block) yyVals[0+yyTop]).loc);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-3+yyTop]));
		lbag.AppendTo (yyVal, lbag.GetLocations (yyVals[-2+yyTop]));
	  }
  break;
case 830:
#line 5378 "cs-parser.jay"
  { yyVal = null; }
  break;
case 832:
#line 5384 "cs-parser.jay"
  {
		yyVal = new Tuple<FullNamedExpression, Tokenizer.LocatedToken> ((FullNamedExpression)yyVals[-2+yyTop], (Tokenizer.LocatedToken) yyVals[-1+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 833:
#line 5389 "cs-parser.jay"
  {
		Report.Error (1015, GetLocation (yyVals[-1+yyTop]), "A type that derives from `System.Exception', `object', or `string' expected");
		yyVal = null;
	  }
  break;
case 834:
#line 5397 "cs-parser.jay"
  {
		yyVal = new Checked ((Block) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 835:
#line 5404 "cs-parser.jay"
  {
		yyVal = new Unchecked ((Block) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 836:
#line 5411 "cs-parser.jay"
  {
		if (!RootContext.Unsafe)
			Error_UnsafeCodeNotAllowed (GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 837:
#line 5414 "cs-parser.jay"
  {
		yyVal = new Unsafe ((Block) yyVals[0+yyTop], GetLocation (yyVals[-2+yyTop]));
	  }
  break;
case 838:
#line 5423 "cs-parser.jay"
  {
		start_block (lexer.Location);
	  }
  break;
case 839:
#line 5427 "cs-parser.jay"
  {
		Expression type = (Expression) yyVals[-4+yyTop];
	  	var list = (List<KeyValuePair<Tokenizer.LocatedToken, Expression>>) yyVals[-3+yyTop];
		Fixed f = new Fixed (type,
			list.ConvertAll (i => {
				var v = new KeyValuePair<LocalInfo, Expression> (current_block.AddVariable (type, i.Key.Value, i.Key.Location), i.Value);
				if (v.Key != null) {
					v.Key.SetReadOnlyContext (LocalInfo.ReadOnlyContext.Fixed);
					v.Key.Pinned = true;
				}
				return v;
			}), (Statement) yyVals[0+yyTop], GetLocation (yyVals[-6+yyTop]));

		lbag.AddStatement (f, GetLocation (yyVals[-5+yyTop]), GetLocation (yyVals[-2+yyTop]));

		current_block.AddStatement (f);

		yyVal = end_block (lexer.Location);
	  }
  break;
case 840:
#line 5449 "cs-parser.jay"
  { 
	   	var declarators = new List<KeyValuePair<Tokenizer.LocatedToken, Expression>> (2);
	   	if (yyVals[0+yyTop] != null)
			declarators.Add ((KeyValuePair<Tokenizer.LocatedToken, Expression>)yyVals[0+yyTop]);
		yyVal = declarators;
	  }
  break;
case 841:
#line 5456 "cs-parser.jay"
  {
		var declarators = (List<KeyValuePair<Tokenizer.LocatedToken, Expression>>) yyVals[-2+yyTop];
		if (yyVals[0+yyTop] != null)
			declarators.Add ((KeyValuePair<Tokenizer.LocatedToken, Expression>)yyVals[0+yyTop]);
		yyVal = declarators;
	  }
  break;
case 842:
#line 5466 "cs-parser.jay"
  {
		var lt = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
		yyVal = new KeyValuePair<Tokenizer.LocatedToken, Expression> (lt, (Expression) yyVals[0+yyTop]);
	  }
  break;
case 843:
#line 5471 "cs-parser.jay"
  {
		Report.Error (210, ((Tokenizer.LocatedToken) yyVals[0+yyTop]).Location, "You must provide an initializer in a fixed or using statement declaration");
		yyVal = null;
	  }
  break;
case 844:
#line 5479 "cs-parser.jay"
  {
		yyVal = new Lock ((Expression) yyVals[-2+yyTop], (Statement) yyVals[0+yyTop], GetLocation (yyVals[-4+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 845:
#line 5487 "cs-parser.jay"
  {
		start_block (lexer.Location);
		Block assign_block = current_block;
		assign_block.IsGenerated = true;

		var de = (Tuple<FullNamedExpression, List<object>>) yyVals[-1+yyTop];
		Location l = GetLocation (yyVals[-3+yyTop]);

		var vars = new Stack<Tuple<LocalVariableReference, Expression>> ();

		lbag.AddStatement (assign_block, GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));

		foreach (VariableDeclaration decl in de.Item2) {
			LocalInfo vi = current_block.AddVariable (de.Item1, decl.identifier, decl.Location);
			if (vi == null)
				continue;
			vi.SetReadOnlyContext (LocalInfo.ReadOnlyContext.Using);

			Expression expr = decl.GetInitializer (de.Item1);
			if (expr == null) {
				Report.Error (210, l, "You must provide an initializer in a fixed or using statement declaration");
				continue;
			}
			LocalVariableReference var;

			/* Get a writable reference to this read-only variable.*/
			var = new LocalVariableReference (assign_block, decl.identifier, l, vi, false);

			/* This is so that it is not a warning on using variables*/
			vi.Used = true;

			vars.Push (new Tuple<LocalVariableReference, Expression> (var, expr));

			/* Assign a = new SimpleAssign (var, expr, decl.Location);*/
			/* assign_block.AddStatement (new StatementExpression (a));*/
		}

		/* Note: the $$ here refers to the value of this code block and not of the LHS non-terminal.*/
		/* It can be referred to as $5 below.*/
		yyVal = vars;
	  }
  break;
case 846:
#line 5529 "cs-parser.jay"
  {
		Statement stmt = (Statement) yyVals[0+yyTop];
		var vars = (Stack<Tuple<LocalVariableReference, Expression>>) yyVals[-1+yyTop];
		Location l = GetLocation (yyVals[-5+yyTop]);

		while (vars.Count > 0) {
			  var de = vars.Pop ();
			  stmt = new Using (de.Item1, de.Item2, stmt, l);
		}
		current_block.AddStatement (stmt);
		yyVal = end_block (lexer.Location);
	  }
  break;
case 847:
#line 5542 "cs-parser.jay"
  {
		start_block (lexer.Location);
	  }
  break;
case 848:
#line 5546 "cs-parser.jay"
  {
		UsingTemporary usingTemporary = new UsingTemporary ((Expression) yyVals[-3+yyTop], (Statement) yyVals[0+yyTop], GetLocation (yyVals[-5+yyTop]));
		lbag.AddStatement (usingTemporary, GetLocation (yyVals[-4+yyTop]), GetLocation (yyVals[-2+yyTop]));
		current_block.AddStatement (usingTemporary);
		yyVal = end_block (lexer.Location);
	  }
  break;
case 849:
#line 5559 "cs-parser.jay"
  {
		lexer.query_parsing = false;
			
		Linq.AQueryClause from = yyVals[-1+yyTop] as Linq.AQueryClause;
			
		from.Tail.Next = (Linq.AQueryClause)yyVals[0+yyTop];
		yyVal = from;
		
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
	  }
  break;
case 850:
#line 5571 "cs-parser.jay"
  {
		Linq.AQueryClause from = yyVals[-1+yyTop] as Linq.AQueryClause;
			
		from.Tail.Next = (Linq.AQueryClause)yyVals[0+yyTop];
		yyVal = from;
		
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
	  }
  break;
case 851:
#line 5582 "cs-parser.jay"
  {
	        lexer.query_parsing = false;
		yyVal = yyVals[-1+yyTop];

		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
	  }
  break;
case 852:
#line 5589 "cs-parser.jay"
  {
	        yyVal = yyVals[-1+yyTop];
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
	  }
  break;
case 853:
#line 5598 "cs-parser.jay"
  {
		current_block = new Linq.QueryBlock (compiler, current_block, lexer.Location);
	  
		var lt = (Tokenizer.LocatedToken) yyVals[-2+yyTop];	  
		yyVal = new Linq.QueryExpression (new Linq.QueryStartClause ((Linq.QueryBlock)current_block, (Expression)yyVals[0+yyTop], new SimpleMemberName (lt.Value, lt.Location), GetLocation (yyVals[-3+yyTop])));
	  }
  break;
case 854:
#line 5605 "cs-parser.jay"
  {
		current_block = new Linq.QueryBlock (compiler, current_block, lexer.Location);
	  
		var lt = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
		yyVal = new Linq.QueryExpression (
			new Linq.QueryStartClause ((Linq.QueryBlock)current_block, (Expression)yyVals[0+yyTop], new SimpleMemberName (lt.Value, lt.Location), GetLocation (yyVals[-4+yyTop])) {
				IdentifierType = (FullNamedExpression)yyVals[-3+yyTop]
			}
		);
	  }
  break;
case 855:
#line 5619 "cs-parser.jay"
  {
		current_block = new Linq.QueryBlock (compiler, current_block, lexer.Location);
	  
		var lt = (Tokenizer.LocatedToken) yyVals[-2+yyTop];	  
		yyVal = new Linq.QueryExpression (new Linq.QueryStartClause ((Linq.QueryBlock)current_block, (Expression)yyVals[0+yyTop], new SimpleMemberName (lt.Value, lt.Location), GetLocation (yyVals[-3+yyTop])));
	  }
  break;
case 856:
#line 5626 "cs-parser.jay"
  {
		current_block = new Linq.QueryBlock (compiler, current_block, lexer.Location);
	  
		var lt = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
		yyVal = new Linq.QueryExpression (
			new Linq.QueryStartClause ((Linq.QueryBlock)current_block, (Expression)yyVals[0+yyTop], new SimpleMemberName (lt.Value, lt.Location), GetLocation (yyVals[-4+yyTop])) {
				IdentifierType = (FullNamedExpression)yyVals[-3+yyTop]
			}
		);
	  }
  break;
case 857:
#line 5640 "cs-parser.jay"
  {
		current_block = new Linq.QueryBlock (compiler, current_block, lexer.Location);
	  }
  break;
case 858:
#line 5644 "cs-parser.jay"
  {
		var lt = (Tokenizer.LocatedToken) yyVals[-3+yyTop];
		var sn = new SimpleMemberName (lt.Value, lt.Location);
		yyVal = new Linq.SelectMany ((Linq.QueryBlock)current_block, sn, (Expression)yyVals[0+yyTop], GetLocation (yyVals[-4+yyTop]));
		
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
		
		((Linq.QueryBlock)current_block).AddRangeVariable (sn);
	  }
  break;
case 859:
#line 5655 "cs-parser.jay"
  {
		current_block = new Linq.QueryBlock (compiler, current_block, lexer.Location);
	  }
  break;
case 860:
#line 5659 "cs-parser.jay"
  {
		var lt = (Tokenizer.LocatedToken) yyVals[-3+yyTop];
		var sn = new SimpleMemberName (lt.Value, lt.Location);

		yyVal = new Linq.SelectMany ((Linq.QueryBlock)current_block, sn, (Expression)yyVals[0+yyTop], GetLocation (yyVals[-5+yyTop])) {
			IdentifierType = (FullNamedExpression)yyVals[-4+yyTop]
		};
		
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
		
		((Linq.QueryBlock)current_block).AddRangeVariable (sn);
	  }
  break;
case 861:
#line 5676 "cs-parser.jay"
  {
	  	Linq.AQueryClause head = (Linq.AQueryClause)yyVals[-1+yyTop];
		
		if (yyVals[0+yyTop] != null)
			head.Next = (Linq.AQueryClause)yyVals[0+yyTop];
				
		if (yyVals[-2+yyTop] != null) {
			Linq.AQueryClause clause = (Linq.AQueryClause)yyVals[-2+yyTop];
			clause.Tail.Next = head;
			head = clause;
		}
		
		yyVal = head;
	  }
  break;
case 863:
#line 5695 "cs-parser.jay"
  {
	  	current_block = new Linq.QueryBlock (compiler, current_block, lexer.Location);
	  }
  break;
case 864:
#line 5699 "cs-parser.jay"
  {
		yyVal = new Linq.Select ((Linq.QueryBlock)current_block, (Expression)yyVals[0+yyTop], GetLocation (yyVals[-2+yyTop]));

		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
	  }
  break;
case 865:
#line 5706 "cs-parser.jay"
  {
	  	if (linq_clause_blocks == null)
	  		linq_clause_blocks = new Stack<Linq.QueryBlock> ();
	  		
	  	current_block = new Linq.QueryBlock (compiler, current_block, lexer.Location);
	  	linq_clause_blocks.Push ((Linq.QueryBlock)current_block);
	  }
  break;
case 866:
#line 5714 "cs-parser.jay"
  {
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
	  
		current_block = new Linq.QueryBlock (compiler, current_block, lexer.Location);
	  }
  break;
case 867:
#line 5721 "cs-parser.jay"
  {
		yyVal = new Linq.GroupBy ((Linq.QueryBlock)current_block, (Expression)yyVals[-3+yyTop], linq_clause_blocks.Pop (), (Expression)yyVals[0+yyTop], GetLocation (yyVals[-5+yyTop]));
		
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
	  }
  break;
case 871:
#line 5737 "cs-parser.jay"
  {
		((Linq.AQueryClause)yyVals[-1+yyTop]).Tail.Next = (Linq.AQueryClause)yyVals[0+yyTop];
		yyVal = yyVals[-1+yyTop];
	  }
  break;
case 877:
#line 5753 "cs-parser.jay"
  {
	  	current_block = new Linq.QueryBlock (compiler, current_block, lexer.Location);
	  }
  break;
case 878:
#line 5757 "cs-parser.jay"
  {
		var lt = (Tokenizer.LocatedToken) yyVals[-3+yyTop];
		var sn = new SimpleMemberName (lt.Value, lt.Location);
	  	yyVal = new Linq.Let ((Linq.QueryBlock) current_block, sn, (Expression)yyVals[0+yyTop], GetLocation (yyVals[-4+yyTop]));
	  	
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
		
		((Linq.QueryBlock)current_block).AddRangeVariable (sn);
	  }
  break;
case 879:
#line 5771 "cs-parser.jay"
  {
	  	current_block = new Linq.QueryBlock (compiler, current_block, lexer.Location);
	  }
  break;
case 880:
#line 5775 "cs-parser.jay"
  {
		yyVal = new Linq.Where ((Linq.QueryBlock)current_block, (BooleanExpression)yyVals[0+yyTop], GetLocation (yyVals[-2+yyTop]));

		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
	  }
  break;
case 881:
#line 5785 "cs-parser.jay"
  {
		if (linq_clause_blocks == null)
			linq_clause_blocks = new Stack<Linq.QueryBlock> ();
	  		
		current_block = new Linq.QueryBlock (compiler, current_block, lexer.Location);
		linq_clause_blocks.Push ((Linq.QueryBlock) current_block);
	  }
  break;
case 882:
#line 5793 "cs-parser.jay"
  {
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;

		current_block = new Linq.QueryBlock (compiler, current_block, lexer.Location);
		linq_clause_blocks.Push ((Linq.QueryBlock) current_block);
	  }
  break;
case 883:
#line 5801 "cs-parser.jay"
  {
		current_block.AddStatement (new ContextualReturn ((Expression) yyVals[-1+yyTop]));
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;

		current_block = new Linq.QueryBlock (compiler, current_block, lexer.Location);
	  }
  break;
case 884:
#line 5809 "cs-parser.jay"
  {
		var lt = (Tokenizer.LocatedToken) yyVals[-10+yyTop];
		var sn = new SimpleMemberName (lt.Value, lt.Location);
		SimpleMemberName sn2 = null;
		
		var outer_selector = linq_clause_blocks.Pop ();
		var block = linq_clause_blocks.Pop ();

		if (yyVals[0+yyTop] == null) {
	  		yyVal = new Linq.Join (block, sn, (Expression)yyVals[-7+yyTop], outer_selector, (Linq.QueryBlock) current_block, GetLocation (yyVals[-11+yyTop]));
		} else {
			var lt2 = (Tokenizer.LocatedToken) yyVals[0+yyTop];
			sn2 = new SimpleMemberName (lt2.Value, lt2.Location);
			yyVal = new Linq.GroupJoin (block, sn, (Expression)yyVals[-7+yyTop], outer_selector, (Linq.QueryBlock) current_block,
				sn2, GetLocation (yyVals[-11+yyTop]));
		}

		current_block.AddStatement (new ContextualReturn ((Expression) yyVals[-1+yyTop]));
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
			
		((Linq.QueryBlock)current_block).AddRangeVariable (sn2 ?? sn);
	  }
  break;
case 885:
#line 5833 "cs-parser.jay"
  {
		if (linq_clause_blocks == null)
			linq_clause_blocks = new Stack<Linq.QueryBlock> ();
	  		
		current_block = new Linq.QueryBlock (compiler, current_block, lexer.Location);
		linq_clause_blocks.Push ((Linq.QueryBlock) current_block);
	  }
  break;
case 886:
#line 5841 "cs-parser.jay"
  {
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;

		current_block = new Linq.QueryBlock (compiler, current_block, lexer.Location);
		linq_clause_blocks.Push ((Linq.QueryBlock) current_block);
	  }
  break;
case 887:
#line 5849 "cs-parser.jay"
  {
		current_block.AddStatement (new ContextualReturn ((Expression) yyVals[-1+yyTop]));
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;

		current_block = new Linq.QueryBlock (compiler, current_block, lexer.Location);
	  }
  break;
case 888:
#line 5857 "cs-parser.jay"
  {
		var lt = (Tokenizer.LocatedToken) yyVals[-10+yyTop];
		var sn = new SimpleMemberName (lt.Value, lt.Location);
		SimpleMemberName sn2 = null;
		var outer_selector = linq_clause_blocks.Pop ();
		var block = linq_clause_blocks.Pop ();
		
		if (yyVals[0+yyTop] == null) {
	  		yyVal = new Linq.Join (block, sn, (Expression)yyVals[-7+yyTop], outer_selector, (Linq.QueryBlock) current_block, GetLocation (yyVals[-12+yyTop])) {
	  			IdentifierType = (FullNamedExpression)yyVals[-11+yyTop]
	  		};
		} else {
			var lt2 = (Tokenizer.LocatedToken) yyVals[0+yyTop];
			sn2 = new SimpleMemberName (lt2.Value, lt2.Location);
			yyVal = new Linq.GroupJoin (block, sn, (Expression)yyVals[-7+yyTop], outer_selector, (Linq.QueryBlock) current_block, sn2, GetLocation (yyVals[-12+yyTop])) {
	  			IdentifierType = (FullNamedExpression)yyVals[-11+yyTop]
	  		};			
		}
		
		current_block.AddStatement (new ContextualReturn ((Expression) yyVals[-1+yyTop]));
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
			
		((Linq.QueryBlock)current_block).AddRangeVariable (sn2 ?? sn);
	  }
  break;
case 890:
#line 5887 "cs-parser.jay"
  {
		yyVal = yyVals[0+yyTop];
	  }
  break;
case 891:
#line 5894 "cs-parser.jay"
  {
		current_block = new Linq.QueryBlock (compiler, current_block, lexer.Location);
	  }
  break;
case 892:
#line 5898 "cs-parser.jay"
  {
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
	  
		yyVal = yyVals[0+yyTop];
	  }
  break;
case 894:
#line 5909 "cs-parser.jay"
  {
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
	  
		current_block = new Linq.QueryBlock (compiler, current_block, lexer.Location);
	  }
  break;
case 895:
#line 5916 "cs-parser.jay"
  {
		((Linq.AQueryClause)yyVals[-3+yyTop]).Next = (Linq.AQueryClause)yyVals[0+yyTop];
		yyVal = yyVals[-3+yyTop];
	  }
  break;
case 897:
#line 5925 "cs-parser.jay"
  {
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
	  
		current_block = new Linq.QueryBlock (compiler, (Linq.QueryBlock) current_block, lexer.Location);	 
	 }
  break;
case 898:
#line 5932 "cs-parser.jay"
  {
		((Linq.AQueryClause)yyVals[-3+yyTop]).Tail.Next = (Linq.AQueryClause)yyVals[0+yyTop];
		yyVal = yyVals[-3+yyTop];
	 }
  break;
case 899:
#line 5940 "cs-parser.jay"
  {
		yyVal = new Linq.OrderByAscending ((Linq.QueryBlock) current_block, (Expression)yyVals[0+yyTop]);	
	  }
  break;
case 900:
#line 5944 "cs-parser.jay"
  {
		yyVal = new Linq.OrderByAscending ((Linq.QueryBlock) current_block, (Expression)yyVals[-1+yyTop]);	
	  }
  break;
case 901:
#line 5948 "cs-parser.jay"
  {
		yyVal = new Linq.OrderByDescending ((Linq.QueryBlock) current_block, (Expression)yyVals[-1+yyTop]);	
	  }
  break;
case 902:
#line 5955 "cs-parser.jay"
  {
		yyVal = new Linq.ThenByAscending ((Linq.QueryBlock) current_block, (Expression)yyVals[0+yyTop]);	
	  }
  break;
case 903:
#line 5959 "cs-parser.jay"
  {
		yyVal = new Linq.ThenByAscending ((Linq.QueryBlock) current_block, (Expression)yyVals[-1+yyTop]);	
	  }
  break;
case 904:
#line 5963 "cs-parser.jay"
  {
		yyVal = new Linq.ThenByDescending ((Linq.QueryBlock) current_block, (Expression)yyVals[-1+yyTop]);	
	  }
  break;
case 906:
#line 5972 "cs-parser.jay"
  {
		/* query continuation block is not linked with query block but with block*/
		/* before. This means each query can use same range variable names for*/
		/* different identifiers.*/

		current_block.SetEndLocation (GetLocation (yyVals[-1+yyTop]));
		current_block = current_block.Parent;
	
		current_block = new Linq.QueryBlock (compiler, current_block, lexer.Location);
		
		if (linq_clause_blocks == null)
			linq_clause_blocks = new Stack<Linq.QueryBlock> ();
	  		
		linq_clause_blocks.Push ((Linq.QueryBlock) current_block);		
	  }
  break;
case 907:
#line 5988 "cs-parser.jay"
  {
		var current_block = linq_clause_blocks.Pop ();	  
		var lt = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
  		yyVal = new Linq.QueryStartClause ((Linq.QueryBlock)current_block, null, new SimpleMemberName (lt.Value, lt.Location), GetLocation (yyVals[-3+yyTop])) {
  			next = (Linq.AQueryClause)yyVals[0+yyTop]
  		};
	  }
  break;
case 910:
#line 6013 "cs-parser.jay"
  { 
	        Evaluator.LoadAliases (current_namespace);

		push_current_class (new Class (current_namespace, current_class, new MemberName ("Class" + class_count++),
			Modifiers.PUBLIC, null), null);

		var baseclass_list = new List<FullNamedExpression> ();
		baseclass_list.Add (new TypeExpression (Evaluator.InteractiveBaseClass, lexer.Location));
		current_container.AddBasesForPart (current_class, baseclass_list);

		/* (ref object retval)*/
		Parameter [] mpar = new Parameter [1];
		mpar [0] = new Parameter (new TypeExpression (TypeManager.object_type, Location.Null), "$retval", Parameter.Modifier.REF, null, Location.Null);

		ParametersCompiled pars = new ParametersCompiled (compiler, mpar);
		current_local_parameters = pars;
		Method method = new Method (
			current_class,
			null, /* generic*/
			new TypeExpression (TypeManager.void_type, Location.Null),
			Modifiers.PUBLIC | Modifiers.STATIC,
			new MemberName ("Host"),
			pars,
			null /* attributes */);

		oob_stack.Push (method);
	        ++lexer.parsing_block;
		start_block (lexer.Location);
	  }
  break;
case 911:
#line 6043 "cs-parser.jay"
  {
		--lexer.parsing_block;
		Method method = (Method) oob_stack.Pop ();

		method.Block = (ToplevelBlock) end_block(lexer.Location);
		current_container.AddMethod (method);

		--lexer.parsing_declaration;
		InteractiveResult = pop_current_class ();
		current_local_parameters = null;
	  }
  break;
case 912:
#line 6054 "cs-parser.jay"
  {
	        Evaluator.LoadAliases (current_namespace);
	  }
  break;
#line default
        }
        yyTop -= yyLen[yyN];
        yyState = yyStates[yyTop];
        int yyM = yyLhs[yyN];
        if (yyState == 0 && yyM == 0) {
          if (debug != null) debug.shift(0, yyFinal);
          yyState = yyFinal;
          if (yyToken < 0) {
            yyToken = yyLex.advance() ? yyLex.token() : 0;
            if (debug != null)
               debug.lex(yyState, yyToken,yyname(yyToken), yyLex.value());
          }
          if (yyToken == 0) {
            if (debug != null) debug.accept(yyVal);
            return yyVal;
          }
          goto continue_yyLoop;
        }
        if (((yyN = yyGindex[yyM]) != 0) && ((yyN += yyState) >= 0)
            && (yyN < yyTable.Length) && (yyCheck[yyN] == yyState))
          yyState = yyTable[yyN];
        else
          yyState = yyDgoto[yyM];
        if (debug != null) debug.shift(yyStates[yyTop], yyState);
	 goto continue_yyLoop;
      continue_yyDiscarded: continue;	// implements the named-loop continue: 'continue yyDiscarded'
      }
    continue_yyLoop: continue;		// implements the named-loop continue: 'continue yyLoop'
    }
  }

   static  short [] yyLhs  = {              -1,
    0,    0,    0,    0,    5,    0,    2,    2,    1,    1,
    6,    6,    6,   10,   10,    7,    7,   11,   11,    8,
    8,   12,   12,   13,   20,   16,   18,   18,   18,   21,
   21,   22,   22,   15,   24,   19,   23,   28,   23,   23,
   26,   26,   25,   25,   27,   27,   29,   29,    9,    9,
    9,    9,   30,   30,   30,   30,   30,    3,   17,   17,
   38,   38,   39,   39,   40,   42,   42,   42,   42,   41,
   41,   46,   43,   44,   45,   45,   47,   47,   47,   47,
   47,   48,   48,   52,   49,   51,   53,   53,   53,   54,
   54,   55,   55,   56,   56,   56,   56,   56,   56,   56,
   56,   56,   56,   56,   67,   69,   72,   73,   34,   34,
   75,   71,   74,   74,   76,   76,   77,   77,   77,   77,
   77,   77,   77,   77,   77,   77,   80,   57,   81,   81,
   82,   82,   83,   85,   79,   79,   84,   84,   90,   31,
   94,   31,   31,   89,   97,   89,   91,   91,   98,   98,
   99,  100,   99,   95,   95,  101,  101,  102,  103,   93,
   93,  104,  104,  105,  105,  105,  106,  106,  106,  106,
  106,  107,   96,   96,  111,   32,  114,  115,  109,  116,
  117,  109,  109,  110,  110,  113,  113,  120,  120,  120,
  120,  120,  120,  120,  120,  120,  121,  121,  124,  124,
  124,  127,  124,  125,  125,  128,  128,  129,  129,  129,
  122,  122,  122,  130,  130,  130,  123,  132,  134,  135,
   58,  137,  138,  139,   60,  133,  133,  133,  133,  133,
  143,  140,  144,  141,  142,  142,  142,  145,  146,  147,
  149,   35,   35,  148,  148,  150,  150,  151,  151,  151,
  151,  151,  151,  151,  151,  151,  154,   61,  153,  153,
  155,  155,  158,  152,  152,  157,  157,  157,  157,  157,
  157,  157,  157,  157,  157,  157,  157,  157,  157,  157,
  157,  157,  157,  157,  157,  157,  157,  160,  159,  161,
  159,  159,  159,   62,  164,  166,  162,  163,  163,  165,
  165,  170,  168,  171,  168,  168,  172,   63,  174,   59,
  177,  178,   59,  173,  180,  173,  175,  175,  181,  181,
  182,  183,  182,  184,  179,  176,  176,  176,  176,  176,
  188,  185,  189,  186,  187,  187,  191,  193,  194,   36,
  190,  190,  190,  192,  192,  192,  195,  195,  196,  197,
  196,  198,  199,  200,   37,  201,  201,   14,   14,  202,
  202,  205,  204,  204,  204,  206,  206,  208,   66,  131,
  112,  112,  136,  136,  209,  209,  209,  207,  207,  210,
  210,  211,  211,  213,  213,   88,   78,   78,   92,   92,
  126,  126,  156,  156,  214,  214,  214,  214,  217,  217,
  218,  218,  216,  216,  216,  216,  216,  216,  216,  219,
  219,  219,  219,  219,  219,  219,  219,  219,  220,  220,
  221,  221,  221,  221,  221,  221,  221,  221,  221,  221,
  221,  221,  221,  221,  221,  221,  221,  221,  221,  221,
  223,  223,  223,  241,  241,  242,  242,  243,  243,  224,
  224,  226,  226,  226,  226,  226,  226,  226,  226,  227,
  244,  244,  245,  245,  246,  246,  248,  248,  248,  249,
  249,  249,  249,  249,  250,  250,  169,  169,  254,  254,
  254,  254,  254,  256,  256,  255,  255,  257,  257,  257,
  257,  257,  258,  228,  253,  253,  253,  259,  259,  260,
  260,  229,  230,  230,  231,  232,  233,  233,  222,  222,
  222,  222,  222,  264,  261,  234,  265,  265,  266,  266,
  267,  267,  268,  268,  268,  268,  262,  262,  269,  269,
  215,  215,  270,  270,  271,  271,  263,  263,   87,   87,
  272,  272,  272,  273,  235,  274,  274,  274,  275,  275,
  275,  275,  275,  276,  203,  236,  237,  238,  239,  278,
  240,  277,  277,  280,  279,  225,  281,  281,  281,  281,
  283,  283,  282,  282,  282,  282,  282,  282,  282,  284,
  284,  284,  284,  285,  285,  285,  285,  285,  285,  286,
  286,  286,  287,  287,  287,  287,  287,  288,  288,  288,
  289,  289,  290,  290,  291,  291,  292,  292,  293,  293,
  294,  294,  295,  295,  296,  296,  296,  296,  296,  296,
  296,  296,  296,  296,  296,  297,  297,  298,  298,  298,
  299,  299,  301,  300,  300,  303,  302,  304,  305,  302,
   50,   50,  251,  251,  251,   86,  307,  308,  309,  310,
  311,   33,   65,   65,   64,   64,  118,  118,  312,  312,
  312,  312,  312,  312,  312,  312,  312,  312,  312,  312,
  312,  312,   68,   68,   70,   70,  313,  313,  314,  315,
  315,  316,  316,  316,  316,  212,  212,  317,  317,  319,
  119,  320,  320,  321,  167,  318,  318,  322,  322,  323,
  323,  323,  327,  327,  328,  328,  328,  325,  325,  325,
  325,  325,  325,  325,  325,  325,  325,  325,  325,  325,
  329,  329,  329,  329,  329,  329,  329,  329,  329,  329,
  329,  329,  329,  343,  343,  343,  330,  344,  326,  324,
  324,  347,  347,  347,  348,  348,  348,  348,  349,  349,
  345,  346,  350,  350,  351,  351,  331,  331,  342,  342,
  352,  352,  353,  353,  332,  332,  354,  354,  356,  355,
  357,  357,  358,  358,  361,  359,  360,  360,  362,  362,
  333,  333,  333,  333,  363,  364,  369,  365,  367,  367,
  371,  371,  368,  368,  370,  370,  373,  372,  372,  366,
  374,  366,  334,  334,  334,  334,  334,  334,  375,  376,
  377,  377,  377,  378,  379,  380,  380,  108,  108,  335,
  335,  335,  335,  381,  381,  383,  383,  385,  382,  384,
  384,  386,  386,  336,  337,  387,  340,  389,  341,  388,
  388,  390,  390,  338,  391,  339,  392,  339,  306,  306,
  306,  306,  393,  393,  395,  395,  397,  396,  398,  396,
  394,  394,  402,  400,  403,  404,  400,  399,  399,  405,
  405,  406,  406,  406,  406,  406,  411,  407,  412,  408,
  413,  414,  415,  409,  417,  418,  419,  409,  416,  416,
  421,  410,  420,  424,  420,  423,  426,  423,  422,  422,
  422,  425,  425,  425,  401,  427,  401,    4,    4,  428,
    4,  430,    4,  429,  429,  429,  429,  252,  252,  247,
  247,
  };
   static  short [] yyLen = {           2,
    2,    3,    2,    1,    0,    3,    0,    1,    1,    2,
    1,    1,    1,    1,    2,    4,    2,    1,    2,    1,
    1,    5,    2,    3,    0,    6,    1,    3,    1,    0,
    1,    0,    1,    1,    0,    3,    4,    0,    3,    4,
    0,    1,    0,    1,    0,    1,    1,    2,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    0,    1,
    1,    2,    5,    4,    2,    1,    1,    1,    1,    1,
    3,    0,    3,    1,    0,    3,    0,    1,    1,    3,
    3,    1,    1,    0,    4,    4,    0,    1,    1,    0,
    1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    0,    0,    0,    0,   13,    5,
    0,    4,    0,    1,    1,    2,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    0,    9,    0,    1,
    1,    2,    3,    0,    3,    1,    1,    1,    0,    8,
    0,    9,    6,    0,    0,    3,    0,    1,    1,    2,
    2,    0,    5,    0,    1,    1,    2,    3,    0,    4,
    2,    1,    3,    3,    1,    2,    1,    1,    5,    1,
    2,    3,    1,    1,    0,    3,    0,    0,   10,    0,
    0,   11,    8,    1,    1,    0,    1,    1,    3,    3,
    3,    5,    3,    5,    1,    1,    1,    3,    4,    6,
    4,    0,    7,    0,    1,    1,    2,    1,    1,    1,
    4,    6,    4,    1,    2,    2,    1,    0,    0,    0,
   10,    0,    0,    0,   13,    1,    2,    1,    2,    1,
    0,    5,    0,    5,    1,    1,    1,    0,    0,    0,
    0,   15,    5,    0,    1,    1,    2,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    0,    5,    1,    1,
    1,    1,    0,    7,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    0,    7,    0,
    7,    2,    2,    2,    0,    0,    9,    1,    1,    0,
    1,    0,    6,    0,    6,    2,    0,    8,    0,    9,
    0,    0,   10,    0,    0,    3,    0,    1,    1,    2,
    2,    0,    5,    0,    2,    2,    2,    1,    1,    1,
    0,    5,    0,    5,    1,    1,    0,    0,    0,   12,
    0,    2,    2,    0,    1,    2,    1,    3,    2,    0,
    5,    0,    0,    0,   13,    0,    1,    1,    3,    1,
    4,    2,    0,    3,    2,    1,    3,    0,    3,    1,
    1,    3,    1,    2,    3,    4,    4,    0,    3,    1,
    3,    3,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    2,    2,    2,    2,    2,    1,    3,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    2,    2,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    3,
    3,    4,    4,    4,    3,    3,    4,    3,    4,    4,
    0,    1,    3,    4,    0,    1,    1,    3,    2,    3,
    1,    2,    3,    2,    1,    1,    0,    1,    1,    3,
    3,    2,    2,    1,    1,    1,    1,    2,    2,    4,
    3,    1,    1,    4,    1,    3,    2,    1,    3,    1,
    1,    1,    4,    3,    2,    2,    6,    3,    7,    4,
    3,    7,    3,    0,    2,    4,    1,    2,    0,    1,
    1,    3,    3,    1,    1,    1,    0,    1,    1,    2,
    1,    2,    2,    3,    1,    2,    0,    1,    2,    4,
    1,    3,    1,    0,    5,    1,    1,    1,    2,    3,
    3,    4,    4,    1,    2,    4,    4,    4,    3,    0,
    4,    0,    1,    0,    4,    4,    1,    2,    2,    1,
    4,    4,    1,    2,    2,    2,    2,    2,    2,    1,
    3,    3,    3,    1,    3,    3,    3,    3,    3,    1,
    3,    3,    1,    3,    3,    3,    3,    1,    3,    3,
    1,    3,    1,    3,    1,    3,    1,    3,    1,    3,
    1,    3,    1,    5,    3,    3,    3,    3,    3,    3,
    3,    3,    3,    3,    3,    1,    3,    3,    2,    1,
    0,    1,    0,    2,    1,    0,    4,    0,    0,    7,
    1,    1,    1,    1,    1,    1,    1,    0,    0,    0,
    0,   15,    0,    1,    0,    1,    1,    2,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    0,    2,    0,    1,    1,    2,    4,    1,
    3,    1,    3,    1,    1,    0,    1,    1,    1,    0,
    4,    1,    1,    0,    4,    0,    1,    1,    2,    1,
    1,    1,    1,    2,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    0,    4,    2,
    2,    2,    2,    2,    2,    2,    2,    2,    1,    2,
    2,    3,    1,    3,    3,    2,    2,    2,    2,    2,
    1,    1,    1,    1,    1,    1,    5,    7,    0,    8,
    0,    1,    1,    2,    0,    3,    1,    2,    3,    1,
    1,    1,    1,    1,    5,    7,    0,   10,    0,    1,
    1,    1,    0,    1,    0,    1,    1,    1,    3,    6,
    0,    9,    1,    1,    1,    1,    1,    1,    2,    2,
    3,    4,    3,    3,    3,    4,    3,    0,    1,    3,
    4,    5,    3,    1,    2,    0,    1,    0,    4,    0,
    1,    4,    2,    2,    2,    0,    3,    0,    7,    1,
    3,    3,    1,    5,    0,    6,    0,    6,    2,    2,
    2,    2,    4,    5,    4,    5,    0,    5,    0,    6,
    3,    2,    0,    3,    0,    0,    6,    0,    1,    1,
    2,    1,    1,    1,    1,    1,    0,    5,    0,    3,
    0,    0,    0,   12,    0,    0,    0,   13,    0,    2,
    0,    3,    1,    0,    4,    1,    0,    4,    1,    2,
    2,    1,    2,    2,    0,    0,    4,    2,    2,    0,
    4,    0,    3,    1,    2,    1,    0,    0,    1,    1,
    1,
  };
   static  short [] yyDefRed = {            0,
    8,    0,    0,    0,    0,  912,    0,    0,    0,    4,
    0,    5,    9,   11,   12,   13,   20,   21,   50,    0,
   49,   51,   52,   53,   54,   55,   56,   57,    0,   61,
  175,   23,    0,    0,    0,  358,    0,  360,   17,    0,
   69,   67,   68,    0,    0,    0,    0,    0,   70,   72,
  908,    0,    0,   18,    0,    1,    0,   10,    3,    0,
  664,  670,  662,    0,  659,  669,  663,  661,  660,  667,
  665,  666,  672,  668,  671,    0,    0,  657,   62,    0,
    0,    0,  555,  362,    0,   24,    0,    0,    0,    0,
    0,    0,   65,    0,  764,    0,  405,    0,  411,  418,
    0,    0,    0,  406,    0,    0,    0,  408,  445,    0,
  407,    0,    0,    0,    0,  414,    0,  416,    0,  443,
  403,    0,  410,  412,    0,  404,    0,  502,    0,  444,
    0,  544,  415,  417,    0,  836,  413,    0,    0,    0,
    0,    0,  690,    0,  737,    0,    0,    0,    0,    0,
    0,    0,    0,  442,    0,  638,    0,  763,  721,    0,
    0,  409,    0,    0,  420,  421,    0,  425,  426,  427,
  428,  429,  430,  431,  432,  433,  434,  435,  436,  437,
  438,  439,  440,  441,  642,  573,    0,  570,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  643,
  641,  644,  645,  705,  707,    0,  703,  706,  722,  724,
  725,  726,  727,  728,  729,  730,  731,  732,  733,  723,
    0,    0,  749,    0,    0,    0,  765,  766,  781,  782,
  783,  784,  803,  804,  805,  806,  807,  808,    0,    0,
    0,  916,  913,   19,    2,    6,   29,   27,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  384,  386,    0,
    0,  658,  185,  176,  184,  365,    0,  366,  387,    0,
    0,    0,  359,   16,    0,   71,   64,    0,   73,    0,
    0,    0,  809,  446,  447,  834,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  424,    0,  810,    0,  564,
  560,  563,  762,  761,  708,  735,  734,  736,  709,  710,
  711,  712,  713,  714,  715,  716,  717,  718,  719,  720,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  819,    0,    0,
  419,    0,  769,    0,    0,    0,  835,    0,    0,    0,
  747,  528,  744,    0,    0,    0,    0,    0,    0,    0,
    0,  569,  574,  575,  568,  579,  578,  576,  577,    0,
    0,  636,  738,  423,  422,    0,    0,    0,  357,    0,
  746,    0,  743,    0,  505,  506,    0,    0,    0,  745,
  742,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  919,  911,  704,  740,  741,
  748,  750,    0,    0,  162,  759,  760,  879,    0,    0,
    0,  891,  851,  849,  872,    0,    0,  870,  873,  874,
  875,  876,  852,  850,  915,    0,    0,    0,  368,    0,
    0,    0,    0,  398,    0,  395,  648,    0,    0,    0,
  371,    0,    0,    0,    0,  397,  394,  396,  364,    0,
   22,  361,   63,    0,    0,   78,   79,   82,   83,  504,
    0,    0,  500,  501,    0,  498,    0,    0,    0,  753,
    0,    0,    0,    0,  757,  758,    0,  791,  798,    0,
  790,    0,    0,  646,    0,  813,  811,  647,    0,    0,
  526,    0,    0,    0,  517,    0,  521,  533,  535,    0,
    0,  511,  513,    0,    0,    0,    0,    0,  508,  515,
  532,  814,    0,    0,  815,  823,    0,    0,    0,  824,
    0,    0,  837,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  698,  700,  701,  702,  450,  451,    0,  817,
    0,    0,    0,  209,  208,  210,    0,    0,    0,    0,
  391,    0,  626,    0,    0,  455,    0,  458,  530,    0,
  456,  559,    0,    0,    0,    0,    0,  484,  487,    0,
    0,  479,  486,  485,  580,    0,  615,  616,  617,  618,
  619,  620,  621,  622,  623,  625,  624,  581,  583,  582,
  588,  589,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  612,    0,    0,
    0,  166,    0,    0,    0,    0,    0,    0,    0,    0,
  863,  865,  862,    0,  871,   28,   35,    0,    0,    0,
    0,  337,    0,  141,    0,    0,    0,  243,    0,  110,
    0,    0,    0,  177,    0,    0,    0,  367,    0,   84,
   76,    0,  454,  503,    0,  557,  756,    0,    0,  566,
  217,    0,    0,    0,  187,    0,    0,    0,  197,  561,
    0,    0,    0,  840,  787,    0,    0,    0,  812,    0,
    0,    0,  516,    0,  534,  536,  543,  539,  173,  174,
  541,    0,    0,    0,  471,    0,    0,  467,    0,    0,
  495,    0,  538,  510,    0,  556,    0,    0,  828,  831,
  821,    0,  825,  548,    0,    0,    0,  546,    0,    0,
  558,  847,  845,    0,  855,    0,  853,    0,  692,  693,
  691,  699,  572,  816,  635,  637,    0,  739,  629,    0,
    0,    0,  571,  459,  453,  457,  452,  494,  493,  489,
  488,    0,  483,  448,  449,  460,    0,    0,    0,  170,
  167,  168,  164,    0,  163,  880,  857,    0,  881,    0,
  877,    0,  892,    0,    0,    0,    0,  861,    0,   31,
   26,  352,    0,  369,  343,  342,    0,  143,    0,  180,
  649,  239,  106,  145,    0,  375,    0,    0,    0,    0,
  372,   89,   88,    0,    0,   80,   81,  499,  755,  137,
  138,  754,    0,    0,    0,  206,    0,  565,    0,    0,
    0,    0,    0,  838,    0,    0,  799,    0,    0,    0,
  844,  523,  522,    0,    0,  474,    0,    0,  920,  921,
  463,  469,    0,  472,    0,  497,    0,    0,    0,    0,
  833,    0,    0,  822,  554,  549,    0,    0,  545,    0,
    0,    0,  785,  856,  854,  634,  628,  627,  639,  491,
    0,  481,  480,  614,    0,  172,    0,  859,    0,  885,
    0,  900,  901,  894,  864,  866,  906,   38,   14,    0,
   36,    0,    0,  383,    0,    0,  380,  338,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  149,    0,
    0,  376,  377,   86,   85,  215,  216,    0,  207,    0,
    0,    0,  190,  198,  191,  193,    0,  842,    0,  841,
  794,    0,  800,    0,    0,  542,  540,  473,  475,  476,
  470,  464,  468,    0,    0,  496,  507,  462,    0,  827,
    0,  829,    0,  550,    0,  848,  846,    0,  490,    0,
  858,    0,    0,    0,  878,    0,    0,    0,    0,   15,
    0,    0,    0,  689,  688,    0,  687,  379,    0,    0,
  161,    0,    0,    0,    0,  156,    0,    0,    0,    0,
    0,  146,    0,  140,  150,  178,  183,  201,    0,  213,
    0,    0,    0,  786,  839,    0,  801,  768,  512,  509,
    0,  780,    0,    0,  773,    0,  777,  832,  553,  552,
  640,    0,  860,  882,    0,    0,    0,  896,    0,  907,
   39,   47,    0,    0,  353,  382,  381,    0,  339,    0,
  347,    0,    0,  142,  157,  181,  402,  401,    0,  399,
    0,  650,    0,  677,  240,  107,  152,    0,    0,  202,
    0,  194,  192,    0,    0,  796,    0,    0,  770,  774,
    0,  778,  169,    0,  886,  903,  904,  897,  867,   40,
   37,   48,    0,    0,    0,    0,  160,  158,    0,    0,
    0,    0,  678,    0,    0,    0,  179,  200,    0,  212,
    0,  802,  779,    0,    0,    0,    0,  354,    0,    0,
  348,  182,  400,    0,    0,    0,  111,  108,  153,  203,
  788,  883,    0,  898,    0,    0,  340,  684,    0,  685,
  682,    0,  680,  104,    0,  103,   95,   96,    0,    0,
   92,   94,   97,   98,   99,  100,  101,  102,    0,    0,
  256,  249,  250,  248,  251,  252,  253,  254,  255,    0,
    0,  246,    0,    0,    0,  887,  355,  351,    0,    0,
    0,  651,   93,  694,  299,  294,  298,    0,  241,  247,
  125,  118,  119,  117,  120,  121,  122,  123,  124,  126,
    0,    0,  115,  109,    0,    0,  683,  681,    0,    0,
    0,    0,    0,  307,    0,    0,  257,    0,    0,  265,
    0,    0,    0,  112,  116,    0,  884,    0,    0,    0,
  293,    0,  292,    0,    0,    0,  373,    0,  218,    0,
    0,    0,    0,  652,    0,  242,  890,  888,  127,  370,
    0,    0,    0,    0,    0,    0,  222,  374,  260,  259,
  258,  271,  270,  267,  272,  273,  266,  285,  284,  277,
  278,  274,  276,  275,  279,  268,  269,  280,  281,  287,
  286,  282,  283,    0,  695,    0,  311,    0,  290,  288,
    0,    0,  219,    0,  263,  136,  134,    0,    0,  315,
    0,    0,    0,    0,  296,    0,    0,    0,    0,    0,
    0,    0,  131,  330,    0,  312,    0,    0,  324,    0,
    0,    0,  319,    0,    0,  308,    0,  230,    0,  220,
    0,    0,    0,    0,  135,    0,  128,  132,    0,    0,
    0,  326,    0,  327,  316,    0,    0,  310,  320,  291,
  289,    0,  297,  301,    0,    0,  227,  229,  223,  264,
  133,  331,  333,  313,    0,    0,  325,  322,  306,    0,
    0,  231,  233,  221,    0,    0,    0,  324,  302,  304,
    0,    0,  224,  335,  336,  332,  334,  323,    0,    0,
  237,  236,  235,  232,  234,    0,    0,    0,  225,  303,
  305,
  };
  protected static  short [] yyDgoto  = {             8,
    9,   10,   11,   12,   60,   13,   14,   15,   16,  920,
   55,   17,   18,  255,   35,   19,  692,  249,  658,  457,
 1404,   92,  921,  809,  922, 1002, 1063,  999, 1064,   21,
   22,   23,   24,   25,   26,   27,   28,  693,   30,   46,
   47,   48,   49,   50,  279,   94,  485,  486,  487,  304,
  599,  835,  834, 1169, 1170, 1171, 1172, 1173, 1174, 1175,
 1176, 1177, 1178,   76,  256,  471,  671, 1019,  934, 1082,
 1148, 1125, 1194, 1221, 1193, 1222, 1223, 1078, 1318, 1306,
 1331, 1332, 1333,  839, 1329,  840,  720, 1236,  825,  672,
  937,  462,  930,  819, 1014,  721,  935,  938,  939, 1126,
 1015, 1016, 1012,  434,  435,  793,  642,  339,   31,  264,
   80,  472,  694,  827, 1088,  931, 1119,   77,  305,  695,
  696,  697,  698,  699,  844,  579, 1129,  845,  580,  847,
 1259, 1276, 1350, 1326, 1376, 1260, 1314, 1395, 1416, 1351,
 1352, 1414, 1401, 1402,  669,  933, 1124, 1190, 1243, 1191,
 1192, 1237, 1281, 1262, 1238,  269, 1304, 1328, 1240, 1323,
 1322, 1179, 1206, 1256, 1373, 1347, 1207, 1374,  600, 1409,
 1410, 1255, 1321, 1308, 1341, 1336, 1319, 1360, 1365, 1339,
 1342, 1343, 1398, 1366, 1337, 1338, 1406, 1396, 1397,  662,
  817, 1069, 1010, 1115, 1070, 1071, 1139,  923, 1113, 1155,
  382,   36,  160,   84,   38,  270,  814,  660,  475,  926,
  927, 1006,  259,  260,  352,  340, 1079, 1080,  162,  163,
  341,  165,  166,  167,  168,  169,  170,  171,  172,  173,
  174,  175,  176,  177,  178,  179,  180,  181,  182,  183,
  184,  287,  786,  977,  539,  726,  871,  727,  728,  971,
  185,  427,  732,  601,  602,  603,  604,  780,  495,  496,
  334,  353,  734,  335,  524,  525,  526,  527,  383,  336,
  530,  722,  346,  749,  750,  886,  301,  503,  302,  502,
  186,  187,  188,  189,  190,  191,  192,  193,  194,  195,
  196,  197,  198,  199,  200,  201,  582,  583,  584,  766,
  767,  202,  572,  376,  988,  203,  519,  667,  932, 1122,
 1241,   78, 1083, 1084, 1162, 1163, 1007,  561,  359,  761,
 1242,  562,  563,  306,  307,  308,  206,  207,  208,  309,
  310,  311,  312,  313,  314,  315,  316,  317,  318,  319,
  320,  220,  321,  573,  221,  222,  223,  224,  225,  499,
  500,  322,  226,  227,  228,  544, 1043, 1044, 1045, 1046,
 1101, 1047,  229,  230,  231,  232,  510,  962,  856, 1094,
  511,  512, 1096, 1097,  233,  234,  235,  236,  237,  238,
  549,  550,  981,  739,  883,  740,  349,  703,  959,  704,
  892,  891,  239,  444,  240,  445,  907,  992,  446,  654,
  808,  805,  806,  997,  447,  448,  449,  450,  451,  452,
  911,  644,  909, 1104, 1195, 1247,  994, 1136, 1226,  803,
  650,  804, 1057,  996, 1058, 1137,  998,   52,  243,   53,
  };
  protected static  short [] yySindex = {         -183,
    0, -191, -184, -193,  -95,    0,  107,    0,   64,    0,
  119,    0,    0,    0,    0,    0,    0,    0,    0, 2315,
    0,    0,    0,    0,    0,    0,    0,    0, -102,    0,
    0,    0,  272,  -77,   89,    0,   93,    0,    0,   99,
    0,    0,    0, -208,  -77,  141,   98,  105,    0,    0,
    0, 5912,  319,    0,  107,    0,  119,    0,    0,  119,
    0,    0,    0, -180,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,10932, 1807,    0,    0,  429,
 7127,  141,    0,    0,  170,    0,  263,  251, -208,   98,
  141,  267,    0,  297,    0,  132,    0,  284,    0,    0,
  122,10480,  322,    0,  159,  334, 6043,    0,    0,  159,
    0,  159,  159, -189,  159,    0,  159,    0,  -36,    0,
    0, 9515,    0,    0,  159,    0,  159,    0, 9515,    0,
  384,    0,    0,    0,  122,    0,    0,  159,  189,  159,
11140,11180,    0, 9515,    0,10247,10247,10247,10247,10247,
10247,10247,10247,    0,  206,    0,11218,    0,    0,  357,
  243,    0,  870,  -44,    0,    0,  413,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  940,    0,  358,  -53,
  442,  497,  686,  427,  466,  462,  467,  195,  482,    0,
    0,    0,    0,    0,    0, 2793,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  501,  507,    0,  234,  474, -251,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  416,  510,
  319,    0,    0,    0,    0,    0,    0,    0,  524,11268,
  569,11292,  553,  714, -204,  285, 5412,    0,    0,  305,
  697,    0,    0,    0,    0,    0,  553,    0,    0,  404,
  -18,  263,    0,    0,  619,    0,    0, 9637,    0,  741,
  644, 9759,    0,    0,    0,    0, 9515,  159,  159,  702,
 9515, -240,  355,  870,  697,    0,  662,    0,11218,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  739, -228,11268, 6567,11218, 9515,  690,  713, 9515, 9515,
 7082,  -68,  737, -175,11292,  702,   75,    0,  747,  754,
    0,11218,    0,  759,  477,  159,    0, 9515,  384, 9027,
    0,    0,    0, 9515,   -2,  723,   21,  728, 6043, -227,
  451,    0,    0,    0,    0,    0,    0,    0,    0,  771,
 9515,    0,    0,    0,    0,11016,  802,  263,    0,  458,
    0,  702,    0,  476,    0,    0,  769, 9759, 8661,    0,
    0,10247, 9515, 9515, 9515, 9515, 9515, 9515, 9515, 9515,
 9515, 9515, 9515,10247,10247,10247,11218,11218,10247,10247,
10247,10247,10247,10247,10247,10247,10247,10247,10247,10247,
10247,10247,10247,10247, 9515,    0,    0,    0,    0,    0,
    0,    0,   97,  795,    0,    0,    0,    0,11342,11380,
  774,    0,    0,    0,    0, -225,  692,    0,    0,    0,
    0,    0,    0,    0,    0,  803,  837,  569,    0,  845,
  553, -172,  849,    0,  822,    0,    0,  964,  982, -208,
    0,  871, 6462,  832,  833,    0,    0,    0,    0,11218,
    0,    0,    0,  289,   73,    0,    0,    0,    0,    0,
  263,   43,    0,    0,  434,    0,  878, -174,  880,    0,
  881,  110,  384,  159,    0,    0,  841,    0,    0,  883,
    0,  890, -195,    0,  889,    0,    0,    0,  896,  897,
    0,  129,    0,  903,    0,  912,    0,    0,    0,  547,
 6436,    0,    0, 6951,  626, 9515,  737, 8661,    0,    0,
    0,    0,  916, 9515,    0,    0,  159,  384,  387,    0,
 7167,  919,    0,  920,  921,  923, 9515, 1001, 9515, 1002,
 -206, 6043,    0,    0,    0,    0,    0,    0,10247,    0,
  924,  384, 6043,    0,    0,    0,  553, -208,  887,11420,
    0,  925,    0,  931,10247,    0, -233,    0,    0, -231,
    0,    0,  641, 9515, 9515,  934, 1048,    0,    0,  -56,
  933,    0,    0,    0,    0,  358,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  358,  358,  -53,  -53,  442,  442,  442,  442,
  497,  497,  686,  427,  466,  462,  467,    0,  936, 8783,
 9515,    0,  474, 9515,   38,  893,   41,  894,  932, 9515,
    0,    0,    0,  954,    0,    0,    0,  938,  944,  955,
 7212,    0,  942,    0, -208,  948,  569,    0,  569,    0,
  569,  939,  950,    0,  953,  263,  594,    0, -147,    0,
    0, 9637,    0,    0, 9759,    0,    0, 9149,  662,    0,
    0,  650, -102,  956,    0,  951,  952,  957,    0,    0,
 9515,  946,  530,    0,    0, 6698, 9515, 1034,    0, 6043,
 6043, 9149,    0, 7082,    0,    0,    0,    0,    0,    0,
    0,  958, 9271,  339,    0,  -55, -159,    0,  908,  914,
    0, -171,    0,    0,  966,    0,  967,11096,    0,    0,
    0,  384,    0,    0,  -34,  415,  937,    0,  981,  962,
    0,    0,    0, 6043,    0, 9515,    0, 9515,    0,    0,
    0,    0,    0,    0,    0,    0, 9515,    0,    0,  941,
11016,  991,    0,    0,    0,    0,    0,    0,    0,    0,
    0, 8539,    0,    0,    0,    0, 8905, 9515,11292,    0,
    0,    0,    0,  988,    0,    0,    0, 1067,    0, 1068,
    0,  743,    0,  994, 9515, 9515,  976,    0, -143,    0,
    0,    0, -112,    0,    0,    0,  998,    0, 1003,    0,
    0,    0,    0,    0,  999,    0,  110,  110, 1020, 1021,
    0,    0,    0, 9515, 9515,    0,    0,    0,    0,    0,
    0,    0,  650,11420,  439,    0,11218,    0,  244, 1137,
 1138, 1025, 9515,    0,  841, 9515,    0, 1027, 9515, 1119,
    0,    0,    0, 9149, 1035,    0,  -73, 9393,    0,    0,
    0,    0, 6820,    0, 1144,    0,  702, 9515, 1037, 1039,
    0,  992,  384,    0,    0,    0,  993,    4,    0,  995,
 6043, 6043,    0,    0,    0,    0,    0,    0,    0,    0,
  550,    0,    0,    0,  989,    0, 9515,    0, 9515,    0,
 9515,    0,    0,    0,    0,    0,    0,    0,    0, 1051,
    0,  107,  110,    0,  465,  447,    0,    0, 1154, 1040,
  110, 1038, 1038, 1038, 9149, 1004, 1041,  999,    0, 1046,
 1049,    0,    0,    0,    0,    0,    0, -165,    0, -163,
 1050, 1052,    0,    0,    0,    0, 1047,    0, 6043,    0,
    0, 1053,    0, 1055, 6043,    0,    0,    0,    0,    0,
    0,    0,    0, 1060,  737,    0,    0,    0, -154,    0,
 1059,    0,    4,    0, 1007,    0,    0,  384,    0, 9515,
    0, 9515, 1073, 9515,    0, 9515, 1079,  692, 1066,    0,
  107, -102, 1063,    0,    0, 1022,    0,    0, -112, -102,
    0, 9515, 1029, 1070, 1040,    0, 1075, 7257, 1108, 1108,
 1108,    0, 1074,    0,    0,    0,    0,    0,  420,    0,
 1077, 1193, 1196,    0,    0, 6698,    0,    0,    0,    0,
 9515,    0, 1091, -154,    0, -154,    0,    0,    0,    0,
    0, 1090,    0,    0, 1112,  753, 1088,    0, 9515,    0,
    0,    0,  -69, -102,    0,    0,    0, 1056,    0, 1092,
    0, 1095, 1003,    0,    0,    0,    0,    0, 1094,    0,
 1057,    0, 1108,    0,    0,    0,    0, 1108, 1100,    0,
 9515,    0,    0, 1103,  890,    0, 6043, 1101,    0,    0,
 6043,    0,    0, 9515,    0,    0,    0,    0,    0,    0,
    0,    0, 1108,    0, 1111, -102,    0,    0, 1108, 7257,
 1102, 1124,    0, 1125, 1126, 9149,    0,    0, 9515,    0,
 6043,    0,    0, 6043, 1145, 9515, 9515,    0, 1113,  938,
    0,    0,    0,11056,  -92, -102,    0,    0,    0,    0,
    0,    0, 1146,    0, 1121, 9515,    0,    0, 1127,    0,
    0, 1131,    0,    0, 1807,    0,    0,    0, 1133,  -92,
    0,    0,    0,    0,    0,    0,    0,    0,  561, 1807,
    0,    0,    0,    0,    0,    0,    0,    0,    0, 1135,
 -102,    0, -102,  938, 9515,    0,    0,    0, 1139,11056,
10697,    0,    0,    0,    0,    0,    0,10729,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 1141, -102,    0,    0, 1152, 9515,    0,    0,11218,11218,
  104,  151,  553,    0, -208, 1558,    0, 1205,    0,    0,
  938, 6043,  938,    0,    0, 1098,    0, 1152, 1110,  822,
    0,11218,    0,11218, 1120, 1147,    0,  871,    0, 1155,
 -213,  574, 3684,    0, 1158,    0,    0,    0,    0,    0,
 1156, 1165, 1166, 1167,  110, 1172,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0, 1169,    0, -125,    0, 1160,    0,    0,
 1170, 1171,    0,  110,    0,    0,    0, 1173,  -82,    0,
 1177,  110,  110,  429,    0,  -80, 1176,  110, 9149, 1140,
 1178, 1173,    0,    0, 1807,    0, -102, -102,    0, 1143,
 1180, 1177,    0, 1181, 1187,    0, 1185,    0, 1807,    0,
  -80,  -80, 1195, 1191,    0, -125,    0,    0, -136, 1184,
 1807,    0, 1807,    0,    0, 9149, 1183,    0,    0,    0,
    0, -114,    0,    0,  767, 1197,    0,    0,    0,    0,
    0,    0,    0,    0, 1251, 1304,    0,    0,    0, 1199,
 1201,    0,    0,    0,  -80,  587,  587,    0,    0,    0,
 -153, -153,    0,    0,    0,    0,    0,    0, 8661, 8661,
    0,    0,    0,    0,    0, 1211, 1210, 1219,    0,    0,
    0,
  };
  protected static  short [] yyRindex = {         2108,
    0,    0,    0,    0, 6174,    0,    0,    0, 2108,    0,
 1590,    0,    0,    0,    0,    0,    0,    0,    0,10803,
    0,    0,    0,    0,    0,    0,    0,    0, 1872,    0,
    0,    0,   37, 1217,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  797,  681,    0, 1224,    0,    0,    0,
    0,    0, 1950,    0,   48,    0, 1590,    0,    0, 1590,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  330,10391,    0,    0,    0,
    0,    0,    0,    0,    0,    0, 2345,    0, 2489, 1224,
 1226,    0,    0,  647,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0, 1236,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,11458,    0,
    0,  942,    0,    0,    0,    0,    0,    0,  942,    0,
    0,    0,    0,    0,    0,    0,    0,    0, 1189,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 5581,    0,    0,    0,    0,    0,
  178,    0, 3594, 5636,    0,    0, 3038,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0, 3828,    0, 3894, 4186,
 1132, 4696, 4906,  618, 5128, 5272, 5416,  557, 3683,    0,
    0,    0,    0,    0,    0,   51,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0, 1189,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  848,  848,
 2034,    0,    0,    0,    0,    0,    0,    0, 1239,    0,
    0,    0, 6724,  425, 2633,    0,    0,    0,    0, 3356,
 2633,    0,    0,    0,    0,    0, 3748,    0,    0,    0,
    0, 2345,    0,    0,    0,    0,    0,  562,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0, 1189,
    0, 2878,  178,    0,  709,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0, 1231,    0,    0,    0,    0,    0,    0,
 1240,    0,    0,    0,    0, 2187, 2878,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  515,    0,  515,    0,   57,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  942,    0,    0,    0,    0, 1244,    0, 2878,    0,    0,
    0, 1202,    0,    0,    0,    0,    0,    0,  -11,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  607,  585,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0, -220,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0, 1252,
   83,    0,  157,    0,    0,    0,    0, 1203, 1206,  763,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0, 7587,    0,    0,    0,    0,    0,    0,
 2878, 5752,    0,    0,    0,    0,    0,    0, 1235,    0,
    0,10848,    0,    0,    0,    0,    0,    0,    0,    0,
    0, 1246,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  671,  884,    0,    0, 1255,    0,    0,    0,    0,
    0,    0,    0,   59,    0,    0, 3437, 1248,    0,    0,
    0,    0,    0,    0,    0,    0, 1258,    0, 1308,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   62,    0,    0,    0,    0,    0,    0,    0,    0,
    0, 9881,    0,    0,    0,    0, -161,  453,    0,    0,
    0, 1259,    0,    0,    0,    0, 2878,    0,    0, 2878,
    0,    0,    0,    0,    0,  196,    0,    0,    0,    0,
   24,    0,    0,    0,    0, 3974,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 4040, 4120, 4264, 4330, 4408, 4474, 4552, 4618,
 4762, 4840, 4984, 5050, 5194, 5338, 5482,    0,    0,    0,
 1257,    0,    0,    0,  515,    0,  515,    0,    0,    0,
    0,    0,    0, 5536,    0,    0,    0, 1765,    0,  694,
    0,    0,    0,    0,  779,    0,    0,    0,    0,    0,
    0,  640,    0,    0,    0, 1260,  899,    0,10003,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,11508, 7913,    0,    0,  678,  733,  750,    0,    0,
    0,  782,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0, 1262,    0,    0,    0,    0,    0,    0,
    0, 1280,    0, 3503,    0,    0,   72,    0,  -46, 3118,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  651,  411,    0,    0,    0, 1277,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  214,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  271,    0,  370,    0,    0,    0,    0, 7342,    0,
    0,    0, -149,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 1275,    0,10848,10848,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,11532,    0,11582,    0,    0,    0,10976,    0,
    0,    0,    0,    0,    0, 1276,    0,    0,    0, 1472,
    0,    0,    0, 1285,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0, 3198,    0, 2958,    0,
    0, 1284,    0,    0,    0,    0,    0,  651,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  660,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0, 7426,
    0, 7510,10848,    0, 1245,    0,    0,    0,10125, 1286,
10848,  274,  274,  274,    0,    0,    0, 1287,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  789,  792,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 3437,    0,    0,    0, 1293,    0,
    0,    0,  651,    0,  836,    0,    0, 9881,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   39,    0,    0,
 7594, 7743,    0,    0,    0,    0,    0,    0, -149,  127,
    0,    0,    0,    0, 1288,    0,    0,    0, 1298, 1298,
 1298,    0,  811,    0,    0,    0,    0,    0,  724,    0,
  807,    0,    0,    0,    0, 1294,    0,    0,    0,    0,
    0,    0,    0, 1299,    0, 6305,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  335,  388,    0,    0,    0,
    0,    0,    0, 7827,    0,    0,    0,    0,    0, 1300,
    0,    0,    0,    0,    0,    0,    0,    0,  318,    0,
    0,    0,  611,    0,    0,    0,    0,  628,    0,    0,
    0,    0,    0,    0, 1297,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 1295, -211,    0,  186,    0,    0,  628,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0, -160,    0,    0,    0,    0,    0, 1644,
    0,    0,    0,    0, 8012, 8332,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  273,    0,    0,10548,    0,    0,    0,    0, 8086,
    0,    0,    0,    0,    0,    0,    0,    0,    0,10629,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 8406,    0, 8172, 1644,    0,    0,    0,    0,    0,    0,
  330,    0,    0,    0,    0,    0,    0,  330,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0, 8246,    0,    0,  597,    0,    0,    0,    0,    0,
    0,    0,  879,    0, 8469,    0,    0,    0, 1129,    0,
 1644, 1302, 1644,    0,    0,    0,    0,  597,    0,    0,
    0,    0,    0,    0,    0,    0,    0, 1305,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  542,    0,    0,    0,10848,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  821,    0,    0,
    0,    0,    0,10892,    0,    0,    0, 1301, 1394,    0,
 1306,10848,10848,    0,    0,  531,    0,10848,    0,    0,
    0, 1307,    0,    0, -122,    0,11613,11645,    0,    0,
    0, 1313,    0,    0,    0,    0,  630,    0,  865,    0,
 5764,10273,    0,    0,    0,    0,    0,    0,    0,    0,
 1356,    0, 1409,    0,    0,    0,  831,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  531, 6846, 6977,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0, 1248, 1248,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,
  };
  protected static  short [] yyGindex = {            0,
 1623,  635,   47,    0,    0,   50, -631,   -5, -862,    0,
  757,    0,    0,   25,    0,    0,    1,    0,    0,    0,
 -636,  -72,    0,    0,    0,    0,    0,    0,    0, -632,
 -629, -395,    0,    0,    0,    0,    0,   49,  -13,    0,
 1642,    0, 1598,    0,    0,    0,    0, 1011, 1012,  -52,
 -241,    0,    0,    0,    0,  525, -819, -808, -776, -483,
 -362, -361,-1035,-1079,    0, -196,    0,  277,    0, -659,
    0,    0,    0,    0,    0,    0,  475,  -74,  344,    0,
    0,    0,  375,  373,    0, -312, -330,  -19,    0,    0,
    0, -300,  637,    0,    0, -691,    0,    0,  770,    0,
    0,  698,    0,    0, 1069,    0,    0, -105,    0,  390,
    0, -445, -775,    0,    0,    0,    0, -253,  -37,    0,
    0,  867,  868,  869,    0, -541,    0,    0, -596,  876,
  483,    0, -912,    0,    0,    0,    0,    0,    0,    0,
    0,  324,    0,    0,    0,    0,    0,    0,    0,    0,
  533,    0,    0,    0,    0,  -70,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0, -525,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  336,    0,
    0,  393,    0,    0,  403,  407,  356,    0,    0,    0,
    0,    0,    0,    0,    0,  636,    0,    0,    0,    0,
 -221,    0,   29,  112,    0,    0, 1078,    0,  518,    0,
  749,    0, -278, -226,  -75,  317,    0,  646,    0,  -85,
  -41,    0,    0,  -14,    0, -293,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0, 1109,    0,    0,  -21,    0,    0,    0,  895,    0,
 -492, 1044, 1033,  987,    0,  983,    0, 1182, 1390, 1096,
    0, -212,  804,    0,    0,    0,    0, 1071,  -91,    0,
    0,    0,    0,    0,    0, -608,    0,    0,    0,    0,
    0,  963,    0,  168,  820,  610,  825, 1361, 1362, 1363,
 1365, 1360,    0, 1368,    0,    0,    0, 1018,    0,  805,
    0,    0,    0,    0,    0,    0, -322,    0,    0,    0,
    0,  -47,    0,  712,    0,  608,    0,  568,    0,    0,
    0,  710, -537,  -43, -354,  -29,    0, 1607,    0,    8,
    0,   10,   17,   26,   28,   52,   54,   63,   65,   66,
   70,    0, -664,    0,  367,    0, 1712,    0,    0,    0,
 1134, -305,    0,    0,    0,    0,    0,    0,  776,    0,
    0,  772,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  785,    0,    0,    0,    0,    0,    0,    0,    0,
    0, 1266,    0,    0,    0,    0,    0,    0,    0,  969,
    0,    0,    0, -232,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0, 1375,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  577,    0,    0,    0,    0,
    0,    0,    0,    0,  689,    0,    0,    0,    0,    0,
  };
  protected static  short [] yyTable = {           158,
   20,   54,  532,  473,  565,  258,  268,  454,  204,   20,
  164,  432,  735,  515,  159,   79,  294,  275,  509,  666,
  862,  811,  205,  344,  762,  463,   34,  675,   45,  262,
   37,  556,   37,  466,  540,  768,  489,  523,  770,  478,
  494,  729,  265,  333,  507,  860,  861,  909,   29,  244,
  918,  940,  941,   20,  460,   57,  257,   29,   58,  209,
  295,  210,   41,  286,   32,  164,  356,  358,  211,  338,
   45,   39,  391,    1,   37,  247,  338,  212,  326,  213,
  533,  687,  377,  663,  876, 1201,  327,  296,   42,  893,
 1028,  360, 1030,  345,  392,  846,  872,  347,  707,  242,
 1208,   29, 1411,  214,   37,  215,  271,  776,  463,   37,
   37, 1278,  918, 1041,  216,   45,  217,  218,   81,   37,
   43,  219,  436,  651,  652,   81, 1382,   81,  869,  869,
 1316,  296,  296,  296,  296,  296,  296,  296,  296, 1062,
  655, 1389,  567,  924,   59,  505,  494, 1003,   83, 1390,
   81,    2,  379,  158,  349, 1017,   59, 1220,  832,  759,
  349,   51,  204, 1164,  164,  833,   85,  350,  159,   37,
   37,  437,  966, 1334,    3, 1348,  205,  919, 1383,  258,
   83,  374,  876,    4,  477,   37, 1220, 1110,  774,  534,
  776,  535,  655,  284,  506,  568,  877,  653,  273,  677,
  878, 1112,  869,  391,  688,  776,  733,  565,  407,  918,
 1391,  143,  873,  209,    3,  210,  760,  708,  565,   44,
 1412,   33,  211,  328,  501,  488,  986,  987,   40,  493,
  458,  212,  248,  213,  497,    5,    6,    7,  360,  285,
  664,   20,  536, 1022,  408,  294,  946, 1029,  949, 1031,
  513,  392,  258, 1317,    4, 1359,  776,  214,  537,  215,
  541,  659, 1042,   59,    4,  571,  375,  543,  216, 1375,
  217,  218,  748,  514,    4,  219,  518,  520,   37,  984,
   37, 1385,  164, 1386,    4,  474,    4,  455, 1000,   29,
   58,  557,  968,   85, 1035,  552, 1111,  554,  878,  528,
 1038,  518,  948,  529,  909,  581,  589,  918,  164,  792,
  869,  553,  379,  784,  559,  564,  296,  164,  338,  918,
    1,  796,  409,  410,   81,  918, 1184,   37,  331,  566,
  332,  797,  621,  622,  799,  493,  598, 1185,  390,  390,
  607,  608,  609,  610,  611,  612,  613,  614,  615,  616,
  617,   37,   85,   37,   83,  481,   81,  841,  477, 1251,
 1085, 1086,   81,   37,  646,  648,  785,  870,  161, 1186,
   37, 1184,  639, 1214, 1049,    1, 1050,  296,  852,   81,
  729,  885, 1185,  482, 1215,  372,   83,  868,  868,  296,
  296,  296,  261,  478,  296,  296,   81,  261,    2,   81,
  857,   81, 1214,  375,   37,  678, 1253,  363, 1252,   83,
  363,  477,  389, 1215, 1186,  679, 1216,  372,  293,  885,
  523,    3,  696,  161,  465,  262,   83,  697, 1127,   83,
    4,   83, 1132,   81, 1149,   37,   37,  466, 1377, 1378,
  489,    2,  681,  494,  682, 1216,  478,  390,  375,  390,
  691,  390,  390, 1138,  390, 1254,  390,  261,  261, 1142,
  361,  868,   86,   83,  374,  700, 1151,   37,   37,   91,
  821,  370,  822,  261,  823,  640,    4,   93,  719,  696,
  258,  465, 1403,  731,  697,  598,  143,   81,  905,  586,
  284,  737,  344,  474,  466,  390,  374,  390,  280, 1312,
  390,  474,  281, 1157,  755,   87,  757,  712,   37,  581,
  741,   88, 1166, 1181,  641, 1167, 1182,   83,  564,  371,
  164,  389,  161,  389,  466,  389,  389,  284,  389,  564,
  389,  164,  566,  961,  765,  794,  285, 1166, 1327,   59,
 1167,  779,  779,  566,  356,  902, 1344, 1345,  372,  282,
  374,  346, 1354,   89,  296,  332,  467, 1224, 1181,  606,
 1211, 1182,  463, 1212,   81,  492,  261,  492,  261,  389,
  296,  389,  351,  285,  389,  746,  623,  624,  373,  747,
  468,  673,  272,  482,  951,  482,  816,  791,  338, 1211,
  356,  518, 1212,  423,   83,  375,  762,  802,   59,  379,
  332,  653,  683,  375, 1264,  424, 1266,  469,   37,  899,
    4,  679,  673,  380,  899,  261,  899,  431,  492,  899,
  899,   81,  899,  899,  274,  653,  381,  374,  294,  488,
   81,  372,  493,  375,  277,  514,  482,  679,  673,  261,
  161,  261,  899,   56,  733,   59,  679,   81,  518,  865,
   82,  261,  653,    2,  858,  547,  674,  283,  261,  719,
   83,  679, 1187,  882,  975,  278,  161,  680,  164,  164,
  731,  332,  742,  902, 1387,  161,    3,   83,  902,   79,
  902,  372,  674,  902,  902,    4,  902,  902,  476,   37,
  508,  245,  261,  899,  246,  298,  654,   81,  775,  296,
  581,  777,  300,  894,  884,  895,  902, 1187,  893, 1217,
  374,  379,  164,  893,  896,  893,  555,  868,  893,  893,
  654,  893,  893,  261,  261,  380,  895,   83, 1098,  598,
  509,  895,  546,  895,  598,  904,  895,  895, 1217,  895,
  895,  404,  405,  406,  574,  547,  565,  654,  143, 1168,
 1183,  575,  915,  916,  438,  261,  261,  902, 1004,  439,
  374,  440,  548,  576,  479, 1060,   37,  441,  442,  378,
 1005,  379,  950,  581, 1168,  480,  673,  356, 1130,  565,
  356,  944,  945, 1188, 1189,  887, 1089,  829,  830,  392,
 1258,   59,  893,  143,  356, 1183,  261, 1213, 1090,   37,
  958,  684,  263,  518, 1270,  685,  964, 1008,  419,  363,
  895,  719,  611,  925,   59,  969, 1150,   37, 1009,  363,
  569,  380,  630,  363,  630,  976, 1213,   59, 1188, 1189,
 1218, 1219,   59,  411,  412,  375,  363,   59,  443,   59,
   59,   59,   59, 1198,  421,  982,  970,   59,  438,  164,
  164,   59,  420,  439,  991,  440,  993,  978,  995, 1218,
 1219,  441,  442,   59,  422,  363,   59,  261,   59,  425,
  587,  363,   37,  603,  429,   37,  413,  414,  161,  588,
  430,  363,  719, 1417, 1418,  363,  433,  565,  590,  161,
  415,  416,   59,   59,  456,  611,  261,  591,  363,  854,
  611,  855,  611,  611,  611,  611,  611,  611,  611,  611,
  611,  611,  611,  309,  715,  309,   54,  164,  716,  989,
  309,  787,  611,  164,  611, 1204,  611,  363,  611,  611,
  611,   77,  453,   77, 1205,  889,  464, 1052,  143, 1053,
  889, 1055,  889, 1056,  611,  889,  889, 1279,  889,  889,
  765,  143,   81,  813,  751,  574,  603,  843,  751, 1072,
  810,  603,  575,  603,  603,  603,  603,  603,  603,  603,
  603,  603,  603,  603,  576,  676,  165,  261,  165,  611,
  165,  459,  473,  603,  676,  603,  483,  603,  514,  603,
  603,  603,  675,  730,  300,  244,  490,  529,  841,  273,
  603,  675,   20,  300,  603,  603, 1109,  363,  778,  925,
 1068,  144,  685,  144,   75,  603,  603,  363,   75,  889,
  363,  363,  627,  628,  629,  630,  161,  161,  603,  171,
  438,  171,  378,  171,  363,  439,  524,  440,  514,  363,
  603,  363,  524,  441,  442,  188,   37,  188,   74,   74,
  465, 1135,   74,  379,  261,  164,  491,  564,  378,  164,
  363,  363,  378,  516,   20,  378,  378,  378,  332, 1161,
  161,  566,  378,  719,  498,  356,  514,  419,  504,  419,
  363,  417,  418, 1153, 1056,  363,  517,  261,  363,  164,
  564,  199,  164,  199,  482,  199,  912,  913,  419,  419,
  195,  531,  195,  514,  566,  261, 1106, 1107,  362,  363,
  364,  365,  366,  367,  368,  369, 1068,  196,  419,  196,
  542,  356,  368,  419,  380, 1161,  419,  368, 1392, 1393,
 1239,  368,  545,  363,  139,  558,  139, 1239,  368,  385,
  560,  139, 1225,  368,  570, 1165, 1180,  368,   37,  363,
  368,  843,  368,  843, 1249, 1250,  217,  368,  217,  189,
  261,  189,  385,  261,  363,  363,  643,  363,  363,   66,
 1165,  585,   37, 1248,  211,  385,  211, 1272,  211, 1273,
  385,  592,  151,  262,  151,  385,  649,  385,  385,  385,
  385, 1180,  314, 1165,  314,  385,  868,  868,  564,  385,
  164,  657,  321,  385,  321,  551,  551,  161,  161, 1020,
 1021,  385,  566,  299,  385,  656,  385,  661,  323,  668,
  324,  325, 1165,  329, 1280,  330,  655,  655,   37,   37,
  625,  626,  476,  342,  665,  343,   37,  670,  284,  674,
  384,  631,  632,  348,  676,  677,  350,  686,  354,  525,
  690,  689,  426,  702,  426,  525,  705,   37,   37,  385,
  386,  706,  709,  378,  474,  710,  711,  378,  713,  363,
  378,  389,  378,  426,  426,  161,  514,  378,  474,  387,
   37,  161,   37,  714,  285,  736,  265,  388,  751,  752,
  753,  385,  754,  426,  756,  758,  771,  764,  426,  769,
  772,  426,  782,  783,  787,  798,  800,  820,  788,  807,
  801,  810,  812,  719,  813,  818,  820,  824,  393, 1335,
  826,  828,  849,  850,  853,  848, 1349,  859,  851,  864,
  426,  875,  890,  899,  261,  879,  880, 1361, 1363,  394,
  395,  396,  397,  398,  399,  400,  401,  402,  403,  888,
  889, 1349, 1349,  897,  605,  906,  598,  598, 1405, 1405,
  908,  910,  928, 1413, 1413,  914,  618,  619,  620,  929,
  936,  605,  605,  605,  605,  605,  605,  605,  605,  605,
  605,  605,  605,  605,  605,  605,  605,  593,  917,  384,
  942,  943,  955,  956,  957, 1349,  963,  348,  965,  974,
  967,  534,  389,  979,  980,  983,  990,  985,    3, 1011,
 1018, 1013,  384,  161, 1024, 1026, 1023,  161, 1027, 1054,
 1034, 1032,  885, 1033, 1037,  384, 1036, 1039, 1048, 1059,
  384, 1061, 1065,  261, 1066,  384,  261,  384,  384,  384,
  384, 1073,  538, 1074, 1076,  384, 1081,  161, 1092,  384,
  161, 1093, 1087,  384,  551, 1091, 1099, 1103, 1105, 1108,
  261,  384, 1117, 1116,  384, 1120,  384, 1128, 1114, 1121,
  593,  767, 1131, 1133, 1144,  593, 1140,  593,  593,  593,
  593,  593,  593,  593,  593,  593,  593,  593, 1145, 1146,
 1147, 1156, 1152, 1196, 1197, 1199,  605,  593, 1202,  593,
 1209,  593, 1200,  593,  593,  593, 1244, 1246, 1227, 1263,
 1267,  593,  593,  593,  593, 1275,  261,  261,  593,  593,
 1307, 1277, 1269, 1305,  261,  593,  593,  593,  593,  593,
  593,  763, 1274, 1309, 1310, 1311, 1313, 1315, 1320, 1324,
 1325,  384,  593, 1353, 1330,  261,  261,  773, 1340, 1384,
 1370, 1357, 1356, 1368,  593, 1367, 1371, 1372,  161, 1379,
 1380, 1388, 1394,  820,  820, 1383, 1382, 1399,  261, 1400,
  261,  820,  820,  820,  820,  820, 1419,  820,  820, 1420,
  820,  820,  820,  820,  820,  820,  820,  820, 1421,    7,
   34,   32,  820,   33,  820,  820,  820,  820,  820,  820,
  562,  527,  820,   25,  789,  519,  820,  820,  752,  820,
  820,  820,  701,  631,  529,  238,  341,  477,  105,  792,
  520,  820,  830,  820,  818,  820,  820,  518,  632,  820,
  363,  820,  820,  820,  820,  820,  820,  820,  820,  820,
  820,  820,  820,   30,  820,   32,  547,  820,  147,  793,
   33,  820,  820,  826,   59,  738,   59,  686,  771,  154,
  148,  155,  675,  795,  772,  345,  797,  696,  675,  370,
  655,  655,  820,  820,  129,  241,  820,   59, 1001,  317,
  130,  820,  820,  820,  820,  820,  318,   90,  276,  820,
   59,  820,  836,  837, 1203,   59, 1245,  820,  820, 1381,
   59, 1355,   59,   59,   59,   59, 1358, 1025,   59, 1118,
   59,  795, 1075, 1346,   59,  952,  953,  954,  947,  820,
  820,  820,  820, 1210,  820, 1415,   59,  767,  767,   59,
  820,   59, 1271, 1408, 1369,  767,  767,  767,  767,  767,
 1364,  767,  767, 1362,  767,  767,  767,  767,  767,  767,
  767, 1141, 1407, 1261,  831,  867,  767, 1067,  767,  767,
  767,  767,  767,  767,   30, 1143,  767,  973,  901,  903,
  767,  767,  874,  767,  767,  767,  781,  593, 1040,  633,
  838,  634,  637,  635,  863,  767,  636,  767,  898,  767,
  767,  638, 1051,  767, 1123,  767,  767,  767,  767,  767,
  767,  767,  767,  767,  767,  767,  767, 1228,  767, 1265,
 1134,  767,  428,  297,  743,  767,  767, 1102,   61, 1100,
 1095,  655,  842,  960, 1268, 1154,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  605,  767,  767,    0,    0,
  767,   62,    0,    0,    0,  767,  767,  767,  767,  767,
    0,    0,    0,  767,   63,  767,    0,    0,    0,   65,
    0,  767,  767,    0,   66,    0,   67,   68,   69,   70,
    0,   58,    0,    0,   71,    0,    0,    0,   72,    0,
    0,    0, 1257,  767,  767,  767,  767,    0,  767,    0,
   73,    0,    0,   74,  767,   75,    0,    0,    0,   30,
   30,    0,    0,    0,   30,    0,    0,    0,   30,    0,
   30,    0,    0,   30,    0,   30,   30,    0,   30,    0,
   30,    0,   30,    0,   30,   30,   30,   30,    0,    0,
   30,   30,    0,    0,    0,    0,   30,    0,   30,   30,
   30,    0,    0,   30,   30,   30,    0,   30,    0,  917,
   30,    0,   30,   30,   30,   30,    0,    0,    0,   30,
   30,   30,    0,    0,   30,   30,   30,    0,    0,    0,
  470,    0,    0,   30,   30,    0,   30,   30,   30,   30,
   30,   30,    0,    0,    0,   30,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   30,    0,    0,    0,    0,    0,    0,    0,   30,
   30,    0,    0,    0,    0,    0,    0,    0,   30,    0,
    0,   30,    0,    0,    0,   30,    0,    0,    0,   30,
    0,   30,    0,  914,   30,    0,   30,    0,    0,   30,
    0,   30,    0,   30,    0,   30,    0,    0,   30,    0,
    0,   30,   30,    0,    0,    0,   30,    0,    0,   30,
   30,   30,    0,    0,   30,   30,   30,   61,   30,    0,
    0,   30,    0,   30,   30,   30,   30,    0,    0,    0,
   30,   30,   30,    0,    0,   30,   30,   30,    0,    0,
   62,    0,    0,    0,   30,   30,    0,   30,   30,   30,
   30,   30,   30,   63,    0,    0,   30,    7,   65,    0,
    0,    0,    0,   66,    0,   67,   68,   69,   70,    0,
    0,    0,   30,   71,    0,    0,    0,   72,   58,    0,
   30,   30,   60,    0,    0,    0,   60,    0,   60,   73,
    0,   60,   74,   60,   75,    0,   60,    0,   60,    0,
   60,    0,   60,    0,    0,   60,    0,    0,   60,   60,
    0,    0,    0,    0,    0,    0,   60,   60,   60,    0,
    0,   60,   60,   60,    0,   60,    0,   30,   60,    0,
   60,   60,   60,   60,    0,    0,    0,   60,   60,   60,
    0,    0,   60,   60,   60,    0,    0,    0,    0,    0,
    0,   60,   60,    0,   60,   60,  917,   60,   60,   60,
   59,    0,    0,   60,   59,    0,   59,    0,    0,   59,
    0,   59,    0,    0,   59,    0,   59,    0,   59,    0,
   59,    0,    0,   59,    0,    0,   59,   59,    0,    0,
    0,    0,    0,    0,   59,   59,   59,    0,    0,   59,
   59,   59,    0,   59,    0,    0,   59,    0,   59,   59,
   59,   59,    0,    0,    0,   59,   59,   59,    0,    0,
   59,   59,   59,    0,    0,    0,    0,    0,    0,   59,
   59,    0,   59,   59,   60,   59,   59,   59,    0,    0,
  914,   59,    0,    0,   59,    0,    0,    0,   59,    0,
   59,    0,    0,   59,    0,   59,    0,    0,   59,    0,
   59,    0,   59,    0,   59,    0,    0,   59,    0,    0,
   59,   59,    0,    0,    0,    0,    0,    0,   59,   59,
   59,    0,    0,   59,   59,   59,    0,   59,    0,    0,
   59,    0,   59,   59,   59,   59,    0,    0,    0,   59,
   59,   59,    0,    0,   59,   59,   59,    0,    0,    0,
    0,    0,   59,   59,   59,    0,   59,   59,   59,   59,
   59,   59,   59,    0,   59,   59,    0,   59,    0,   59,
    0,    0,   59,    0,   59,    0,   59,    0,   59,    0,
    0,   59,    0,    0,   59,   59,    0,    0,    0,    0,
    0,    0,   59,   59,   59,    0,    0,   59,   59,   59,
    0,   59,    0,    0,   59,    0,   59,   59,   59,   59,
    0,    0,    0,   59,   59,   59,    0,    0,   59,   59,
   59,    0,    0,    0,    0,    0,    0,   59,   59,    0,
   59,   59,  531,   59,   59,   59,   59,  531,  531,   59,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  531,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  531,    0,    0,  531,  531,    0,    0,    0,  531,    0,
    0,  531,    0,  531,    0,  531,  531,  531,  531,    0,
    0,    0,    0,  531,    0,    0,    0,  531,    0,    0,
    0,  531,    0,    0,    0,    0,    0,    0,    0,  531,
   59,    0,  531,    0,  531,  531,    0,    0,    0,    0,
  531,    0,  531,  531,  531,  531,  531,  531,  531,  531,
  531,  531,  531,    0,    0,    0,    0,  531,    0,    0,
    0,  531,  531,    0,  531,  531,  531,  531,  531,  531,
  531,    0,  531,  531,    0,  531,  531,  531,  531,  531,
  531,  531,  531,  531,  531,   61,  531,  531,  531,  531,
  531,  531,  531,  531,  531,  531,  531,  531,  531,  531,
  531,  531,  531,  531,  531,  531,  531,  531,   62,  531,
  363,  531,    0,    0,  531,  363,  363,    0,    0,  531,
    0,   63,    0,    0,    0,   64,   65,    0,    0,    0,
    0,   66,    0,   67,   68,   69,   70,    0,  363,    0,
    0,   71,    0,    0,    0,   72,    0,    0,  363,    0,
    0,  363,  363,    0,    0,    0,  363,   73,    0,  363,
   74,  363,   75,  363,  363,  363,  363,    0,    0,    0,
    0,  363,    0,    0,    0,  363,    0,    0,    0,  363,
    0,    0,    0,    0,    0,    0,    0,  363,    0,    0,
  363,    0,  363,  363,    0,    0,    0,    0,  363,    0,
  363,  363,  363,  363,  363,  363,  363,  363,  363,  363,
  363,  363,    0,    0,    0,  363,    0,    0,    0,  363,
  363,  363,  363,  363,  363,  363,  363,  363,  363,    0,
  363,  363,    0,    0,  363,  363,  363,  363,  363,    0,
    0,  363,  363,    0,    0,    0,  363,  363,  363,  363,
  363,  363,  363,  363,  363,    0,    0,    0,    0,  363,
  363,    0,    0,    0,    0,  363,    0,  363,    0,  363,
    0,    0,  363,    0,    0,    0,    0,  363,    0,    0,
    0,    0,  363,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  363,    0,    0,  363,  363,    0,    0,    0,
  363,    0,    0,    0,    0,  363,    0,  363,  363,  363,
  363,    0,    0,    0,    0,  363,    0,    0,    0,  363,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  363,    0,    0,  363,    0,  363,  363,    0,    0,
    0,    0,  363,    0,  363,  363,  363,  363,  363,  363,
  363,  363,  363,  363,  363,  363,    0,    0,    0,  363,
    0,    0,    0,  363,  363,  363,  363,  363,  363,  363,
  363,  363,  363,    0,  363,  363,    0,    0,  363,  363,
  363,  363,  363,    0,    0,  363,  363,    0,    0,    0,
  363,  363,  363,  363,  363,  363,  363,  363,  356,    0,
    0,    0,    0,  356,  356,    0,    0,    0,    0,  363,
    0,  363,    0,  363,    0,    0,  363,    0,    0,    0,
    0,  363,    0,    0,    0,    0,  356,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  356,    0,    0,  356,
  356,    0,    0,    0,  356,    0,    0,  356,    0,  356,
    0,  356,  356,  356,  356,    0,    0,    0,    0,  356,
    0,    0,    0,  356,    0,    0,    0,  356,    0,    0,
    0,    0,    0,    0,    0,  356,    0,    0,  356,    0,
  356,  356,    0,    0,    0,    0,  356,    0,  356,  356,
  356,  356,  356,  356,  356,  356,  356,  356,  356,    0,
    0,    0,    0,  356,    0,    0,    0,  356,  356,  356,
  356,  356,  356,    0,  356,  356,  356,    0,  356,  356,
    0,    0,  356,  356,  356,  356,  356,    0,    0,  356,
  356,    0,    0,    0,  356,  356,  356,  356,  356,  356,
  356,  356,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  356,    0,  356,    0,  356,   95,    0,
  356,    0,    0,    0,    0,  356,   96,   97,   98,   99,
    0,    0,  100,  101,    0,  102,  103,  104,  105,  106,
  107,  108,    0,    0,    0,    0,    0,  109,    0,  110,
  111,  112,  113,  114,  115,    0,    0,  116,    0,    0,
    0,  117,  118,    0,  119,  120,  121,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  122,    0,  123,    0,
  124,  125,    0,    0,  126,    0,  127,  128,  129,  130,
  131,  132,  133,  134,  135,  136,  137,  138,    0,  139,
    0,    0,  140,  363,    0,    0,  141,  142,    0,  363,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  143,    0,    0,
    0,  144,    0,    0,    0,    0,  145,  146,  147,  148,
  149,    0,    0,    0,  150,  363,  151,    0,    0,    0,
    0,    0,  152,  153,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  154,  155,  156,  157,    0,    0,
    0,    0,    0,  461,    0,  426,  363,    0,    0,  461,
    0,  363,    0,  363,  363,  363,  363,  363,  363,  363,
  363,  363,  363,  363,  363,    0,    0,    0,    0,    0,
    0,    0,    0,  363,  363,  363,  363,  363,  363,  363,
  363,  363,    0,  363,  363,  461,  363,  363,  363,  363,
  363,  363,  363,  363,  363,  363,    0,  363,  363,  363,
  363,  363,  363,  363,  363,  363,  363,  363,  363,  363,
  363,  363,  363,  363,  363,  363,  363,  363,  363,    0,
  363,    0,  363,  424,    0,  363,  461,    0,    0,  424,
  363,  461,    0,  461,  461,  461,  461,  461,  461,  461,
  461,  461,  461,  461,  461,    0,    0,    0,    0,    0,
    0,    0,    0,  461,  461,  461,  461,  461,  461,  461,
  461,  461,    0,  461,  461,  424,  461,  461,  461,  461,
  461,  461,  461,  461,  461,  461,    0,  461,  461,  461,
  461,  461,  461,  461,  461,  461,  461,  461,  461,  461,
  461,  461,  461,  461,  461,  461,  461,  461,  461,    0,
  461,    0,  461,  533,    0,  461,  424,    0,    0,  533,
  461,  424,    0,  424,  424,  424,  424,  424,  424,  424,
  424,  424,  424,  424,  424,    0,    0,    0,    0,    0,
    0,    0,    0,  424,  424,  424,  424,  424,  424,  424,
  424,  424,    0,  424,    0,  533,  424,  424,  424,  424,
  424,  424,  424,  424,  424,  424,    0,  424,  424,  424,
  424,  424,  424,  424,  424,  424,  424,  424,  424,  424,
  424,  424,  424,  424,  424,  424,  424,  424,  424,    0,
  424,    0,  424,  527,    0,  424,  533,    0,    0,  527,
  424,  533,    0,  533,  533,  533,  533,  533,  533,  533,
  533,  533,  533,  533,    0,    0,    0,    0,    0,    0,
    0,    0,  533,  533,  533,  533,  533,  533,  533,  533,
  533,  533,    0,  533,  533,  527,  533,  533,  533,  533,
  533,  533,  533,  533,  533,  533,    0,  533,  533,  533,
  533,  533,  533,  533,  533,  533,  533,  533,  533,  533,
  533,  533,  533,  533,  533,  533,  533,  533,  533,    0,
    0,    0,  533,    0,    0,    0,  527,    0,    0,    0,
  533,  527,    0,  527,  527,  527,  527,  527,  527,  527,
  527,  527,  527,  527,    0,    0,    0,    0,    0,    0,
    0,    0,  527,  527,    0,  527,  527,  527,  527,  527,
  527,  527,    0,  527,  527,    0,  527,  527,  527,  527,
  527,  527,  527,  527,  527,  527,    0,  527,  527,  527,
  527,  527,  527,  527,  527,  527,  527,  527,  527,  527,
  527,  527,  527,  527,  527,  527,  527,  527,  527,    0,
    0,  393,  527,    0,    0,  527,  393,  393,    0,    0,
  527,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  393,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  393,
    0,    0,  393,  393,    0,    0,    0,  393,    0,    0,
  393,    0,  393,    0,  393,  393,  393,  393,    0,    0,
    0,    0,  393,    0,    0,    0,  393,    0,    0,    0,
  393,    0,    0,    0,    0,    0,    0,    0,  393,    0,
    0,  393,  537,  393,  393,    0,    0,    0,  537,  393,
    0,  393,  393,  393,  393,  393,  393,  393,  393,  393,
  393,  393,    0,    0,    0,    0,  393,    0,    0,    0,
  393,  393,    0,  393,  393,  393,    0,  393,  393,  393,
    0,  393,  393,    0,  537,  393,  393,  393,  393,    0,
    0,    0,  393,  393,    0,    0,    0,  393,  393,  393,
  393,  393,  393,  393,  393,    0,    0,    0,  363,    0,
    0,    0,    0,    0,  363,    0,  393,    0,  393,    0,
    0,    0,    0,    0,    0,  537,    0,    0,  393,    0,
  537,    0,  537,  537,  537,  537,  537,  537,  537,  537,
  537,  537,  537,    0,    0,    0,    0,    0,    0,    0,
  363,    0,  537,    0,  537,  537,  537,  537,  537,  537,
  537,    0,  537,  537,    0,  537,  537,  537,  537,  537,
  537,  537,  537,  537,  537,    0,  537,  537,  537,  537,
  537,  537,  537,  537,  537,  537,  537,  537,  537,  537,
  537,  537,  537,  537,  537,  537,  537,  537,    0,  567,
    0,  537,    0,    0,  537,  567,    0,    0,    0,  537,
    0,    0,    0,    0,    0,    0,    0,    0,  363,    0,
    0,  363,    0,  363,  363,    0,    0,    0,  363,  363,
    0,    0,  363,  363,  363,  363,  363,  363,  363,  363,
  363,  567,  363,  363,  363,  363,  363,  363,  363,  363,
  363,  363,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  363,  363,    0,    0,    0,  363,    0,    0,
  363,    0,    0,    0,    0,  363,    0,    0,    0,    0,
    0,    0,  567,    0,    0,    0,    0,  567,  613,  567,
  567,  567,  567,  567,  567,  567,  567,  567,  567,  567,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  567,
    0,  567,    0,  567,    0,  567,  567,  567, 1282,  567,
  567,    0,  567,  567,  567,  567,  567,  567,  567,  567,
  567,  567,    0,    0,    0,  567,  567,  567,  567,  567,
  567,  567,  567,  567,  567,  567,  567,  567,  567,  567,
  567,  567,  567,  388,  567,    0,    0,    0,    0,  388,
 1283,    0,    0,    0,    0,    0,  567,    0,    0,    0,
    0,  613,    0,    0,    0,    0,  613,    0,  613,  613,
  613,  613,  613,  613,  613,  613,  613,  613,  613,    0,
    0,  388,    0,    0,    0,  388,    0,    0,  613,    0,
  613,    0,  613,    0,  613,  613,  613,    0, 1284, 1285,
 1286, 1287,    0, 1288, 1289, 1290, 1291, 1292, 1293, 1294,
 1295,    0,    0, 1296, 1297, 1298, 1299, 1300, 1301, 1302,
 1303,    0,    0,  580,    0,    0,  388,    0,    0,  580,
    0,  388,    0,  388,  388,  388,  388,  388,  388,  388,
  388,  388,  388,  388,    0,  613,    0,    0,  388,    0,
    0,    0,  388,  388,    0,  388,  388,  388,    0,  388,
  388,  388,    0,  388,  388,  580,    0,  388,  388,  388,
  388,    0,    0,    0,  388,  388,    0,    0,    0,  388,
  388,  388,  388,  388,  388,  388,  388,    0,    0,  584,
    0,    0,    0,    0,    0,  584,    0,    0,  388,    0,
  388,    0,    0,    0,    0,    0,  580,    0,    0,    0,
  388,  580,    0,  580,  580,  580,  580,  580,  580,  580,
  580,  580,  580,  580,    0,    0,    0,    0,    0,    0,
    0,  584,    0,  580,    0,  580,    0,  580,    0,  580,
  580,  580,    0,  580,  580,    0,    0,  580,  580,  580,
  580,  580,  580,  580,  580,  580,    0,    0,    0,  580,
  580,  580,  580,  580,  580,  580,  580,    0,    0,  587,
    0,    0,  584,    0,    0,  587,    0,  584,  580,  584,
  584,  584,  584,  584,  584,  584,  584,  584,  584,  584,
  580,    0,    0,    0,    0,    0,    0,    0,    0,  584,
    0,  584,    0,  584,    0,  584,  584,  584,    0,  584,
  584,  587,    0,  584,  584,  584,  584,    0,    0,    0,
  584,  584,    0,    0,    0,  584,  584,  584,  584,  584,
  584,  584,  584,    0,    0,  585,    0,    0,    0,    0,
    0,  585,    0,    0,  584,    0,    0,    0,    0,    0,
    0,    0,  587,    0,    0,    0,  584,  587,    0,  587,
  587,  587,  587,  587,  587,  587,  587,  587,  587,  587,
    0,    0,    0,    0,    0,    0,    0,  585,    0,  587,
    0,  587,    0,  587,    0,  587,  587,  587,    0,  587,
  587,    0,    0,  587,  587,  587,  587,    0,    0,    0,
  587,  587,    0,    0,    0,  587,  587,  587,  587,  587,
  587,  587,  587,    0,    0,  586,    0,    0,  585,    0,
    0,  586,    0,  585,  587,  585,  585,  585,  585,  585,
  585,  585,  585,  585,  585,  585,  587,    0,    0,    0,
    0,    0,    0,    0,    0,  585,    0,  585,    0,  585,
    0,  585,  585,  585,    0,  585,  585,  586,    0,  585,
  585,  585,  585,    0,    0,    0,  585,  585,    0,    0,
    0,  585,  585,  585,  585,  585,  585,  585,  585,    0,
    0,  590,    0,    0,    0,    0,    0,    0,    0,    0,
  585,    0,    0,    0,    0,    0,    0,    0,  586,    0,
    0,    0,  585,  586,    0,  586,  586,  586,  586,  586,
  586,  586,  586,  586,  586,  586,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  586,    0,  586,    0,  586,
    0,  586,  586,  586,    0,  586,  586,    0,    0,  586,
  586,  586,  586,    0,    0,    0,  586,  586,    0,    0,
    0,  586,  586,  586,  586,  586,  586,  586,  586,  591,
    0,    0,    0,    0,  590,    0,    0,    0,    0,  590,
  586,  590,  590,  590,  590,  590,  590,  590,  590,  590,
  590,  590,  586,    0,    0,    0,    0,    0,    0,    0,
    0,  590,    0,  590,    0,  590,    0,  590,  590,  590,
    0,    0,    0,    0,    0,  590,  590,  590,  590,    0,
    0,    0,  590,  590,    0,    0,    0,  590,  590,  590,
  590,  590,  590,  590,  590,  592,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  590,    0,    0,    0,
    0,    0,  591,    0,    0,    0,    0,  591,  590,  591,
  591,  591,  591,  591,  591,  591,  591,  591,  591,  591,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  591,
    0,  591,    0,  591,    0,  591,  591,  591,    0,    0,
    0,    0,    0,  591,  591,  591,  591,    0,    0,    0,
  591,  591,    0,    0,    0,  591,  591,  591,  591,  591,
  591,  591,  591,  594,    0,    0,    0,    0,  592,    0,
    0,    0,    0,  592,  591,  592,  592,  592,  592,  592,
  592,  592,  592,  592,  592,  592,  591,    0,    0,    0,
    0,    0,    0,    0,    0,  592,    0,  592,    0,  592,
    0,  592,  592,  592,    0,    0,    0,    0,    0,  592,
  592,  592,  592,    0,    0,    0,  592,  592,    0,    0,
    0,  592,  592,  592,  592,  592,  592,  592,  592,  595,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  592,    0,    0,    0,    0,    0,  594,    0,    0,    0,
    0,  594,  592,  594,  594,  594,  594,  594,  594,  594,
  594,  594,  594,  594,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  594,    0,  594,    0,  594,    0,  594,
  594,  594,    0,    0,    0,    0,    0,  594,  594,  594,
  594,    0,    0,    0,  594,  594,    0,    0,    0,    0,
    0,  594,  594,  594,  594,  594,  594,  596,    0,    0,
    0,    0,  595,    0,    0,    0,    0,  595,  594,  595,
  595,  595,  595,  595,  595,  595,  595,  595,  595,  595,
  594,    0,    0,    0,    0,    0,    0,    0,    0,  595,
    0,  595,    0,  595,    0,  595,  595,  595,    0,    0,
    0,    0,    0,  595,  595,  595,  595,    0,    0,    0,
  595,  595,    0,    0,    0,    0,    0,  595,  595,  595,
  595,  595,  595,  597,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  595,    0,    0,    0,    0,    0,
  596,    0,    0,    0,    0,  596,  595,  596,  596,  596,
  596,  596,  596,  596,  596,  596,  596,  596,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  596,    0,  596,
    0,  596,    0,  596,  596,  596,    0,    0,    0,    0,
    0,  596,  596,  596,  596,    0,    0,    0,  596,  596,
    0,    0,    0,    0,    0,  596,  596,  596,  596,  596,
  596,  598,    0,    0,    0,    0,  597,    0,    0,    0,
    0,  597,  596,  597,  597,  597,  597,  597,  597,  597,
  597,  597,  597,  597,  596,    0,    0,    0,    0,    0,
    0,    0,    0,  597,    0,  597,    0,  597,    0,  597,
  597,  597,    0,    0,    0,    0,    0,  597,  597,  597,
  597,    0,    0,    0,  597,  597,    0,    0,    0,    0,
    0,  597,  597,  597,  597,  597,  597,  599,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  597,    0,
    0,    0,    0,    0,  598,    0,    0,    0,    0,  598,
  597,  598,  598,  598,  598,  598,  598,  598,  598,  598,
  598,  598,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  598,    0,  598,    0,  598,    0,  598,  598,  598,
    0,    0,    0,    0,    0,    0,    0,  598,  598,    0,
    0,    0,  598,  598,    0,    0,    0,    0,    0,    0,
    0,  598,  598,  598,  598,  600,    0,    0,    0,    0,
  599,    0,    0,    0,    0,  599,  598,  599,  599,  599,
  599,  599,  599,  599,  599,  599,  599,  599,  598,    0,
    0,    0,    0,    0,    0,    0,    0,  599,    0,  599,
    0,  599,    0,  599,  599,  599,    0,    0,    0,    0,
    0,    0,    0,  599,  599,    0,    0,    0,  599,  599,
    0,    0,    0,    0,    0,    0,    0,  599,  599,  599,
  599,  601,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  599,    0,    0,    0,    0,    0,  600,    0,
    0,    0,    0,  600,  599,  600,  600,  600,  600,  600,
  600,  600,  600,  600,  600,  600,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  600,    0,  600,    0,  600,
    0,  600,  600,  600,    0,    0,    0,    0,    0,    0,
    0,  600,  600,    0,    0,    0,  600,  600,    0,    0,
    0,    0,    0,    0,    0,  600,  600,  600,  600,  602,
    0,    0,    0,    0,  601,    0,    0,    0,    0,  601,
  600,  601,  601,  601,  601,  601,  601,  601,  601,  601,
  601,  601,  600,    0,    0,    0,    0,    0,    0,    0,
    0,  601,    0,  601,    0,  601,    0,  601,  601,  601,
    0,    0,    0,    0,    0,    0,    0,  601,  601,    0,
    0,    0,  601,  601,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  601,  601,  604,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  601,    0,    0,    0,
    0,    0,  602,    0,    0,    0,    0,  602,  601,  602,
  602,  602,  602,  602,  602,  602,  602,  602,  602,  602,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  602,
    0,  602,    0,  602,    0,  602,  602,  602,    0,    0,
    0,    0,    0,    0,    0,  602,  602,    0,    0,    0,
  602,  602,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  602,  602,  605,    0,    0,    0,    0,  604,    0,
    0,    0,    0,  604,  602,  604,  604,  604,  604,  604,
  604,  604,  604,  604,  604,  604,  602,    0,    0,    0,
    0,    0,    0,    0,    0,  604,    0,  604,    0,  604,
    0,  604,  604,  604,    0,    0,    0,    0,    0,    0,
    0,    0,  604,    0,    0,    0,  604,  604,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  604,  604,  606,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  604,    0,    0,    0,    0,    0,  605,    0,    0,    0,
    0,  605,  604,  605,  605,  605,  605,  605,  605,  605,
  605,  605,  605,  605,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  605,    0,  605,    0,  605,    0,  605,
  605,  605,    0,    0,    0,    0,    0,    0,    0,    0,
  605,    0,    0,    0,    0,  605,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  605,  605,  607,    0,    0,
    0,    0,  606,    0,    0,    0,    0,  606,  605,  606,
  606,  606,  606,  606,  606,  606,  606,  606,  606,  606,
  605,    0,    0,    0,    0,    0,    0,    0,    0,  606,
    0,  606,    0,  606,    0,  606,  606,  606,    0,    0,
    0,    0,    0,    0,    0,    0,  606,    0,    0,    0,
    0,  606,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  606,  606,  608,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  606,    0,    0,    0,    0,    0,
  607,    0,    0,    0,    0,  607,  606,  607,  607,  607,
  607,  607,  607,  607,  607,  607,  607,  607,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  607,    0,  607,
    0,  607,    0,  607,  607,  607,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  607,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  607,
  607,  609,   61,    0,    0,    0,  608,    0,    0,    0,
    0,  608,  607,  608,  608,  608,  608,  608,  608,  608,
  608,  608,  608,  608,  607,   62,    0,    0,    0,    0,
    0,    0,    0,  608,    0,  608,    0,  608,   63,  608,
  608,  608,    0,   65,    0,    0,    0,    0,   66,    0,
   67,   68,   69,   70,    0,  608,    0,    0,   71,    0,
    0,    0,   72,    0,    0,  608,  608,  610,    0,    0,
    0,    0,    0,    0,   73,    0,    0,   74,  608,   75,
    0,    0,    0,    0,  609,    0,    0,    0,    0,  609,
  608,  609,  609,  609,  609,  609,  609,  609,  609,  609,
  609,  609,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  609,    0,  609,    0,  609,    0,  609,  609,  609,
    0,  905,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  609,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  609,    0,    0,    0,    0,    0,
  610,    0,    0,    0,  470,  610,  609,  610,  610,  610,
  610,  610,  610,  610,  610,  610,  610,  610,  609,    0,
    0,    0,  363,    0,    0,    0,    0,  610,    0,  610,
    0,  610,    0,  610,  610,  610,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  610,
    0,    0,    0,    0,  905,    0,    0,    0,  363,  905,
  610,  905,  905,  905,  905,  905,  905,  905,  905,  905,
  905,    0,  610,    0,    0,    0,    0,  419,    0,    0,
    0,  905,    0,  905,  610,  905,    0,  905,  905,  905,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  419,    0,    0,    0,  363,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  363,    0,  363,
    0,  363,    0,    0,  363,    0,  363,  363,  905,  363,
  363,  363,  363,  363,  363,  363,  363,  363,  363,    0,
  363,  363,  363,  363,  363,  363,  363,  363,  363,  363,
  363,  363,  363,  363,  363,  363,  363,  363,  363,  363,
  363,  363,    0,  363,    0,  363,    0,    0,  363,    0,
    0,    0,  356,  363,  419,  419,  419,  419,    0,  419,
    0,  419,  419,  363,  419,  419,  419,  419,  419,    0,
  419,  419,  419,  419,   59,  419,  419,  419,  419,  419,
  419,  419,  419,  419,  419,  419,  419,  419,  419,  419,
  419,  419,  419,  419,  419,  419,  419,   59,  356,  363,
  419,    0,    0,  419,    0,    0,    0,    0,  419,    0,
   59,    0,    0,    0,    0,   59,    0,    0,    0,    0,
   59,    0,   59,   59,   59,   59,    0,    0,    0,    0,
   59,    0,    0,    0,   59,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   59,    0,    0,   59,
    0,   59,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  363,
  363,  363,  363,  363,    0,   59,   59,  363,  363,  226,
  363,  363,  363,  363,  363,  363,  363,  363,  363,  363,
    0,  363,  363,  363,  363,  363,  363,  363,  363,  363,
  363,  363,  363,  363,  363,  363,  363,  363,  363,  363,
  363,  363,  363,    0,    0,    0,  363,   95,    0,  363,
    0,    0,    0,    0,  363,   96,   97,   98,   99,    0,
    0,  100,  101,    0,  102,  103,  104,  105,  106,  107,
  108,    0,    0,    0,    0,    0,  109,    0,  110,  111,
  112,  113,  114,  115,    0,    0,  116,    0,    0,    0,
  117,  118,    0,  119,  120,  121,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  122,    0,  123,    0,  124,
  125,    0,    0,  126,    0,  127,  128,  129,  130,  131,
  132,  133,  134,  135,  136,  137,  138,    0,  139,    0,
    0,  140,    0,    0,    0,  141,  142,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  143,    0,    0,    0,
  144,    0,    0,    0,    0,  145,  146,  147,  148,  149,
    0,    0,    0,  150,    0,  151,    0,    0,  303,    0,
    0,  152,  153,    0,    0,    0,   96,   97,   98,   99,
    0,    0,  100,  101,    0,  102,  103,  104,  105,  106,
  107,  108,    0,  154,  155,  156,  157,  109,    0,  110,
  111,  112,  113,  114,  115,    0,    0,  116,    0,    0,
    0,  117,  118,    0,  119,  120,  121,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  122,    0,  123,    0,
  124,  125,    0,    0,  126,    0,  127,  128,  129,  130,
  131,  132,  133,  134,  135,  136,  137,  138,    0,  139,
    0,    0,  140,    0,    0,    0,  141,  142,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  143,    0,    0,
    0,  144,    0,    0,    0,    0,  145,  146,  147,  148,
  149,    0,    0,    0,  150,    0,  151,    0,    0,  910,
    0,    0,  152,  153,    0,    0,    0,  910,  910,  910,
  910,    0,    0,  910,  910,    0,  910,  910,  910,  910,
  910,  910,  910,    0,  154,  155,  156,  157,  910,    0,
  910,  910,  910,  910,  910,  910,    0,    0,  910,    0,
    0,    0,  910,  910,    0,  910,  910,  910,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  910,    0,  910,
    0,  910,  910,    0,    0,  910,    0,  910,  910,  910,
  910,  910,  910,  910,  910,  910,  910,  910,  910,    0,
  910,    0,    0,  910,    0,    0,    0,  910,  910,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  910,    0,
    0,    0,  910,    0,    0,    0,    0,  910,  910,  910,
  910,  910,    0,    0,    0,  910,    0,  910,    0,    0,
  775,    0,    0,  910,  910,    0,    0,    0,  775,  775,
  775,  775,    0,    0,  775,  775,    0,  775,  775,  775,
  775,  775,  775,  775,    0,  910,  910,  910,  910,  775,
    0,  775,  775,  775,  775,  775,  775,    0,    0,  775,
    0,    0,    0,  775,  775,    0,  775,  775,  775,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  775,    0,
  775,    0,  775,  775,    0,    0,  775,    0,  775,  775,
  775,  775,  775,  775,  775,  775,  775,  775,  775,  775,
    0,  775,    0,    0,  775,    0,    0,    0,  775,  775,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  775,
    0,    0,    0,  775,    0,    0,    0,    0,  775,  775,
  775,  775,  775,    0,    0,    0,  775,    0,  775,    0,
    0,  717,    0,    0,  775,  775,    0,    0,    0,   96,
   97,    0,   99,    0,    0,  100,  288,    0,    0,    0,
  104,  105,  106,    0,  108,    0,  775,  775,  775,  775,
  109,    0,   61,  111,    0,    0,    0,    0,    0,    0,
  116,    0,    0,    0,    0,  118,    0,  119,  120,  121,
    0,    0,    0,    0,    0,   62,    0,    0,    0,    0,
    0,  123,    0,  124,  125,    0,    0,  126,   63,    0,
  128,    0,  130,   65,  132,  133,  134,  289,   66,  137,
   67,   68,   69,   70,    0,    0,    0,    0,   71,  141,
  142,    0,   72,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   73,    0,    0,   74,    0,   75,
  531,  718,    0,    0,  144,    0,    0,    0,    0,    0,
  146,  147,  148,  149,    0,    0,    0,  150,    0,  151,
    0,    0,  303,    0,    0,  152,  153,    0,    0,    0,
   96,   97,    0,   99,    0,    0,  100,  288,    0,    0,
    0,  104,  105,  106,    0,  108,    0,  154,  337,  156,
  157,  109,    0,    0,  111,    0,    0,    0,    0,    0,
    0,  116,    0,    0,    0,    0,  118,    0,  119,  120,
  121,    0,    0,    0,  665,    0,    0,    0,    0,    0,
    0,    0,  123,    0,  124,  125,    0,    0,  126,    0,
    0,  128,    0,  130,    0,  132,  133,  134,  289,    0,
  137,    0,    0,  139,    0,    0,    0,    0,    0,    0,
  141,  142,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  144,    0,    0,    0,    0,
    0,  146,  147,  148,  149,    0,    0,    0,  150,    0,
  151,    0,    0,  303,    0,    0,  152,  153,    0,    0,
    0,   96,   97,    0,   99,    0,    0,  100,  288,    0,
    0,    0,  104,  105,  106,    0,  108,    0,  154,  337,
  156,  157,  109,    0,  385,  111,    0,    0,    0,    0,
    0,    0,  116,    0,    0,    0,    0,  118,    0,  119,
  120,  121,    0,    0,    0,    0,    0,  385,    0,    0,
    0,    0,    0,  123,    0,  124,  125,    0,    0,  126,
  385,    0,  128,    0,  130,  385,  132,  133,  134,  289,
  385,  137,  385,  385,  385,  385,    0,    0,    0,    0,
  385,  141,  142,    0,  385,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  385,    0,    0,  385,
    0,  385,    0,    0,    0,    0,  144,    0,    0,    0,
    0,    0,  146,  147,  148,  149,    0,    0,    0,  150,
    0,  151,    0,   96,   97,    0,   99,  152,  153,  100,
  288,    0,    0,  385,  104,  105,  106,    0,  108,    0,
    0,    0,    0,    0,  109,    0,   30,  111,    0,  154,
  337,  156,  157,    0,  116,    0,    0,    0,    0,  118,
    0,  119,  120,  121,    0,    0,    0,    0,    0,   30,
    0,    0,    0,    0,    0,  123,  385,  124,  125,    0,
    0,  126,   30,    0,  128,    0,  130,   30,  132,  133,
  134,  289,   30,  137,   30,   30,   30,   30,    0,    0,
   30,    0,   30,  141,  142,    0,   30,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   30,    0,
    0,   30,    0,   30,  723,  972,    0,    0,  144,    0,
    0,    0,    0,    0,  146,  147,  148,  149,    0,    0,
    0,  150,    0,  151,    0,    0,    0,    0,    0,  152,
  153,   30,   30,    0,   96,   97,    0,   99,    0,    0,
  100,  288,    0,    0,    0,  104,  105,  106,    0,  108,
    0,  154,  724,  156,  157,  109,    0,   30,  111,   30,
    0,  725,    0,    0,    0,  116,    0,    0,    0,    0,
  118,    0,  119,  120,  121,    0,    0,    0,    0,    0,
   30,    0,    0,    0,    0,    0,  123,    0,  124,  125,
    0,    0,  126,   30,    0,  128,    0,  130,   30,  132,
  133,  134,  289,   30,  137,   30,   30,   30,   30,    0,
    0,    0,    0,   30,  141,  142,    0,   30,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   30,
    0,    0,   30,    0,   30,  723,    0,    0,    0,  144,
    0,    0,    0,    0,    0,  146,  147,  148,  149,    0,
    0,    0,  150,    0,  151,    0,    0,  521,    0,    0,
  152,  153,   30,   30,    0,   96,   97,    0,   99,    0,
    0,  100,  288,    0,    0,    0,  104,  105,  106,    0,
  108,    0,  154,  724,  156,  157,  109,    0,    0,  111,
    0,    0,  725,    0,    0,    0,  116,    0,    0,    0,
    0,  118,  266,  119,  120,  121,    0,    0,    0,    0,
    0,   97,    0,   99,    0,    0,  100,  123,    0,  124,
  125,  104,    0,  126,    0,  108,  128,    0,  130,    0,
  132,  133,  134,  289,  111,  137,    0,    0,    0,    0,
    0,  116,  744,    0,    0,    0,  118,    0,    0,    0,
  121,   97,    0,   99,    0,    0,  100,    0,    0,    0,
    0,  104,  123,    0,  124,  108,    0,    0,  126,    0,
  291,    0,    0,    0,  111,    0,  133,  134,    0,    0,
  137,  116,    0,  267,    0,    0,  118,  815,    0,    0,
  121,    0,    0,    0,    0,    0,   97,    0,   99,    0,
    0,  100,  123,    0,  124,    0,  104,    0,  126,    0,
  108,    0,    0,  154,  522,    0,  133,  134,    0,  111,
  137,    0,    0,  253,    0,    0,  116,    0,    0,    0,
    0,  118, 1077,    0,    0,  121,    0,    0,    0,    0,
    0,   97,    0,   99,    0,    0,  100,  123,    0,  124,
    0,  104,    0,  126,    0,  108,    0,    0,    0,   89,
    0,  133,  134,    0,  111,  137,    0,    0,  267,    0,
    0,  116,    0,    0,    0,    0,  118,    0,    0,    0,
  121,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  123,    0,  124,    0,    0,    0,  126,  745,
    0,    0,    0,    0,    0,    0,  133,  134,    0,    0,
  137,    0,    0,  267,    0,    0,    0,    0,   43,    0,
    0,    0,   43,    0,    0,    0,   43,    0,   43,    0,
    0,   43,    0,   43,    0,    0,   43,    0,   43,    0,
   43,    0,   43,    0,   89,   43,    0,    0,   43,   43,
    0,    0,    0,    0,    0,    0,   43,   43,   43,    0,
    0,   43,   43,   43,    0,   43,    0,    0,   43,    0,
   43,   43,   43,   43,    0,    0,    0,   43,   43,   43,
    0,    0,   43,   43,   43,    0,    0,    0,    0,   89,
    0,   43,   43,    0,   43,   43,   43,   43,   43,   43,
    0,    0,   44,   43,    0,    0,   44,    0,    0,    0,
   44,    0,   44,    0,    0,   44,    0,   44,    0,    0,
   44,    0,   44,    0,   44,    0,   44,   43,   43,   44,
    0,    0,   44,   44,    0,    0,    0,    0,    0,    0,
   44,   44,   44,    0,    0,   44,   44,   44,    0,   44,
    0,    0,   44,    0,   44,   44,   44,   44,    0,    0,
    0,   44,   44,   44,    0,    0,   44,   44,   44,    0,
    0,    0,    0,    0,   43,   44,   44,    0,   44,   44,
   44,   44,   44,   44,    0,    0,   41,   44,    0,    0,
   41,    0,    0,    0,   41,    0,   41,    0,    0,   41,
    0,   41,    0,    0,   41,    0,   41,    0,   41,    0,
   41,   44,   44,   41,    0,    0,   41,   41,    0,    0,
    0,    0,    0,    0,   41,   41,   41,    0,    0,   41,
   41,   41,    0,   41,    0,    0,   41,    0,   41,   41,
   41,   41,    0,    0,    0,   41,   41,   41,    0,    0,
   41,   41,   41,    0,    0,    0,    0,    0,   44,   41,
   41,    0,   41,   41,    0,   41,   41,   41,  363,    0,
   42,   41,    0,    0,   42,    0,    0,    0,   42,    0,
   42,    0,    0,   42,    0,   42,    0,    0,   42,    0,
   42,    0,   42,    0,   42,   41,   41,   42,    0,    0,
   42,   42,    0,    0,  363,    0,    0,    0,   42,   42,
   42,    0,    0,   42,   42,   42,    0,   42,    0,    0,
   42,    0,   42,   42,   42,   42,    0,    0,    0,   42,
   42,   42,    0,    0,   42,   42,   42,    0,    0,    0,
    0,    0,   41,   42,   42,    0,   42,   42,    0,   42,
   42,   42,    0,    0,    0,   42,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  363,  363,  363,  363,   42,
   42,    0,  363,  363,    0,    0,  363,  363,  363,  363,
  363,  363,  363,  363,  363,    0,  363,  363,  363,  363,
  363,  363,  363,  363,  363,  363,  363,  363,  363,  363,
  363,  363,  363,  363,  363,  363,  363,  363,    0,   45,
    0,  363,    0,   59,  363,    0,   42,   59,    0,   59,
    0,    0,   59,    0,   59,    0,    0,   59,    0,   59,
    0,   59,    0,   59,    0,    0,   59,    0,    0,   59,
   59,    0,    0,    0,    0,    0,    0,   59,   59,   59,
    0,    0,   59,   59,   59,    0,   59,    0,    0,   59,
    0,   59,   59,   59,   59,    0,    0,    0,   59,   59,
   59,    0,    0,   59,   59,   59,    0,    0,    0,    0,
    0,    0,   59,   59,    0,   59,   59,    0,   59,   59,
   59,    0,    0,   46,   59,    0,    0,   59,    0,    0,
    0,   59,    0,   59,    0,    0,   59,    0,   59,    0,
    0,   59,    0,   59,    0,   59,    0,   59,   45,    0,
   59,    0,    0,   59,   59,    0,    0,    0,    0,    0,
    0,   59,   59,   59,    0,    0,   59,   59,   59,    0,
   59,    0,    0,   59,    0,   59,   59,   59,   59,    0,
    0,    0,   59,   59,   59,    0,    0,   59,   59,   59,
    0,    0,    0,    0,    0,   59,   59,   59,    0,   59,
   59,    0,   59,   59,   59,    0,    0,    0,   59,    0,
    0,    0,    0,   60,    0,   60,    0,   60,    0,   60,
    0,    0,   60,    0,   60,   60,    0,   60,    0,   60,
    0,   60,   46,   60,   60,   60,   60,    0,    0,   60,
   60,    0,    0,    0,    0,   60,   60,   60,   60,   60,
    0,    0,   60,   60,   60,    0,   60,    0,   60,   60,
   60,   60,   60,   60,   60,   60,    0,   60,   60,   60,
   60,    0,    0,   60,   60,   60,    0,   60,    0,   59,
    0,    0,   60,   60,    0,   60,   60,    0,   60,   60,
   60,    0,    0,    0,   60,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   59,    0,   60,   60,   59,    0,   59,    0,
    0,   59,    0,   59,   59,    0,   59,   60,   59,    0,
   59,    0,   59,   59,   59,   59,    0,    0,   59,   59,
    0,    0,    0,    0,   59,    0,   59,   59,   59,    0,
    0,   59,    0,   59,    0,   59,    0,    0,   59,    0,
   59,   59,   59,   59,    0,   60,    0,   59,   59,   59,
    0,    0,   59,   59,   59,    0,    0,    0,    0,    0,
    0,   59,   59,    0,   59,   59,   59,   59,   59,   59,
   59,    0,   59,   59,    0,   59,    0,   59,   59,    0,
   59,    0,   59,    0,   59,    0,   59,   59,   59,   59,
    0,    0,   59,   59,    0,    0,    0,   90,   59,    0,
   59,   59,   59,    0,    0,   59,   59,   59,    0,   59,
    0,    0,   59,    0,   59,   59,   59,   59,    0,    0,
    0,   59,   59,   59,    0,    0,   59,   59,   59,    0,
    0,    0,    0,    0,    0,   59,   59,    0,   59,   59,
    0,   59,   59,   59,   59,    0,    0,   59,    0,    0,
    0,    0,   59,    0,    0,    0,   59,    0,   59,    0,
    0,   59,    0,   59,   59,    0,   59,    0,   59,    0,
   59,   91,   59,   59,   59,   59,    0,    0,   59,   59,
   59,    0,    0,    0,   59,    0,   59,   59,   59,    0,
    0,   59,    0,   59,    0,   59,    0,    0,   59,    0,
   59,   59,   59,   59,    0,    0,    0,   59,   59,   59,
    0,    0,   59,   59,   59,    0,    0,    0,   59,    0,
    0,   59,   59,    0,   59,   59,   59,   59,   59,   59,
   59,    0,   59,   59,    0,   59,    0,   59,   59,    0,
   59,    0,   59,    0,   59,    0,   59,   59,   59,   59,
    0,    0,   59,   59,    0,    0,    0,  113,   59,    0,
   59,   59,   59,    0,    0,   59,   59,   59,    0,   59,
    0,    0,   59,    0,   59,   59,   59,   59,    0,    0,
    0,   59,   59,   59,    0,    0,   59,   59,   59,    0,
    0,    0,    0,    0,    0,   59,   59,    0,   59,   59,
    0,   59,   59,   59,   59,    0,    0,   59,    0,    0,
    0,    0,   59,    0,    0,    0,   59,    0,   59,    0,
    0,   59,    0,   59,   59,    0,   59,    0,   59,    0,
   59,  114,   59,   59,   59,   59,    0,    0,   59,   59,
   59,    0,    0,    0,   59,    0,   59,   59,   59,    0,
    0,   59,    0,   59,    0,   59,    0,    0,   59,    0,
   59,   59,   59,   59,    0,    0,    0,   59,   59,   59,
    0,    0,   59,   59,   59,    0,    0,    0,   59,    0,
    0,   59,   59,    0,   59,   59,   59,   59,   59,   59,
   59,    0,   59,   59,    0,   59,    0,   59,   59,    0,
   59,    0,   59,    0,   59,    0,   59,   59,   59,   59,
    0,    0,   59,   59,    0,    0,    0,  244,   59,    0,
   59,   59,   59,    0,    0,   59,    0,   59,    0,   59,
    0,    0,   59,    0,   59,   59,   59,   59,    0,    0,
    0,   59,   59,   59,    0,    0,   59,   59,   59,  363,
    0,    0,    0,    0,    0,   59,   59,    0,   59,   59,
    0,   59,   59,   59,   59,    0,    0,   59,    0,    0,
    0,    0,  363,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  363,    0,    0,    0,    0,
  363,  245,    0,  363,    0,  363,    0,  363,  363,  363,
  363,    0,    0,    0,    0,  363,    0,    0,    0,  363,
    0,    0,    0,  363,    0,    0,    0,    0,    0,    0,
    0,  363,   96,   97,  363,   99,  363,    0,  100,  288,
    0,    0,    0,  104,  105,  106,    0,  108,   59,    0,
    0,    0,    0,  109,    0,  363,  111,    0,    0,    0,
    0,    0,    0,  116,    0,  363,    0,  295,  118,  363,
  119,  120,  121,    0,  594,    0,    0,    0,    0,    0,
    0,  595,  363,    0,  123,    0,  124,  125,    0,    0,
  126,    0,    0,  128,    0,  130,    0,  132,  133,  134,
  289,    0,  137,    0,    0,    0,    0,    0,    0,  596,
    0,  363,  141,  142,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  144,  900,    0,
  597,    0,    0,  146,  147,  148,  149,    0,    0,    0,
  150,    0,  151,    0,   96,   97,    0,   99,  152,  153,
  100,  288,    0,    0,    0,  104,  105,  106,    0,  108,
    0,    0,    0,    0,    0,  109,    0,    0,  111,    0,
  154,  492,  156,  157,    0,  116,    0,    0,    0,    0,
  118,    0,  119,  120,  121,    0,  594,    0,    0,    0,
    0,    0,    0,  595,    0,    0,  123,    0,  124,  125,
    0,    0,  126,    0,    0,  128,    0,  130,    0,  132,
  133,  134,  289,    0,  137,    0,    0,    0,    0,    0,
    0,  596,    0,    0,  141,  142,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  144,
    0,    0,  597,    0,    0,  146,  147,  148,  149,    0,
    0,    0,  150,    0,  151,    0,   96,   97,    0,   99,
  152,  153,  100,  288,    0,    0,    0,  104,  105,  106,
    0,  108,    0,    0,    0,    0,    0,  109,    0,    0,
  111,    0,  154,  492,  156,  157,    0,  116,    0,    0,
    0,    0,  118,    0,  119,  120,  121,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  123,    0,
  124,  125,  789,    0,  126,    0,    0,  128,    0,  130,
    0,  132,  133,  134,  289,    0,  137,    0,    0,    0,
    0,    0,    0,  790,    0,    0,  141,  142,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  531,    0,    0,
    0,  144,    0,    0,    0,    0,    0,  146,  147,  148,
  149,    0,    0,    0,  150,    0,  151,    0,   96,   97,
    0,   99,  152,  153,  100,  288,    0,    0,    0,  104,
  105,  106,    0,  108,    0,    0,    0,    0,    0,  109,
    0,    0,  111,    0,  154,  337,  156,  157,    0,  116,
    0,    0,    0,    0,  118,    0,  119,  120,  121,    0,
  594,    0,    0,    0,    0,    0,    0,  595,    0,    0,
  123,    0,  124,  125,    0,    0,  126,    0,    0,  128,
    0,  130,    0,  132,  133,  134,  289,    0,  137,    0,
    0,    0,    0,    0,    0,  596,    0,    0,  141,  142,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  144,    0,    0,    0,    0,    0,  146,
  147,  148,  149,    0,    0,    0,  150,    0,  151,    0,
   96,   97,    0,   99,  152,  153,  100,  288,    0,    0,
    0,  104,  105,  106,    0,  108,    0,    0,    0,    0,
    0,  109,    0,    0,  111,    0,  154,  492,  156,  157,
    0,  116,    0,    0,    0,    0,  118,    0,  119,  120,
  121,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  123,    0,  124,  125,    0,    0,  126,    0,
    0,  128,    0,  130,    0,  132,  133,  134,  289,    0,
  137,    0,    0,  139,    0,    0,    0,    0,    0,    0,
  141,  142,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  144,    0,    0,    0,    0,
    0,  146,  147,  148,  149,    0,    0,    0,  150,    0,
  151,    0,   96,   97,    0,   99,  152,  153,  100,  288,
    0,    0,    0,  104,  105,  106,    0,  108,    0,    0,
    0,    0,    0,  109,    0,    0,  111,    0,  154,  337,
  156,  157,    0,  116,    0,    0,    0,    0,  118,    0,
  119,  120,  121,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  123,    0,  124,  125,    0,    0,
  126,    0,    0,  128,    0,  130,    0,  132,  133,  134,
  289,    0,  137,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  141,  142,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  531,    0,    0,    0,  144,    0,    0,
    0,    0,    0,  146,  147,  148,  149,    0,    0,    0,
  150,    0,  151,    0,   96,   97,    0,   99,  152,  153,
  100,  288,    0,    0,    0,  104,  105,  106,    0,  108,
    0,    0,    0,    0,    0,  109,    0,    0,  111,    0,
  154,  337,  156,  157,    0,  116,    0,    0,    0,    0,
  118,    0,  119,  120,  121,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  123,    0,  124,  125,
    0,    0,  126,    0,    0,  128,    0,  130,    0,  132,
  133,  134,  289,    0,  137,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  141,  142,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  866,    0,    0,  144,
    0,    0,    0,    0,    0,  146,  147,  148,  149,    0,
    0,    0,  150,    0,  151,    0,   96,   97,    0,   99,
  152,  153,  100,  288,    0,    0,    0,  104,  105,  106,
    0,  108,    0,    0,    0,    0,    0,  109,    0,    0,
  111,    0,  154,  337,  156,  157,    0,  116,    0,    0,
    0,    0,  118,    0,  119,  120,  121,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  123,    0,
  124,  125,    0,    0,  126,    0,    0,  128,    0,  130,
    0,  132,  133,  134,  289,    0,  137,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  141,  142,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  534,    0,    0,
    0,  144,    0,    0,    0,    0,    0,  146,  147,  148,
  149,    0,    0,    0,  150,    0,  151,    0,   96,   97,
    0,   99,  152,  153,  100,  288,    0,    0,    0,  104,
  105,  106,    0,  108,    0,    0,    0,    0,    0,  109,
    0,    0,  111,    0,  154,  337,  156,  157,    0,  116,
    0,    0,    0,    0,  118,    0,  119,  120,  121,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  123,    0,  124,  125,    0,    0,  126,    0,    0,  128,
    0,  130,    0,  132,  133,  134,  289,    0,  137,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  141,  142,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  144,    0,    0,    0,    0,    0,  146,
  147,  148,  149,    0,    0,    0,  150,    0,  151,    0,
   96,   97,    0,   99,  152,  153,  100,  288,    0,    0,
    0,  104,  105,  106,    0,  108,    0,    0,    0,    0,
    0,  109,    0,    0,  111,    0,  154,  337,  156,  157,
    0,  116,    0,    0,    0,    0,  118,    0,  119,  120,
  121,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  123,    0,  124,  125,    0,    0,  126,    0,
    0,  128,    0,  130,    0,  132,  133,  134,  289,    0,
  137,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  141,  142,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  144,    0,    0,    0,    0,
    0,  146,  147,  148,  149,    0,    0,    0,  150,    0,
  151,    0,   96,   97,    0,   99,  152,  153,  100,  288,
    0,    0,    0,  104,  105,  106,    0,  108,    0,    0,
    0,    0,    0,  109,    0,    0,  111,    0,  154,  484,
  156,  157,    0,  116,    0,    0,    0,    0,  118,    0,
  119,  120,  121,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  123,    0,  124,  125,    0,    0,
  126,    0,    0,  128,    0,  130,    0,  132,  133,  134,
  289,    0,  137,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  141,  142,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  144,    0,    0,
    0,    0,    0,  146,  147,  148,  149,    0,    0,    0,
  150,    0,  151,    0,  633,  633,    0,  633,  152,  153,
  633,  633,    0,    0,    0,  633,  633,  633,    0,  633,
    0,    0,    0,    0,    0,  633,    0,    0,  633,    0,
  154,  492,  156,  157,    0,  633,    0,    0,    0,    0,
  633,    0,  633,  633,  633,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  633,    0,  633,  633,
    0,    0,  633,    0,    0,  633,    0,  633,    0,  633,
  633,  633,  633,    0,  633,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  633,  633,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  633,
    0,    0,    0,    0,    0,  633,  633,  633,  633,    0,
    0,    0,  633,    0,  633,    0,   87,   87,    0,   87,
  633,  633,   87,   87,    0,    0,    0,   87,   87,   87,
    0,   87,    0,    0,    0,    0,    0,   87,    0,    0,
   87,    0,  633,  633,  633,  633,    0,   87,    0,    0,
    0,    0,   87,    0,   87,   87,   87,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   87,    0,
   87,   87,    0,    0,   87,    0,    0,   87,    0,   87,
    0,   87,   87,   87,   87,    0,   87,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   87,   87,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   87,    0,    0,    0,    0,    0,   87,   87,   87,
   87,    0,    0,    0,   87,    0,   87,    0,  159,  159,
    0,  159,   87,   87,  159,  159,    0,    0,    0,  159,
  159,  159,    0,  159,    0,    0,    0,    0,    0,  159,
    0,    0,  159,    0,   87,   87,   87,   87,    0,  159,
    0,    0,    0,    0,  159,    0,  159,  159,  159,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  159,    0,  159,  159,    0,    0,  159,    0,    0,  159,
    0,  159,    0,  159,  159,  159,  159,    0,  159,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  159,  159,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  159,    0,    0,    0,    0,    0,  159,
  159,  159,  159,    0,    0,    0,  159,    0,  159,    0,
   96,   97,    0,   99,  159,  159,  100,  288,    0,    0,
    0,  104,  105,  106,    0,  108,    0,    0,    0,    0,
    0,  109,    0,   59,  111,    0,  159,  159,  159,  159,
    0,  116,    0,    0,    0,    0,  118,    0,  119,  120,
  121,    0,    0,    0,    0,    0,   59,    0,    0,    0,
    0,    0,  123,    0,  124,  125,    0,    0,  126,   59,
    0,  128,    0,  130,   59,  132,  133,  134,  289,   59,
  137,   59,   59,   59,   59,    0,    0,    0,    0,   59,
    0,    0,    0,   59,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   59,    0,    0,   59,    0,
   59,    0,    0,    0,    0,  144,    0,    0,    0,    0,
    0,  146,  147,  148,  149,    0,    0,    0,  150,    0,
  151,    0,    0,    0,   59,   59,  152,  153,  228,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  656,    0,  656,    0,  656,  154,  292,
  656,  157,  656,  656,    0,  656,    0,  656,    0,  656,
    0,  656,  656,  656,    0,    0,    0,  656,  656,    0,
    0,    0,    0,  656,    0,  656,  656,    0,    0,    0,
  656,    0,    0,    0,  656,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  656,  656,    0,  656,    0,
    0,    0,  656,  656,    0,    0,    0,    0,    0,    0,
  656,  656,    0,    0,  656,    0,    0,  656,    0,    0,
    0,    0,  656,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   96,   97,    0,   99,    0,    0,  100,
  288,    0,  656,  656,  104,  105,  106,    0,  108,    0,
    0,    0,    0,    0,  109,  656,    0,  111,    0,    0,
    0,    0,    0,    0,  116,    0,    0,    0,    0,  118,
    0,  119,  120,  121,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  123,    0,  124,  125,    0,
    0,  126,    0,  656,  128,    0,  130,    0,  132,  133,
  134,  289,  655,  137,  655,    0,  290,  655,    0,  655,
  655,    0,  655,    0,  655,    0,  655,    0,  655,  655,
  655,    0,    0,    0,  655,  655,    0,    0,    0,    0,
  655,    0,  655,  655,    0,    0,    0,  655,  291,    0,
    0,  655,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  655,    0,  655,    0,    0,    0,  655,
  655,    0,    0,    0,    0,    0,    0,  655,  655,    0,
    0,  655,    0,    0,  655,    0,    0,    0,    0,  655,
    0,  154,  292,  655,    0,  655,    0,    0,  655,    0,
  655,  655,    0,  655,    0,  655,    0,  655,    0,  655,
  655,  655,    0,    0,    0,  655,  655,    0,    0,    0,
    0,  655,  655,  655,  655,    0,    0,    0,  655,    0,
    0,    0,  655,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  655,    0,  655,    0,    0,    0,
  655,  655,    0,    0,    0,    0,    0,    0,  655,  655,
  655,   97,  655,   99,    0,  655,  100,    0,    0, 1229,
  655,  104,    0,  250,    0,  108,    0,  251, 1230, 1231,
    0,    0,    0,  252,  111,    0,    0,    0,    0, 1232,
    0,  116,    0,   97,    0,   99,  118,    0,  100,    0,
  121, 1229,    0,  104,    0,  250,    0,  108,    0,  251,
 1230, 1231,  123,    0,  124,  252,  111,    0,  126,    0,
    0, 1232,    0,  116,    0,    0,  133,  134,  118,    0,
  137,    0,  121, 1233,    0,    0,    0,    0,  254,    0,
    0,  655,    0,    0,  123,    0,  124,    0,    0,    0,
  126,    0,    0,    0,    0,    0,    0,    0,  133,  134,
    0,    0,  137,    0,    0, 1233,    0,  655,    0,  655,
  254, 1234,  655,    0,  655,    0,    0,  655,    0,  655,
    0,  655,    0,  655,    0,    0,    0,    0,    0,  655,
  655,    0,    0,    0,    0,    0,    0,  655,  655,    0,
    0,    0,  655,    0,    0,    0,  655,    0,    0, 1235,
    0,    0,   59,    0,   59,    0,    0,   59,  655,    0,
  655,    0,   59,    0,  655,  655,   59,    0,    0,    0,
    0,    0,  655,  655,    0,   59,  655,    0,    0,  655,
    0, 1235,   59,    0,  655,    0,    0,   59,    0,    0,
    0,   59,    0,   59,    0,   59,   59,    0,   59,    0,
   59,   59,    0,   59,    0,   59,   59,    0,    0,   59,
   59,    0,   59,    0,    0,    0,    0,   59,   59,   59,
    0,   59,    0,    0,   59,    0,   59,    0,    0,    0,
    0,   59,    0,    0,    0,   59,   97,   59,   99,   59,
    0,  100,    0,    0,   59,    0,  104,   59,  250,   59,
  108,    0,  251,   59,    0,  655,   59,  186,  252,  111,
    0,   59,   59,    0,    0,   59,  116,    0,   59,    0,
    0,  118,    0,    0,    0,  121,    0,    0,    0,    0,
   59,    0,   59,    0,    0,   59,    0,  123,    0,  124,
   59,    0,    0,  126,   59,    0,    0,    0,    0,  186,
   59,  133,  134,   59,    0,  137,    0,    0,  253,    0,
   59,    0,    0,  254,    0,   59,    0,    0,    0,   59,
   97,   59,   99,   59,    0,  100,    0,    0,   59,    0,
  104,   59,    0,   59,  108,    0,    0,   59,    0,    0,
   59,    0,    0,  111,   59,   59,   59,    0,    0,   59,
  116,    0,   59,    0,    0,  118,    0,    0,    0,  121,
   97,  574,   99,    0,    0,  100,    0, 1158,  575,    0,
  104,  123,    0,  124,  108,    0,    0,  126,    0,    0,
  576,    0,    0,  111,   89,  133,  134,    0,    0,  137,
  116,    0,  577,    0,    0,  118,    0, 1159,    0,  121,
   97,    0,   99,    0,    0,  100,    0,    0,    0,    0,
  104,  123,    0,  124,  108,    0,    0,  126, 1160,    0,
    0,    0,    0,  111,    0,  133,  134,    0,   59,  137,
  116,    0,  267,    0,    0,  118,    0,    0,    0,  121,
    0,    0,    0,    0,   97,    0,   99,    0,    0,  100,
    0,  123,    0,  124,  104,    0,    0,  126,  108,    0,
    0,    0,    0,    0,    0,  133,  134,  111,  578,  137,
    0,    0,  267,    0,  116,    0,    0,    0,    0,  118,
    0,    0,    0,  121,   97,    0,   99,    0,    0,  100,
    0,    0,    0,    0,  104,  123,    0,  124,  108,    0,
    0,  126,    0,    0,    0,  881,    0,  111,   89,  133,
  134,    0,    0,  137,  116,    0,  267,    0,    0,  118,
    0,    0,   97,  121,   99,    0,    0,  100,    0,    0,
    0,    0,  104,    0,    0,  123,  108,  124,    0,    0,
    0,  126,    0,    0,    0,  111,    0,    0,   89,  133,
  134,    0,  116,  137,    0,    0,  267,  118,    0,    0,
    0,  121,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   97,  123,   99,  124,    0,  100,    0,  126,
    0,    0,  104,    0,    0,    0,  108,  133,  134,    0,
    0,  137,  355,    0,  267,  111,   97,    0,   99,    0,
    0,  100,  116,    0,    0,    0,  104,  118,    0,    0,
  108,  121,    0,    0,    0,    0,    0,    0,    0,  111,
    0,    0,    0,  123,    0,  124,  116,    0,    0,  126,
    0,  118,  357,    0,    0,  121,    0,  133,  134,    0,
    0,  137,    0,    0,  253,    0,   97,  123,   99,  124,
    0,  100,    0,  126,    0,    0,  104,    0,    0,    0,
  108,  133,  134,    0,    0,  137,    0,    0,  461,  111,
   89,    0,    0,    0,    0,    0,  116,    0,    0,    0,
    0,  118,    0,    0,   97,  121,   99,    0,    0,  100,
    0,    0,    0,    0,  104,    0,    0,  123,  108,  124,
    0,    0,    0,  126,    0,    0,    0,  111,    0,    0,
    0,  133,  134,    0,  116,  137,    0,    0,  267,  118,
   89,    0,    0,  121,   97,    0,   99,    0,    0,  100,
    0,    0,    0,    0,  104,  123,    0,  124,  108,    0,
    0,  126,    0,    0,   89,    0,    0,  111,    0,  133,
  134,    0,    0,  137,  116,    0,  267,    0,    0,  118,
    0,    0,  514,  121,  514,    0,    0,  514,    0,    0,
    0,    0,  514,    0,    0,  123,  514,  124,    0,    0,
    0,  126,    0,    0,    0,  514,    0,    0,    0,  133,
  134,    0,  514,  137,  645,    0,  577,  514,    0,    0,
    0,  514,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  204,  514,  204,  514,    0,  204,    0,  514,
    0,    0,  204,    0,    0,    0,  204,  514,  514,    0,
    0,  514,  647,    0,  514,  204,  214,    0,  214,    0,
    0,  214,  204,    0,    0,    0,  214,  204,    0,    0,
  214,  204,    0,    0,    0,    0,    0,    0,    0,  214,
    0,    0,    0,  204,    0,  204,  214,    0,    0,  204,
    0,  214,   89,    0,    0,  214,    0,  204,  204,    0,
    0,  204,    0,    0,  204,    0,  205,  214,  205,  214,
    0,  205,    0,  214,    0,    0,  205,    0,    0,    0,
  205,  214,  214,    0,    0,  214,    0,    0,  214,  205,
  514,    0,    0,   59,    0,    0,  205,    0,    0,    0,
    0,  205,    0,    0,    0,  205,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   59,  205,    0,  205,
    0,    0,    0,  205,    0,   59,    0,   59,    0,   59,
    0,  205,  205,    0,   59,  205,    0,    0,  205,   59,
  204,   59,   59,   59,   59,    0,    0,   59,   59,   59,
    0,    0,    0,   59,    0,    0,    0,    0,    0,    0,
    0,   59,    0,    0,  214,   59,   59,    0,   59,    0,
   59,   59,    0,   59,   59,   59,   59,    0,    0,    0,
    0,   59,    0,    0,    0,   59,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   59,  328,    0,
   59,    0,   59,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  205,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  329,
  };
  protected static  short [] yyCheck = {            52,
    0,    7,  333,  257,  359,   76,   81,  240,   52,    9,
   52,  224,  538,  326,   52,   29,  102,   90,  324,  465,
  712,  658,   52,  129,  562,  252,    2,  473,    4,   77,
    2,  354,    4,  255,  335,  573,  278,  331,  580,  261,
  282,  534,   80,  119,  323,  710,  711,    0,    0,   55,
    0,  827,  828,   53,  251,    9,   76,    9,    9,   52,
  102,   52,  256,  101,  256,  107,  141,  142,   52,  122,
   46,  256,  164,  257,   46,  256,  129,   52,  268,   52,
  256,  256,  157,  256,  256, 1165,  276,  102,  282,  754,
  256,  144,  256,  131,  256,  692,  256,  135,  294,   53,
 1180,   53,  256,   52,   76,   52,   82,  268,  335,   81,
   82,  325,  256,  268,   52,   91,   52,   52,  359,   91,
  314,   52,  374,  349,  350,  359,  263,  359,  349,  350,
  256,  146,  147,  148,  149,  150,  151,  152,  153, 1002,
  263,  256,  370,  256,  294,  374,  388,  923,  389,  264,
  359,  335,  357,  206,  366,  931,  306, 1193,  306,  366,
  372,  257,  206,  256,  206,  313,  371,  379,  206,  141,
  142,  423,  864,  256,  358,  256,  206,  809,  315,  250,
  389,  422,  256,  367,  260,  157, 1222,  257,  422,  365,
  422,  367,  315,  369,  423,  423,  368,  423,   87,  413,
  372, 1064,  423,  295,  379,  366,  537,  562,  262,  256,
  325,  365,  372,  206,  358,  206,  423,  413,  573,  413,
  374,  413,  206,  413,  299,  278,  891,  892,  413,  282,
  250,  206,  413,  206,  287,  419,  420,  421,  291,  415,
  413,  241,  418,  935,  298,  331,  843,  413,  845,  413,
  325,  413,  323,  379,  367, 1335,  417,  206,  334,  206,
  336,  458,  417,  413,  367,  371,  155,  342,  206, 1349,
  206,  206,  551,  326,  367,  206,  329,  330,  250,  888,
  252, 1361,  324, 1363,  367,  257,  367,  241,  920,  241,
  241,  294,  366,  371,  959,  348,  366,  350,  372,  368,
  965,  354,  844,  372,  257,  376,  382,  257,  350,  640,
  366,  349,  357,  370,  294,  359,  331,  359,  371,  366,
  257,  644,  376,  377,  359,  372, 1146,  299,  365,  359,
  367,  294,  407,  408,  294,  388,  389, 1146,  256,  384,
  393,  394,  395,  396,  397,  398,  399,  400,  401,  402,
  403,  323,  371,  325,  389,  374,  359,  688,  370,  256,
 1020, 1021,  359,  335,  439,  440,  423,  423,   52, 1146,
  342, 1191,  425, 1193,  983,  257,  985,  392,  701,  359,
  873,  416, 1191,  272, 1193,  343,  389,  349,  350,  404,
  405,  406,   76,  370,  409,  410,  359,   81,  335,  359,
  706,  359, 1222,  292,  376,  480,  256,  371,  305,  389,
  374,  423,  256, 1222, 1191,  373, 1193,  343,  102,  416,
  714,  358,  366,  107,  366,  473,  389,  366, 1088,  389,
  367,  389, 1097,  359, 1126,  407,  408,  366, 1351, 1352,
  682,  335,  370,  685,  372, 1222,  423,  365,  337,  367,
  341,  369,  370, 1113,  372,  305,  374,  141,  142, 1119,
  144,  423,  374,  389,  422,  503, 1131,  439,  440,  372,
  667,  266,  669,  157,  671,  379,  367,  373,  531,  423,
  551,  423, 1395,  536,  423,  538,  365,  359,  789,  378,
  369,  544,  366,  465,  423,  413,  422,  415,  367, 1275,
  418,  473,  371, 1140,  557,  413,  559,  379,  480,  580,
  548,  413, 1145, 1146,  418, 1145, 1146,  389,  562,  314,
  562,  365,  206,  367,  746,  369,  370,  369,  372,  573,
  374,  573,  562,  856,  572,  641,  415, 1170, 1314,  413,
 1170,  594,  595,  573,  367,  787, 1322, 1323,  343,  418,
  422,  366, 1328,  413,  569,  367,  272, 1194, 1191,  392,
 1193, 1191,  789, 1193,  359,  370,  250,  372,  252,  413,
  585,  415,  384,  415,  418,  551,  409,  410,  373,  551,
  296,  470,  413,  370,  341,  372,  661,  640,  641, 1222,
  413,  644, 1222,  399,  389,  484, 1134,  650,  413,  357,
  367,  272,  491,  492, 1241,  411, 1243,  323,  580,  339,
  367,  339,  339,  371,  344,  299,  346,  384,  423,  349,
  350,  359,  352,  353,  374,  296,  384,  422,  714,  682,
  359,  343,  685,  522,  368,  688,  423,  365,  365,  323,
  324,  325,  372,    9,  975,   11,  374,  359,  701,  722,
  379,  335,  323,  335,  707,  269,  339,  374,  342,  712,
  389,  373, 1146,  738,  877,  369,  350,  379,  710,  711,
  723,  367,  286,  339, 1366,  359,  358,  389,  344,  693,
  346,  343,  365,  349,  350,  367,  352,  353,  384,  661,
  324,   57,  376,  423,   60,  374,  272,  359,  587,  714,
  771,  590,  369,  756,  742,  758,  372, 1191,  339, 1193,
  422,  357,  754,  344,  767,  346,  350,  379,  349,  350,
  296,  352,  353,  407,  408,  371,  339,  389, 1041,  782,
 1036,  344,  256,  346,  787,  788,  349,  350, 1222,  352,
  353,  384,  385,  386,  306,  269, 1101,  323,  365, 1145,
 1146,  313,  805,  806,  339,  439,  440,  423,  294,  344,
  422,  346,  286,  325,  361,  998,  738,  352,  353,  413,
  306,  357,  847,  844, 1170,  372,  665,  367, 1091, 1134,
  370,  834,  835, 1146, 1146,  371,  367,  676,  677,  377,
 1236,  261,  423,  365,  384, 1191,  480, 1193,  379,  771,
  853,  368,  374,  856, 1250,  372,  859,  361,  382,  357,
  423,  864,  256,  813,  284,  868, 1129,  789,  372,  367,
  370,  371,  370,  371,  372,  878, 1222,  297, 1191, 1191,
 1193, 1193,  302,  392,  393,  724,  384,  307,  423,  309,
  310,  311,  312, 1156,  383,  883,  868,  317,  339,  891,
  892,  321,  387,  344,  907,  346,  909,  879,  911, 1222,
 1222,  352,  353,  333,  398,  413,  336,  551,  338,  388,
  413,  357,  844,  256,  374,  847,  380,  381,  562,  422,
  374,  367,  935, 1409, 1410,  371,  413, 1242,  413,  573,
  394,  395,  362,  363,  371,  339,  580,  422,  384,  370,
  344,  372,  346,  347,  348,  349,  350,  351,  352,  353,
  354,  355,  356,  372,  368,  374,  922,  959,  372,  370,
  379,  372,  366,  965,  368,  365,  370,  413,  372,  373,
  374,  370,  423,  372,  374,  339,  384,  990,  365,  992,
  344,  994,  346,  996,  388,  349,  350,  374,  352,  353,
  988,  365,  359,  360,  370,  306,  339,  308,  374, 1012,
  374,  344,  313,  346,  347,  348,  349,  350,  351,  352,
  353,  354,  355,  356,  325,  365,  370,  661,  372,  423,
  374,  413, 1236,  366,  374,  368,  368,  370, 1041,  372,
  373,  374,  365,  368,  365, 1001,  256,  372, 1329,  888,
  383,  374, 1002,  374,  387,  388, 1059,  357,  368, 1009,
 1010,  372,  372,  374,  368,  398,  399,  367,  372,  423,
  370,  371,  413,  414,  415,  416,  710,  711,  411,  370,
  339,  372,  339,  374,  384,  344,  366,  346, 1091,  369,
  423,  371,  372,  352,  353,  368, 1018,  370,  368,  369,
  337, 1104,  372,  357,  738, 1097,  413, 1101,  365, 1101,
  390,  391,  369,  374, 1064,  372,  373,  374,  367, 1144,
  754, 1101,  379, 1126,  413,  367, 1129,  369,  340,  371,
  410,  396,  397, 1136, 1137,  415,  374,  771,  418, 1131,
 1134,  368, 1134,  370,  983,  372,  354,  355,  390,  391,
  368,  365,  370, 1156, 1134,  789,  354,  355,  146,  147,
  148,  149,  150,  151,  152,  153, 1116,  368,  410,  370,
  374,  413,  360,  415,  371, 1200,  418,  365,  362,  363,
 1201,  369,  374,  371,  372,  413,  374, 1208,  360,  261,
  413,  379, 1195,  365,  374, 1145, 1146,  369, 1120,  371,
  372,  370,  374,  372, 1229, 1230,  368,  379,  370,  368,
  844,  370,  284,  847,  368,  369,  372,  371,  372,  373,
 1170,  370, 1144, 1226,  368,  297,  370, 1252,  372, 1254,
  302,  413,  372,  305,  374,  307,  413,  309,  310,  311,
  312, 1191,  372, 1193,  374,  317,  349,  350, 1242,  321,
 1242,  365,  372,  325,  374,  370,  371,  891,  892,  933,
  934,  333, 1242,  105,  336,  413,  338,  373,  110,  256,
  112,  113, 1222,  115, 1262,  117,  362,  363, 1200, 1201,
  411,  412,  384,  125,  413,  127, 1208,  256,  369,  369,
  371,  417,  418,  135,  413,  413,  138,  370,  140,  366,
  370,  372,  369,  413,  371,  372,  374, 1229, 1230,  390,
  391,  372,  374,  365, 1236,  370,  370,  369,  366,  371,
  372,  163,  374,  390,  391,  959, 1329,  379, 1250,  410,
 1252,  965, 1254,  372,  415,  370, 1324,  418,  370,  370,
  370,  413,  370,  410,  294,  294,  372,  374,  415,  413,
  370,  418,  369,  256,  372,  413,  413,    0,  373,  356,
  379,  374,  369, 1366,  360,  374,  369,  379,  379, 1319,
  371,  369,  372,  372,  379,  370, 1326,  294,  372,  372,
  423,  418,  371,  343, 1018,  370,  370, 1337, 1338,  400,
  401,  402,  403,  404,  405,  406,  407,  408,  409,  413,
  370, 1351, 1352,  413,  392,  368, 1409, 1410, 1396, 1397,
  294,  294,  365, 1401, 1402,  372,  404,  405,  406,  367,
  372,  409,  410,  411,  412,  413,  414,  415,  416,  417,
  418,  419,  420,  421,  422,  423,  424,  256,  413,  261,
  371,  371,  256,  256,  370, 1395,  370,  289,  280,  256,
  366,  365,  294,  365,  413,  413,  418,  413,  358,  256,
  373,  372,  284, 1097,  374,  370,  413, 1101,  370,  347,
  374,  372,  416,  372,  370,  297,  374,  368,  370,  351,
  302,  366,  370,  305,  413,  307, 1120,  309,  310,  311,
  312,  413,  334,  374,  370,  317,  339, 1131,  256,  321,
 1134,  256,  379,  325,  346,  379,  366,  368,  347,  372,
 1144,  333,  368,  372,  336,  372,  338,  368,  413,  413,
  339,    0,  370,  373,  373,  344,  366,  346,  347,  348,
  349,  350,  351,  352,  353,  354,  355,  356,  365,  365,
  365,  379,  348,  348,  374,  369,  534,  366,  366,  368,
  366,  370,  372,  372,  373,  374,  366,  356,  370,  305,
  413,  380,  381,  382,  383,  369, 1200, 1201,  387,  388,
  365,  367,  413,  366, 1208,  394,  395,  396,  397,  398,
  399,  569,  413,  369,  369,  369,  365,  369,  379,  370,
  370,  413,  411,  368,  372, 1229, 1230,  585,  372,  366,
  370,  374,  413,  374,  423,  413,  370,  373, 1242,  365,
  370,  379,  366,  256,  257,  315,  263,  369, 1252,  369,
 1254,  264,  265,  266,  267,  268,  366,  270,  271,  370,
  273,  274,  275,  276,  277,  278,  279,  280,  370,    0,
  374,  368,  285,  368,  287,  288,  289,  290,  291,  292,
  365,  413,  295,  365,  374,  366,  299,  300,  374,  302,
  303,  304,  504,  370,  413,  413,  365,  370,  413,  374,
  366,  314,  365,  316,  368,  318,  319,  366,  370,  322,
  371,  324,  325,  326,  327,  328,  329,  330,  331,  332,
  333,  334,  335,    0,  337,  366,  370,  340,  374,  374,
  366,  344,  345,  370,  261,  547,  263,  413,  366,  374,
  374,  374,  365,  370,  366,  366,  370,  366,  374,  365,
  315,  263,  365,  366,  374,   53,  369,  284,  922,  374,
  374,  374,  375,  376,  377,  378,  374,   46,   91,  382,
  297,  384,  682,  682, 1170,  302, 1222,  390,  391, 1356,
  307, 1329,  309,  310,  311,  312, 1332,  938,  315, 1073,
  317,  643, 1015, 1324,  321,  849,  849,  849,  843,  412,
  413,  414,  415, 1191,  417, 1402,  333,  256,  257,  336,
  423,  338, 1250, 1398, 1342,  264,  265,  266,  267,  268,
 1338,  270,  271, 1337,  273,  274,  275,  276,  277,  278,
  279, 1116, 1397, 1236,  677,  723,  285, 1009,  287,  288,
  289,  290,  291,  292,    0, 1120,  295,  873,  782,  787,
  299,  300,  729,  302,  303,  304,  595,  388,  975,  419,
  685,  420,  423,  421,  714,  314,  422,  316,  771,  318,
  319,  424,  988,  322, 1083,  324,  325,  326,  327,  328,
  329,  330,  331,  332,  333,  334,  335, 1200,  337, 1242,
 1101,  340,  206,  102,  549,  344,  345, 1046,  261, 1044,
 1036,  447,  689,  855, 1248, 1137,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  873,  365,  366,   -1,   -1,
  369,  284,   -1,   -1,   -1,  374,  375,  376,  377,  378,
   -1,   -1,   -1,  382,  297,  384,   -1,   -1,   -1,  302,
   -1,  390,  391,   -1,  307,   -1,  309,  310,  311,  312,
   -1,    0,   -1,   -1,  317,   -1,   -1,   -1,  321,   -1,
   -1,   -1,  325,  412,  413,  414,  415,   -1,  417,   -1,
  333,   -1,   -1,  336,  423,  338,   -1,   -1,   -1,  256,
  257,   -1,   -1,   -1,  261,   -1,   -1,   -1,  265,   -1,
  267,   -1,   -1,  270,   -1,  272,  273,   -1,  275,   -1,
  277,   -1,  279,   -1,  281,  282,  283,  284,   -1,   -1,
  287,  288,   -1,   -1,   -1,   -1,  293,   -1,  295,  296,
  297,   -1,   -1,  300,  301,  302,   -1,  304,   -1,    0,
  307,   -1,  309,  310,  311,  312,   -1,   -1,   -1,  316,
  317,  318,   -1,   -1,  321,  322,  323,   -1,   -1,   -1,
  413,   -1,   -1,  330,  331,   -1,  333,  334,  335,  336,
  337,  338,   -1,   -1,   -1,  342,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  358,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  366,
  367,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  375,   -1,
   -1,  257,   -1,   -1,   -1,  261,   -1,   -1,   -1,  265,
   -1,  267,   -1,    0,  270,   -1,  272,   -1,   -1,  275,
   -1,  277,   -1,  279,   -1,  281,   -1,   -1,  284,   -1,
   -1,  287,  288,   -1,   -1,   -1,  413,   -1,   -1,  295,
  296,  297,   -1,   -1,  300,  301,  302,  261,  304,   -1,
   -1,  307,   -1,  309,  310,  311,  312,   -1,   -1,   -1,
  316,  317,  318,   -1,   -1,  321,  322,  323,   -1,   -1,
  284,   -1,   -1,   -1,  330,  331,   -1,  333,  334,  335,
  336,  337,  338,  297,   -1,   -1,  342,    0,  302,   -1,
   -1,   -1,   -1,  307,   -1,  309,  310,  311,  312,   -1,
   -1,   -1,  358,  317,   -1,   -1,   -1,  321,  257,   -1,
  366,  367,  261,   -1,   -1,   -1,  265,   -1,  267,  333,
   -1,  270,  336,  272,  338,   -1,  275,   -1,  277,   -1,
  279,   -1,  281,   -1,   -1,  284,   -1,   -1,  287,  288,
   -1,   -1,   -1,   -1,   -1,   -1,  295,  296,  297,   -1,
   -1,  300,  301,  302,   -1,  304,   -1,  413,  307,   -1,
  309,  310,  311,  312,   -1,   -1,   -1,  316,  317,  318,
   -1,   -1,  321,  322,  323,   -1,   -1,   -1,   -1,   -1,
   -1,  330,  331,   -1,  333,  334,  257,  336,  337,  338,
  261,   -1,   -1,  342,  265,   -1,  267,   -1,   -1,  270,
   -1,  272,   -1,   -1,  275,   -1,  277,   -1,  279,   -1,
  281,   -1,   -1,  284,   -1,   -1,  287,  288,   -1,   -1,
   -1,   -1,   -1,   -1,  295,  296,  297,   -1,   -1,  300,
  301,  302,   -1,  304,   -1,   -1,  307,   -1,  309,  310,
  311,  312,   -1,   -1,   -1,  316,  317,  318,   -1,   -1,
  321,  322,  323,   -1,   -1,   -1,   -1,   -1,   -1,  330,
  331,   -1,  333,  334,  413,  336,  337,  338,   -1,   -1,
  257,  342,   -1,   -1,  261,   -1,   -1,   -1,  265,   -1,
  267,   -1,   -1,  270,   -1,  272,   -1,   -1,  275,   -1,
  277,   -1,  279,   -1,  281,   -1,   -1,  284,   -1,   -1,
  287,  288,   -1,   -1,   -1,   -1,   -1,   -1,  295,  296,
  297,   -1,   -1,  300,  301,  302,   -1,  304,   -1,   -1,
  307,   -1,  309,  310,  311,  312,   -1,   -1,   -1,  316,
  317,  318,   -1,   -1,  321,  322,  323,   -1,   -1,   -1,
   -1,   -1,  413,  330,  331,   -1,  333,  334,  261,  336,
  337,  338,  265,   -1,  267,  342,   -1,  270,   -1,  272,
   -1,   -1,  275,   -1,  277,   -1,  279,   -1,  281,   -1,
   -1,  284,   -1,   -1,  287,  288,   -1,   -1,   -1,   -1,
   -1,   -1,  295,  296,  297,   -1,   -1,  300,  301,  302,
   -1,  304,   -1,   -1,  307,   -1,  309,  310,  311,  312,
   -1,   -1,   -1,  316,  317,  318,   -1,   -1,  321,  322,
  323,   -1,   -1,   -1,   -1,   -1,   -1,  330,  331,   -1,
  333,  334,  256,  336,  337,  338,  413,  261,  262,  342,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  284,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  294,   -1,   -1,  297,  298,   -1,   -1,   -1,  302,   -1,
   -1,  305,   -1,  307,   -1,  309,  310,  311,  312,   -1,
   -1,   -1,   -1,  317,   -1,   -1,   -1,  321,   -1,   -1,
   -1,  325,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  333,
  413,   -1,  336,   -1,  338,  339,   -1,   -1,   -1,   -1,
  344,   -1,  346,  347,  348,  349,  350,  351,  352,  353,
  354,  355,  356,   -1,   -1,   -1,   -1,  361,   -1,   -1,
   -1,  365,  366,   -1,  368,  369,  370,  371,  372,  373,
  374,   -1,  376,  377,   -1,  379,  380,  381,  382,  383,
  384,  385,  386,  387,  388,  261,  390,  391,  392,  393,
  394,  395,  396,  397,  398,  399,  400,  401,  402,  403,
  404,  405,  406,  407,  408,  409,  410,  411,  284,  413,
  256,  415,   -1,   -1,  418,  261,  262,   -1,   -1,  423,
   -1,  297,   -1,   -1,   -1,  301,  302,   -1,   -1,   -1,
   -1,  307,   -1,  309,  310,  311,  312,   -1,  284,   -1,
   -1,  317,   -1,   -1,   -1,  321,   -1,   -1,  294,   -1,
   -1,  297,  298,   -1,   -1,   -1,  302,  333,   -1,  305,
  336,  307,  338,  309,  310,  311,  312,   -1,   -1,   -1,
   -1,  317,   -1,   -1,   -1,  321,   -1,   -1,   -1,  325,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  333,   -1,   -1,
  336,   -1,  338,  339,   -1,   -1,   -1,   -1,  344,   -1,
  346,  347,  348,  349,  350,  351,  352,  353,  354,  355,
  356,  357,   -1,   -1,   -1,  361,   -1,   -1,   -1,  365,
  366,  367,  368,  369,  370,  371,  372,  373,  374,   -1,
  376,  377,   -1,   -1,  380,  381,  382,  383,  384,   -1,
   -1,  387,  388,   -1,   -1,   -1,  392,  393,  394,  395,
  396,  397,  398,  399,  256,   -1,   -1,   -1,   -1,  261,
  262,   -1,   -1,   -1,   -1,  411,   -1,  413,   -1,  415,
   -1,   -1,  418,   -1,   -1,   -1,   -1,  423,   -1,   -1,
   -1,   -1,  284,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  294,   -1,   -1,  297,  298,   -1,   -1,   -1,
  302,   -1,   -1,   -1,   -1,  307,   -1,  309,  310,  311,
  312,   -1,   -1,   -1,   -1,  317,   -1,   -1,   -1,  321,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  333,   -1,   -1,  336,   -1,  338,  339,   -1,   -1,
   -1,   -1,  344,   -1,  346,  347,  348,  349,  350,  351,
  352,  353,  354,  355,  356,  357,   -1,   -1,   -1,  361,
   -1,   -1,   -1,  365,  366,  367,  368,  369,  370,  371,
  372,  373,  374,   -1,  376,  377,   -1,   -1,  380,  381,
  382,  383,  384,   -1,   -1,  387,  388,   -1,   -1,   -1,
  392,  393,  394,  395,  396,  397,  398,  399,  256,   -1,
   -1,   -1,   -1,  261,  262,   -1,   -1,   -1,   -1,  411,
   -1,  413,   -1,  415,   -1,   -1,  418,   -1,   -1,   -1,
   -1,  423,   -1,   -1,   -1,   -1,  284,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  294,   -1,   -1,  297,
  298,   -1,   -1,   -1,  302,   -1,   -1,  305,   -1,  307,
   -1,  309,  310,  311,  312,   -1,   -1,   -1,   -1,  317,
   -1,   -1,   -1,  321,   -1,   -1,   -1,  325,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  333,   -1,   -1,  336,   -1,
  338,  339,   -1,   -1,   -1,   -1,  344,   -1,  346,  347,
  348,  349,  350,  351,  352,  353,  354,  355,  356,   -1,
   -1,   -1,   -1,  361,   -1,   -1,   -1,  365,  366,  367,
  368,  369,  370,   -1,  372,  373,  374,   -1,  376,  377,
   -1,   -1,  380,  381,  382,  383,  384,   -1,   -1,  387,
  388,   -1,   -1,   -1,  392,  393,  394,  395,  396,  397,
  398,  399,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  411,   -1,  413,   -1,  415,  256,   -1,
  418,   -1,   -1,   -1,   -1,  423,  264,  265,  266,  267,
   -1,   -1,  270,  271,   -1,  273,  274,  275,  276,  277,
  278,  279,   -1,   -1,   -1,   -1,   -1,  285,   -1,  287,
  288,  289,  290,  291,  292,   -1,   -1,  295,   -1,   -1,
   -1,  299,  300,   -1,  302,  303,  304,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  314,   -1,  316,   -1,
  318,  319,   -1,   -1,  322,   -1,  324,  325,  326,  327,
  328,  329,  330,  331,  332,  333,  334,  335,   -1,  337,
   -1,   -1,  340,  256,   -1,   -1,  344,  345,   -1,  262,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  365,   -1,   -1,
   -1,  369,   -1,   -1,   -1,   -1,  374,  375,  376,  377,
  378,   -1,   -1,   -1,  382,  298,  384,   -1,   -1,   -1,
   -1,   -1,  390,  391,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  412,  413,  414,  415,   -1,   -1,
   -1,   -1,   -1,  256,   -1,  423,  339,   -1,   -1,  262,
   -1,  344,   -1,  346,  347,  348,  349,  350,  351,  352,
  353,  354,  355,  356,  357,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  366,  367,  368,  369,  370,  371,  372,
  373,  374,   -1,  376,  377,  298,  379,  380,  381,  382,
  383,  384,  385,  386,  387,  388,   -1,  390,  391,  392,
  393,  394,  395,  396,  397,  398,  399,  400,  401,  402,
  403,  404,  405,  406,  407,  408,  409,  410,  411,   -1,
  413,   -1,  415,  256,   -1,  418,  339,   -1,   -1,  262,
  423,  344,   -1,  346,  347,  348,  349,  350,  351,  352,
  353,  354,  355,  356,  357,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  366,  367,  368,  369,  370,  371,  372,
  373,  374,   -1,  376,  377,  298,  379,  380,  381,  382,
  383,  384,  385,  386,  387,  388,   -1,  390,  391,  392,
  393,  394,  395,  396,  397,  398,  399,  400,  401,  402,
  403,  404,  405,  406,  407,  408,  409,  410,  411,   -1,
  413,   -1,  415,  256,   -1,  418,  339,   -1,   -1,  262,
  423,  344,   -1,  346,  347,  348,  349,  350,  351,  352,
  353,  354,  355,  356,  357,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  366,  367,  368,  369,  370,  371,  372,
  373,  374,   -1,  376,   -1,  298,  379,  380,  381,  382,
  383,  384,  385,  386,  387,  388,   -1,  390,  391,  392,
  393,  394,  395,  396,  397,  398,  399,  400,  401,  402,
  403,  404,  405,  406,  407,  408,  409,  410,  411,   -1,
  413,   -1,  415,  256,   -1,  418,  339,   -1,   -1,  262,
  423,  344,   -1,  346,  347,  348,  349,  350,  351,  352,
  353,  354,  355,  356,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  365,  366,  367,  368,  369,  370,  371,  372,
  373,  374,   -1,  376,  377,  298,  379,  380,  381,  382,
  383,  384,  385,  386,  387,  388,   -1,  390,  391,  392,
  393,  394,  395,  396,  397,  398,  399,  400,  401,  402,
  403,  404,  405,  406,  407,  408,  409,  410,  411,   -1,
   -1,   -1,  415,   -1,   -1,   -1,  339,   -1,   -1,   -1,
  423,  344,   -1,  346,  347,  348,  349,  350,  351,  352,
  353,  354,  355,  356,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  365,  366,   -1,  368,  369,  370,  371,  372,
  373,  374,   -1,  376,  377,   -1,  379,  380,  381,  382,
  383,  384,  385,  386,  387,  388,   -1,  390,  391,  392,
  393,  394,  395,  396,  397,  398,  399,  400,  401,  402,
  403,  404,  405,  406,  407,  408,  409,  410,  411,   -1,
   -1,  256,  415,   -1,   -1,  418,  261,  262,   -1,   -1,
  423,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  284,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  294,
   -1,   -1,  297,  298,   -1,   -1,   -1,  302,   -1,   -1,
  305,   -1,  307,   -1,  309,  310,  311,  312,   -1,   -1,
   -1,   -1,  317,   -1,   -1,   -1,  321,   -1,   -1,   -1,
  325,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  333,   -1,
   -1,  336,  256,  338,  339,   -1,   -1,   -1,  262,  344,
   -1,  346,  347,  348,  349,  350,  351,  352,  353,  354,
  355,  356,   -1,   -1,   -1,   -1,  361,   -1,   -1,   -1,
  365,  366,   -1,  368,  369,  370,   -1,  372,  373,  374,
   -1,  376,  377,   -1,  298,  380,  381,  382,  383,   -1,
   -1,   -1,  387,  388,   -1,   -1,   -1,  392,  393,  394,
  395,  396,  397,  398,  399,   -1,   -1,   -1,  256,   -1,
   -1,   -1,   -1,   -1,  262,   -1,  411,   -1,  413,   -1,
   -1,   -1,   -1,   -1,   -1,  339,   -1,   -1,  423,   -1,
  344,   -1,  346,  347,  348,  349,  350,  351,  352,  353,
  354,  355,  356,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  298,   -1,  366,   -1,  368,  369,  370,  371,  372,  373,
  374,   -1,  376,  377,   -1,  379,  380,  381,  382,  383,
  384,  385,  386,  387,  388,   -1,  390,  391,  392,  393,
  394,  395,  396,  397,  398,  399,  400,  401,  402,  403,
  404,  405,  406,  407,  408,  409,  410,  411,   -1,  256,
   -1,  415,   -1,   -1,  418,  262,   -1,   -1,   -1,  423,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  366,   -1,
   -1,  369,   -1,  371,  372,   -1,   -1,   -1,  376,  377,
   -1,   -1,  380,  381,  382,  383,  384,  385,  386,  387,
  388,  298,  390,  391,  392,  393,  394,  395,  396,  397,
  398,  399,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  410,  411,   -1,   -1,   -1,  415,   -1,   -1,
  418,   -1,   -1,   -1,   -1,  423,   -1,   -1,   -1,   -1,
   -1,   -1,  339,   -1,   -1,   -1,   -1,  344,  256,  346,
  347,  348,  349,  350,  351,  352,  353,  354,  355,  356,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  366,
   -1,  368,   -1,  370,   -1,  372,  373,  374,  285,  376,
  377,   -1,  379,  380,  381,  382,  383,  384,  385,  386,
  387,  388,   -1,   -1,   -1,  392,  393,  394,  395,  396,
  397,  398,  399,  400,  401,  402,  403,  404,  405,  406,
  407,  408,  409,  256,  411,   -1,   -1,   -1,   -1,  262,
  327,   -1,   -1,   -1,   -1,   -1,  423,   -1,   -1,   -1,
   -1,  339,   -1,   -1,   -1,   -1,  344,   -1,  346,  347,
  348,  349,  350,  351,  352,  353,  354,  355,  356,   -1,
   -1,  294,   -1,   -1,   -1,  298,   -1,   -1,  366,   -1,
  368,   -1,  370,   -1,  372,  373,  374,   -1,  375,  376,
  377,  378,   -1,  380,  381,  382,  383,  384,  385,  386,
  387,   -1,   -1,  390,  391,  392,  393,  394,  395,  396,
  397,   -1,   -1,  256,   -1,   -1,  339,   -1,   -1,  262,
   -1,  344,   -1,  346,  347,  348,  349,  350,  351,  352,
  353,  354,  355,  356,   -1,  423,   -1,   -1,  361,   -1,
   -1,   -1,  365,  366,   -1,  368,  369,  370,   -1,  372,
  373,  374,   -1,  376,  377,  298,   -1,  380,  381,  382,
  383,   -1,   -1,   -1,  387,  388,   -1,   -1,   -1,  392,
  393,  394,  395,  396,  397,  398,  399,   -1,   -1,  256,
   -1,   -1,   -1,   -1,   -1,  262,   -1,   -1,  411,   -1,
  413,   -1,   -1,   -1,   -1,   -1,  339,   -1,   -1,   -1,
  423,  344,   -1,  346,  347,  348,  349,  350,  351,  352,
  353,  354,  355,  356,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  298,   -1,  366,   -1,  368,   -1,  370,   -1,  372,
  373,  374,   -1,  376,  377,   -1,   -1,  380,  381,  382,
  383,  384,  385,  386,  387,  388,   -1,   -1,   -1,  392,
  393,  394,  395,  396,  397,  398,  399,   -1,   -1,  256,
   -1,   -1,  339,   -1,   -1,  262,   -1,  344,  411,  346,
  347,  348,  349,  350,  351,  352,  353,  354,  355,  356,
  423,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  366,
   -1,  368,   -1,  370,   -1,  372,  373,  374,   -1,  376,
  377,  298,   -1,  380,  381,  382,  383,   -1,   -1,   -1,
  387,  388,   -1,   -1,   -1,  392,  393,  394,  395,  396,
  397,  398,  399,   -1,   -1,  256,   -1,   -1,   -1,   -1,
   -1,  262,   -1,   -1,  411,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  339,   -1,   -1,   -1,  423,  344,   -1,  346,
  347,  348,  349,  350,  351,  352,  353,  354,  355,  356,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  298,   -1,  366,
   -1,  368,   -1,  370,   -1,  372,  373,  374,   -1,  376,
  377,   -1,   -1,  380,  381,  382,  383,   -1,   -1,   -1,
  387,  388,   -1,   -1,   -1,  392,  393,  394,  395,  396,
  397,  398,  399,   -1,   -1,  256,   -1,   -1,  339,   -1,
   -1,  262,   -1,  344,  411,  346,  347,  348,  349,  350,
  351,  352,  353,  354,  355,  356,  423,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  366,   -1,  368,   -1,  370,
   -1,  372,  373,  374,   -1,  376,  377,  298,   -1,  380,
  381,  382,  383,   -1,   -1,   -1,  387,  388,   -1,   -1,
   -1,  392,  393,  394,  395,  396,  397,  398,  399,   -1,
   -1,  256,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  411,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  339,   -1,
   -1,   -1,  423,  344,   -1,  346,  347,  348,  349,  350,
  351,  352,  353,  354,  355,  356,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  366,   -1,  368,   -1,  370,
   -1,  372,  373,  374,   -1,  376,  377,   -1,   -1,  380,
  381,  382,  383,   -1,   -1,   -1,  387,  388,   -1,   -1,
   -1,  392,  393,  394,  395,  396,  397,  398,  399,  256,
   -1,   -1,   -1,   -1,  339,   -1,   -1,   -1,   -1,  344,
  411,  346,  347,  348,  349,  350,  351,  352,  353,  354,
  355,  356,  423,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  366,   -1,  368,   -1,  370,   -1,  372,  373,  374,
   -1,   -1,   -1,   -1,   -1,  380,  381,  382,  383,   -1,
   -1,   -1,  387,  388,   -1,   -1,   -1,  392,  393,  394,
  395,  396,  397,  398,  399,  256,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  411,   -1,   -1,   -1,
   -1,   -1,  339,   -1,   -1,   -1,   -1,  344,  423,  346,
  347,  348,  349,  350,  351,  352,  353,  354,  355,  356,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  366,
   -1,  368,   -1,  370,   -1,  372,  373,  374,   -1,   -1,
   -1,   -1,   -1,  380,  381,  382,  383,   -1,   -1,   -1,
  387,  388,   -1,   -1,   -1,  392,  393,  394,  395,  396,
  397,  398,  399,  256,   -1,   -1,   -1,   -1,  339,   -1,
   -1,   -1,   -1,  344,  411,  346,  347,  348,  349,  350,
  351,  352,  353,  354,  355,  356,  423,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  366,   -1,  368,   -1,  370,
   -1,  372,  373,  374,   -1,   -1,   -1,   -1,   -1,  380,
  381,  382,  383,   -1,   -1,   -1,  387,  388,   -1,   -1,
   -1,  392,  393,  394,  395,  396,  397,  398,  399,  256,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  411,   -1,   -1,   -1,   -1,   -1,  339,   -1,   -1,   -1,
   -1,  344,  423,  346,  347,  348,  349,  350,  351,  352,
  353,  354,  355,  356,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  366,   -1,  368,   -1,  370,   -1,  372,
  373,  374,   -1,   -1,   -1,   -1,   -1,  380,  381,  382,
  383,   -1,   -1,   -1,  387,  388,   -1,   -1,   -1,   -1,
   -1,  394,  395,  396,  397,  398,  399,  256,   -1,   -1,
   -1,   -1,  339,   -1,   -1,   -1,   -1,  344,  411,  346,
  347,  348,  349,  350,  351,  352,  353,  354,  355,  356,
  423,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  366,
   -1,  368,   -1,  370,   -1,  372,  373,  374,   -1,   -1,
   -1,   -1,   -1,  380,  381,  382,  383,   -1,   -1,   -1,
  387,  388,   -1,   -1,   -1,   -1,   -1,  394,  395,  396,
  397,  398,  399,  256,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  411,   -1,   -1,   -1,   -1,   -1,
  339,   -1,   -1,   -1,   -1,  344,  423,  346,  347,  348,
  349,  350,  351,  352,  353,  354,  355,  356,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  366,   -1,  368,
   -1,  370,   -1,  372,  373,  374,   -1,   -1,   -1,   -1,
   -1,  380,  381,  382,  383,   -1,   -1,   -1,  387,  388,
   -1,   -1,   -1,   -1,   -1,  394,  395,  396,  397,  398,
  399,  256,   -1,   -1,   -1,   -1,  339,   -1,   -1,   -1,
   -1,  344,  411,  346,  347,  348,  349,  350,  351,  352,
  353,  354,  355,  356,  423,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  366,   -1,  368,   -1,  370,   -1,  372,
  373,  374,   -1,   -1,   -1,   -1,   -1,  380,  381,  382,
  383,   -1,   -1,   -1,  387,  388,   -1,   -1,   -1,   -1,
   -1,  394,  395,  396,  397,  398,  399,  256,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  411,   -1,
   -1,   -1,   -1,   -1,  339,   -1,   -1,   -1,   -1,  344,
  423,  346,  347,  348,  349,  350,  351,  352,  353,  354,
  355,  356,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  366,   -1,  368,   -1,  370,   -1,  372,  373,  374,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  382,  383,   -1,
   -1,   -1,  387,  388,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  396,  397,  398,  399,  256,   -1,   -1,   -1,   -1,
  339,   -1,   -1,   -1,   -1,  344,  411,  346,  347,  348,
  349,  350,  351,  352,  353,  354,  355,  356,  423,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  366,   -1,  368,
   -1,  370,   -1,  372,  373,  374,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  382,  383,   -1,   -1,   -1,  387,  388,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  396,  397,  398,
  399,  256,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  411,   -1,   -1,   -1,   -1,   -1,  339,   -1,
   -1,   -1,   -1,  344,  423,  346,  347,  348,  349,  350,
  351,  352,  353,  354,  355,  356,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  366,   -1,  368,   -1,  370,
   -1,  372,  373,  374,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  382,  383,   -1,   -1,   -1,  387,  388,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  396,  397,  398,  399,  256,
   -1,   -1,   -1,   -1,  339,   -1,   -1,   -1,   -1,  344,
  411,  346,  347,  348,  349,  350,  351,  352,  353,  354,
  355,  356,  423,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  366,   -1,  368,   -1,  370,   -1,  372,  373,  374,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  382,  383,   -1,
   -1,   -1,  387,  388,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  398,  399,  256,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  411,   -1,   -1,   -1,
   -1,   -1,  339,   -1,   -1,   -1,   -1,  344,  423,  346,
  347,  348,  349,  350,  351,  352,  353,  354,  355,  356,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  366,
   -1,  368,   -1,  370,   -1,  372,  373,  374,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  382,  383,   -1,   -1,   -1,
  387,  388,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  398,  399,  256,   -1,   -1,   -1,   -1,  339,   -1,
   -1,   -1,   -1,  344,  411,  346,  347,  348,  349,  350,
  351,  352,  353,  354,  355,  356,  423,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  366,   -1,  368,   -1,  370,
   -1,  372,  373,  374,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  383,   -1,   -1,   -1,  387,  388,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  398,  399,  256,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  411,   -1,   -1,   -1,   -1,   -1,  339,   -1,   -1,   -1,
   -1,  344,  423,  346,  347,  348,  349,  350,  351,  352,
  353,  354,  355,  356,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  366,   -1,  368,   -1,  370,   -1,  372,
  373,  374,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  383,   -1,   -1,   -1,   -1,  388,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  398,  399,  256,   -1,   -1,
   -1,   -1,  339,   -1,   -1,   -1,   -1,  344,  411,  346,
  347,  348,  349,  350,  351,  352,  353,  354,  355,  356,
  423,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  366,
   -1,  368,   -1,  370,   -1,  372,  373,  374,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  383,   -1,   -1,   -1,
   -1,  388,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  398,  399,  256,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  411,   -1,   -1,   -1,   -1,   -1,
  339,   -1,   -1,   -1,   -1,  344,  423,  346,  347,  348,
  349,  350,  351,  352,  353,  354,  355,  356,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  366,   -1,  368,
   -1,  370,   -1,  372,  373,  374,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  388,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  398,
  399,  256,  261,   -1,   -1,   -1,  339,   -1,   -1,   -1,
   -1,  344,  411,  346,  347,  348,  349,  350,  351,  352,
  353,  354,  355,  356,  423,  284,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  366,   -1,  368,   -1,  370,  297,  372,
  373,  374,   -1,  302,   -1,   -1,   -1,   -1,  307,   -1,
  309,  310,  311,  312,   -1,  388,   -1,   -1,  317,   -1,
   -1,   -1,  321,   -1,   -1,  398,  399,  256,   -1,   -1,
   -1,   -1,   -1,   -1,  333,   -1,   -1,  336,  411,  338,
   -1,   -1,   -1,   -1,  339,   -1,   -1,   -1,   -1,  344,
  423,  346,  347,  348,  349,  350,  351,  352,  353,  354,
  355,  356,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  366,   -1,  368,   -1,  370,   -1,  372,  373,  374,
   -1,  256,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  388,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  399,   -1,   -1,   -1,   -1,   -1,
  339,   -1,   -1,   -1,  413,  344,  411,  346,  347,  348,
  349,  350,  351,  352,  353,  354,  355,  356,  423,   -1,
   -1,   -1,  262,   -1,   -1,   -1,   -1,  366,   -1,  368,
   -1,  370,   -1,  372,  373,  374,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  388,
   -1,   -1,   -1,   -1,  339,   -1,   -1,   -1,  298,  344,
  399,  346,  347,  348,  349,  350,  351,  352,  353,  354,
  355,   -1,  411,   -1,   -1,   -1,   -1,  262,   -1,   -1,
   -1,  366,   -1,  368,  423,  370,   -1,  372,  373,  374,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  298,   -1,   -1,   -1,  357,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  367,   -1,  369,
   -1,  371,   -1,   -1,  374,   -1,  376,  377,  423,  379,
  380,  381,  382,  383,  384,  385,  386,  387,  388,   -1,
  390,  391,  392,  393,  394,  395,  396,  397,  398,  399,
  400,  401,  402,  403,  404,  405,  406,  407,  408,  409,
  410,  411,   -1,  413,   -1,  415,   -1,   -1,  418,   -1,
   -1,   -1,  367,  423,  369,  370,  371,  372,   -1,  374,
   -1,  376,  377,  262,  379,  380,  381,  382,  383,   -1,
  385,  386,  387,  388,  261,  390,  391,  392,  393,  394,
  395,  396,  397,  398,  399,  400,  401,  402,  403,  404,
  405,  406,  407,  408,  409,  410,  411,  284,  413,  298,
  415,   -1,   -1,  418,   -1,   -1,   -1,   -1,  423,   -1,
  297,   -1,   -1,   -1,   -1,  302,   -1,   -1,   -1,   -1,
  307,   -1,  309,  310,  311,  312,   -1,   -1,   -1,   -1,
  317,   -1,   -1,   -1,  321,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  333,   -1,   -1,  336,
   -1,  338,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  368,
  369,  370,  371,  372,   -1,  362,  363,  376,  377,  366,
  379,  380,  381,  382,  383,  384,  385,  386,  387,  388,
   -1,  390,  391,  392,  393,  394,  395,  396,  397,  398,
  399,  400,  401,  402,  403,  404,  405,  406,  407,  408,
  409,  410,  411,   -1,   -1,   -1,  415,  256,   -1,  418,
   -1,   -1,   -1,   -1,  423,  264,  265,  266,  267,   -1,
   -1,  270,  271,   -1,  273,  274,  275,  276,  277,  278,
  279,   -1,   -1,   -1,   -1,   -1,  285,   -1,  287,  288,
  289,  290,  291,  292,   -1,   -1,  295,   -1,   -1,   -1,
  299,  300,   -1,  302,  303,  304,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  314,   -1,  316,   -1,  318,
  319,   -1,   -1,  322,   -1,  324,  325,  326,  327,  328,
  329,  330,  331,  332,  333,  334,  335,   -1,  337,   -1,
   -1,  340,   -1,   -1,   -1,  344,  345,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  365,   -1,   -1,   -1,
  369,   -1,   -1,   -1,   -1,  374,  375,  376,  377,  378,
   -1,   -1,   -1,  382,   -1,  384,   -1,   -1,  256,   -1,
   -1,  390,  391,   -1,   -1,   -1,  264,  265,  266,  267,
   -1,   -1,  270,  271,   -1,  273,  274,  275,  276,  277,
  278,  279,   -1,  412,  413,  414,  415,  285,   -1,  287,
  288,  289,  290,  291,  292,   -1,   -1,  295,   -1,   -1,
   -1,  299,  300,   -1,  302,  303,  304,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  314,   -1,  316,   -1,
  318,  319,   -1,   -1,  322,   -1,  324,  325,  326,  327,
  328,  329,  330,  331,  332,  333,  334,  335,   -1,  337,
   -1,   -1,  340,   -1,   -1,   -1,  344,  345,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  365,   -1,   -1,
   -1,  369,   -1,   -1,   -1,   -1,  374,  375,  376,  377,
  378,   -1,   -1,   -1,  382,   -1,  384,   -1,   -1,  256,
   -1,   -1,  390,  391,   -1,   -1,   -1,  264,  265,  266,
  267,   -1,   -1,  270,  271,   -1,  273,  274,  275,  276,
  277,  278,  279,   -1,  412,  413,  414,  415,  285,   -1,
  287,  288,  289,  290,  291,  292,   -1,   -1,  295,   -1,
   -1,   -1,  299,  300,   -1,  302,  303,  304,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  314,   -1,  316,
   -1,  318,  319,   -1,   -1,  322,   -1,  324,  325,  326,
  327,  328,  329,  330,  331,  332,  333,  334,  335,   -1,
  337,   -1,   -1,  340,   -1,   -1,   -1,  344,  345,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  365,   -1,
   -1,   -1,  369,   -1,   -1,   -1,   -1,  374,  375,  376,
  377,  378,   -1,   -1,   -1,  382,   -1,  384,   -1,   -1,
  256,   -1,   -1,  390,  391,   -1,   -1,   -1,  264,  265,
  266,  267,   -1,   -1,  270,  271,   -1,  273,  274,  275,
  276,  277,  278,  279,   -1,  412,  413,  414,  415,  285,
   -1,  287,  288,  289,  290,  291,  292,   -1,   -1,  295,
   -1,   -1,   -1,  299,  300,   -1,  302,  303,  304,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  314,   -1,
  316,   -1,  318,  319,   -1,   -1,  322,   -1,  324,  325,
  326,  327,  328,  329,  330,  331,  332,  333,  334,  335,
   -1,  337,   -1,   -1,  340,   -1,   -1,   -1,  344,  345,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  365,
   -1,   -1,   -1,  369,   -1,   -1,   -1,   -1,  374,  375,
  376,  377,  378,   -1,   -1,   -1,  382,   -1,  384,   -1,
   -1,  256,   -1,   -1,  390,  391,   -1,   -1,   -1,  264,
  265,   -1,  267,   -1,   -1,  270,  271,   -1,   -1,   -1,
  275,  276,  277,   -1,  279,   -1,  412,  413,  414,  415,
  285,   -1,  261,  288,   -1,   -1,   -1,   -1,   -1,   -1,
  295,   -1,   -1,   -1,   -1,  300,   -1,  302,  303,  304,
   -1,   -1,   -1,   -1,   -1,  284,   -1,   -1,   -1,   -1,
   -1,  316,   -1,  318,  319,   -1,   -1,  322,  297,   -1,
  325,   -1,  327,  302,  329,  330,  331,  332,  307,  334,
  309,  310,  311,  312,   -1,   -1,   -1,   -1,  317,  344,
  345,   -1,  321,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  333,   -1,   -1,  336,   -1,  338,
  365,  366,   -1,   -1,  369,   -1,   -1,   -1,   -1,   -1,
  375,  376,  377,  378,   -1,   -1,   -1,  382,   -1,  384,
   -1,   -1,  256,   -1,   -1,  390,  391,   -1,   -1,   -1,
  264,  265,   -1,  267,   -1,   -1,  270,  271,   -1,   -1,
   -1,  275,  276,  277,   -1,  279,   -1,  412,  413,  414,
  415,  285,   -1,   -1,  288,   -1,   -1,   -1,   -1,   -1,
   -1,  295,   -1,   -1,   -1,   -1,  300,   -1,  302,  303,
  304,   -1,   -1,   -1,  413,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  316,   -1,  318,  319,   -1,   -1,  322,   -1,
   -1,  325,   -1,  327,   -1,  329,  330,  331,  332,   -1,
  334,   -1,   -1,  337,   -1,   -1,   -1,   -1,   -1,   -1,
  344,  345,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  369,   -1,   -1,   -1,   -1,
   -1,  375,  376,  377,  378,   -1,   -1,   -1,  382,   -1,
  384,   -1,   -1,  256,   -1,   -1,  390,  391,   -1,   -1,
   -1,  264,  265,   -1,  267,   -1,   -1,  270,  271,   -1,
   -1,   -1,  275,  276,  277,   -1,  279,   -1,  412,  413,
  414,  415,  285,   -1,  261,  288,   -1,   -1,   -1,   -1,
   -1,   -1,  295,   -1,   -1,   -1,   -1,  300,   -1,  302,
  303,  304,   -1,   -1,   -1,   -1,   -1,  284,   -1,   -1,
   -1,   -1,   -1,  316,   -1,  318,  319,   -1,   -1,  322,
  297,   -1,  325,   -1,  327,  302,  329,  330,  331,  332,
  307,  334,  309,  310,  311,  312,   -1,   -1,   -1,   -1,
  317,  344,  345,   -1,  321,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  333,   -1,   -1,  336,
   -1,  338,   -1,   -1,   -1,   -1,  369,   -1,   -1,   -1,
   -1,   -1,  375,  376,  377,  378,   -1,   -1,   -1,  382,
   -1,  384,   -1,  264,  265,   -1,  267,  390,  391,  270,
  271,   -1,   -1,  370,  275,  276,  277,   -1,  279,   -1,
   -1,   -1,   -1,   -1,  285,   -1,  261,  288,   -1,  412,
  413,  414,  415,   -1,  295,   -1,   -1,   -1,   -1,  300,
   -1,  302,  303,  304,   -1,   -1,   -1,   -1,   -1,  284,
   -1,   -1,   -1,   -1,   -1,  316,  413,  318,  319,   -1,
   -1,  322,  297,   -1,  325,   -1,  327,  302,  329,  330,
  331,  332,  307,  334,  309,  310,  311,  312,   -1,   -1,
  315,   -1,  317,  344,  345,   -1,  321,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  333,   -1,
   -1,  336,   -1,  338,  365,  366,   -1,   -1,  369,   -1,
   -1,   -1,   -1,   -1,  375,  376,  377,  378,   -1,   -1,
   -1,  382,   -1,  384,   -1,   -1,   -1,   -1,   -1,  390,
  391,  366,  367,   -1,  264,  265,   -1,  267,   -1,   -1,
  270,  271,   -1,   -1,   -1,  275,  276,  277,   -1,  279,
   -1,  412,  413,  414,  415,  285,   -1,  261,  288,  263,
   -1,  422,   -1,   -1,   -1,  295,   -1,   -1,   -1,   -1,
  300,   -1,  302,  303,  304,   -1,   -1,   -1,   -1,   -1,
  284,   -1,   -1,   -1,   -1,   -1,  316,   -1,  318,  319,
   -1,   -1,  322,  297,   -1,  325,   -1,  327,  302,  329,
  330,  331,  332,  307,  334,  309,  310,  311,  312,   -1,
   -1,   -1,   -1,  317,  344,  345,   -1,  321,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  333,
   -1,   -1,  336,   -1,  338,  365,   -1,   -1,   -1,  369,
   -1,   -1,   -1,   -1,   -1,  375,  376,  377,  378,   -1,
   -1,   -1,  382,   -1,  384,   -1,   -1,  256,   -1,   -1,
  390,  391,  366,  367,   -1,  264,  265,   -1,  267,   -1,
   -1,  270,  271,   -1,   -1,   -1,  275,  276,  277,   -1,
  279,   -1,  412,  413,  414,  415,  285,   -1,   -1,  288,
   -1,   -1,  422,   -1,   -1,   -1,  295,   -1,   -1,   -1,
   -1,  300,  256,  302,  303,  304,   -1,   -1,   -1,   -1,
   -1,  265,   -1,  267,   -1,   -1,  270,  316,   -1,  318,
  319,  275,   -1,  322,   -1,  279,  325,   -1,  327,   -1,
  329,  330,  331,  332,  288,  334,   -1,   -1,   -1,   -1,
   -1,  295,  256,   -1,   -1,   -1,  300,   -1,   -1,   -1,
  304,  265,   -1,  267,   -1,   -1,  270,   -1,   -1,   -1,
   -1,  275,  316,   -1,  318,  279,   -1,   -1,  322,   -1,
  369,   -1,   -1,   -1,  288,   -1,  330,  331,   -1,   -1,
  334,  295,   -1,  337,   -1,   -1,  300,  256,   -1,   -1,
  304,   -1,   -1,   -1,   -1,   -1,  265,   -1,  267,   -1,
   -1,  270,  316,   -1,  318,   -1,  275,   -1,  322,   -1,
  279,   -1,   -1,  412,  413,   -1,  330,  331,   -1,  288,
  334,   -1,   -1,  337,   -1,   -1,  295,   -1,   -1,   -1,
   -1,  300,  256,   -1,   -1,  304,   -1,   -1,   -1,   -1,
   -1,  265,   -1,  267,   -1,   -1,  270,  316,   -1,  318,
   -1,  275,   -1,  322,   -1,  279,   -1,   -1,   -1,  413,
   -1,  330,  331,   -1,  288,  334,   -1,   -1,  337,   -1,
   -1,  295,   -1,   -1,   -1,   -1,  300,   -1,   -1,   -1,
  304,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  316,   -1,  318,   -1,   -1,   -1,  322,  413,
   -1,   -1,   -1,   -1,   -1,   -1,  330,  331,   -1,   -1,
  334,   -1,   -1,  337,   -1,   -1,   -1,   -1,  257,   -1,
   -1,   -1,  261,   -1,   -1,   -1,  265,   -1,  267,   -1,
   -1,  270,   -1,  272,   -1,   -1,  275,   -1,  277,   -1,
  279,   -1,  281,   -1,  413,  284,   -1,   -1,  287,  288,
   -1,   -1,   -1,   -1,   -1,   -1,  295,  296,  297,   -1,
   -1,  300,  301,  302,   -1,  304,   -1,   -1,  307,   -1,
  309,  310,  311,  312,   -1,   -1,   -1,  316,  317,  318,
   -1,   -1,  321,  322,  323,   -1,   -1,   -1,   -1,  413,
   -1,  330,  331,   -1,  333,  334,  335,  336,  337,  338,
   -1,   -1,  257,  342,   -1,   -1,  261,   -1,   -1,   -1,
  265,   -1,  267,   -1,   -1,  270,   -1,  272,   -1,   -1,
  275,   -1,  277,   -1,  279,   -1,  281,  366,  367,  284,
   -1,   -1,  287,  288,   -1,   -1,   -1,   -1,   -1,   -1,
  295,  296,  297,   -1,   -1,  300,  301,  302,   -1,  304,
   -1,   -1,  307,   -1,  309,  310,  311,  312,   -1,   -1,
   -1,  316,  317,  318,   -1,   -1,  321,  322,  323,   -1,
   -1,   -1,   -1,   -1,  413,  330,  331,   -1,  333,  334,
  335,  336,  337,  338,   -1,   -1,  257,  342,   -1,   -1,
  261,   -1,   -1,   -1,  265,   -1,  267,   -1,   -1,  270,
   -1,  272,   -1,   -1,  275,   -1,  277,   -1,  279,   -1,
  281,  366,  367,  284,   -1,   -1,  287,  288,   -1,   -1,
   -1,   -1,   -1,   -1,  295,  296,  297,   -1,   -1,  300,
  301,  302,   -1,  304,   -1,   -1,  307,   -1,  309,  310,
  311,  312,   -1,   -1,   -1,  316,  317,  318,   -1,   -1,
  321,  322,  323,   -1,   -1,   -1,   -1,   -1,  413,  330,
  331,   -1,  333,  334,   -1,  336,  337,  338,  262,   -1,
  257,  342,   -1,   -1,  261,   -1,   -1,   -1,  265,   -1,
  267,   -1,   -1,  270,   -1,  272,   -1,   -1,  275,   -1,
  277,   -1,  279,   -1,  281,  366,  367,  284,   -1,   -1,
  287,  288,   -1,   -1,  298,   -1,   -1,   -1,  295,  296,
  297,   -1,   -1,  300,  301,  302,   -1,  304,   -1,   -1,
  307,   -1,  309,  310,  311,  312,   -1,   -1,   -1,  316,
  317,  318,   -1,   -1,  321,  322,  323,   -1,   -1,   -1,
   -1,   -1,  413,  330,  331,   -1,  333,  334,   -1,  336,
  337,  338,   -1,   -1,   -1,  342,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  369,  370,  371,  372,  366,
  367,   -1,  376,  377,   -1,   -1,  380,  381,  382,  383,
  384,  385,  386,  387,  388,   -1,  390,  391,  392,  393,
  394,  395,  396,  397,  398,  399,  400,  401,  402,  403,
  404,  405,  406,  407,  408,  409,  410,  411,   -1,  257,
   -1,  415,   -1,  261,  418,   -1,  413,  265,   -1,  267,
   -1,   -1,  270,   -1,  272,   -1,   -1,  275,   -1,  277,
   -1,  279,   -1,  281,   -1,   -1,  284,   -1,   -1,  287,
  288,   -1,   -1,   -1,   -1,   -1,   -1,  295,  296,  297,
   -1,   -1,  300,  301,  302,   -1,  304,   -1,   -1,  307,
   -1,  309,  310,  311,  312,   -1,   -1,   -1,  316,  317,
  318,   -1,   -1,  321,  322,  323,   -1,   -1,   -1,   -1,
   -1,   -1,  330,  331,   -1,  333,  334,   -1,  336,  337,
  338,   -1,   -1,  257,  342,   -1,   -1,  261,   -1,   -1,
   -1,  265,   -1,  267,   -1,   -1,  270,   -1,  272,   -1,
   -1,  275,   -1,  277,   -1,  279,   -1,  281,  366,   -1,
  284,   -1,   -1,  287,  288,   -1,   -1,   -1,   -1,   -1,
   -1,  295,  296,  297,   -1,   -1,  300,  301,  302,   -1,
  304,   -1,   -1,  307,   -1,  309,  310,  311,  312,   -1,
   -1,   -1,  316,  317,  318,   -1,   -1,  321,  322,  323,
   -1,   -1,   -1,   -1,   -1,  413,  330,  331,   -1,  333,
  334,   -1,  336,  337,  338,   -1,   -1,   -1,  342,   -1,
   -1,   -1,   -1,  261,   -1,  263,   -1,  265,   -1,  267,
   -1,   -1,  270,   -1,  272,  273,   -1,  275,   -1,  277,
   -1,  279,  366,  281,  282,  283,  284,   -1,   -1,  287,
  288,   -1,   -1,   -1,   -1,  293,  294,  295,  296,  297,
   -1,   -1,  300,  301,  302,   -1,  304,   -1,  306,  307,
  308,  309,  310,  311,  312,  313,   -1,  315,  316,  317,
  318,   -1,   -1,  321,  322,  323,   -1,  325,   -1,  413,
   -1,   -1,  330,  331,   -1,  333,  334,   -1,  336,  337,
  338,   -1,   -1,   -1,  342,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  261,   -1,  362,  363,  265,   -1,  267,   -1,
   -1,  270,   -1,  272,  273,   -1,  275,  375,  277,   -1,
  279,   -1,  281,  282,  283,  284,   -1,   -1,  287,  288,
   -1,   -1,   -1,   -1,  293,   -1,  295,  296,  297,   -1,
   -1,  300,   -1,  302,   -1,  304,   -1,   -1,  307,   -1,
  309,  310,  311,  312,   -1,  413,   -1,  316,  317,  318,
   -1,   -1,  321,  322,  323,   -1,   -1,   -1,   -1,   -1,
   -1,  330,  331,   -1,  333,  334,  261,  336,  337,  338,
  265,   -1,  267,  342,   -1,  270,   -1,  272,  273,   -1,
  275,   -1,  277,   -1,  279,   -1,  281,  282,  283,  284,
   -1,   -1,  287,  288,   -1,   -1,   -1,  366,  293,   -1,
  295,  296,  297,   -1,   -1,  300,  375,  302,   -1,  304,
   -1,   -1,  307,   -1,  309,  310,  311,  312,   -1,   -1,
   -1,  316,  317,  318,   -1,   -1,  321,  322,  323,   -1,
   -1,   -1,   -1,   -1,   -1,  330,  331,   -1,  333,  334,
   -1,  336,  337,  338,  413,   -1,   -1,  342,   -1,   -1,
   -1,   -1,  261,   -1,   -1,   -1,  265,   -1,  267,   -1,
   -1,  270,   -1,  272,  273,   -1,  275,   -1,  277,   -1,
  279,  366,  281,  282,  283,  284,   -1,   -1,  287,  288,
  375,   -1,   -1,   -1,  293,   -1,  295,  296,  297,   -1,
   -1,  300,   -1,  302,   -1,  304,   -1,   -1,  307,   -1,
  309,  310,  311,  312,   -1,   -1,   -1,  316,  317,  318,
   -1,   -1,  321,  322,  323,   -1,   -1,   -1,  413,   -1,
   -1,  330,  331,   -1,  333,  334,  261,  336,  337,  338,
  265,   -1,  267,  342,   -1,  270,   -1,  272,  273,   -1,
  275,   -1,  277,   -1,  279,   -1,  281,  282,  283,  284,
   -1,   -1,  287,  288,   -1,   -1,   -1,  366,  293,   -1,
  295,  296,  297,   -1,   -1,  300,  375,  302,   -1,  304,
   -1,   -1,  307,   -1,  309,  310,  311,  312,   -1,   -1,
   -1,  316,  317,  318,   -1,   -1,  321,  322,  323,   -1,
   -1,   -1,   -1,   -1,   -1,  330,  331,   -1,  333,  334,
   -1,  336,  337,  338,  413,   -1,   -1,  342,   -1,   -1,
   -1,   -1,  261,   -1,   -1,   -1,  265,   -1,  267,   -1,
   -1,  270,   -1,  272,  273,   -1,  275,   -1,  277,   -1,
  279,  366,  281,  282,  283,  284,   -1,   -1,  287,  288,
  375,   -1,   -1,   -1,  293,   -1,  295,  296,  297,   -1,
   -1,  300,   -1,  302,   -1,  304,   -1,   -1,  307,   -1,
  309,  310,  311,  312,   -1,   -1,   -1,  316,  317,  318,
   -1,   -1,  321,  322,  323,   -1,   -1,   -1,  413,   -1,
   -1,  330,  331,   -1,  333,  334,  261,  336,  337,  338,
  265,   -1,  267,  342,   -1,  270,   -1,  272,  273,   -1,
  275,   -1,  277,   -1,  279,   -1,  281,  282,  283,  284,
   -1,   -1,  287,  288,   -1,   -1,   -1,  366,  293,   -1,
  295,  296,  297,   -1,   -1,  300,   -1,  302,   -1,  304,
   -1,   -1,  307,   -1,  309,  310,  311,  312,   -1,   -1,
   -1,  316,  317,  318,   -1,   -1,  321,  322,  323,  261,
   -1,   -1,   -1,   -1,   -1,  330,  331,   -1,  333,  334,
   -1,  336,  337,  338,  413,   -1,   -1,  342,   -1,   -1,
   -1,   -1,  284,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  297,   -1,   -1,   -1,   -1,
  302,  366,   -1,  305,   -1,  307,   -1,  309,  310,  311,
  312,   -1,   -1,   -1,   -1,  317,   -1,   -1,   -1,  321,
   -1,   -1,   -1,  325,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  333,  264,  265,  336,  267,  338,   -1,  270,  271,
   -1,   -1,   -1,  275,  276,  277,   -1,  279,  413,   -1,
   -1,   -1,   -1,  285,   -1,  357,  288,   -1,   -1,   -1,
   -1,   -1,   -1,  295,   -1,  367,   -1,  369,  300,  371,
  302,  303,  304,   -1,  306,   -1,   -1,   -1,   -1,   -1,
   -1,  313,  384,   -1,  316,   -1,  318,  319,   -1,   -1,
  322,   -1,   -1,  325,   -1,  327,   -1,  329,  330,  331,
  332,   -1,  334,   -1,   -1,   -1,   -1,   -1,   -1,  341,
   -1,  413,  344,  345,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  369,  370,   -1,
  372,   -1,   -1,  375,  376,  377,  378,   -1,   -1,   -1,
  382,   -1,  384,   -1,  264,  265,   -1,  267,  390,  391,
  270,  271,   -1,   -1,   -1,  275,  276,  277,   -1,  279,
   -1,   -1,   -1,   -1,   -1,  285,   -1,   -1,  288,   -1,
  412,  413,  414,  415,   -1,  295,   -1,   -1,   -1,   -1,
  300,   -1,  302,  303,  304,   -1,  306,   -1,   -1,   -1,
   -1,   -1,   -1,  313,   -1,   -1,  316,   -1,  318,  319,
   -1,   -1,  322,   -1,   -1,  325,   -1,  327,   -1,  329,
  330,  331,  332,   -1,  334,   -1,   -1,   -1,   -1,   -1,
   -1,  341,   -1,   -1,  344,  345,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  369,
   -1,   -1,  372,   -1,   -1,  375,  376,  377,  378,   -1,
   -1,   -1,  382,   -1,  384,   -1,  264,  265,   -1,  267,
  390,  391,  270,  271,   -1,   -1,   -1,  275,  276,  277,
   -1,  279,   -1,   -1,   -1,   -1,   -1,  285,   -1,   -1,
  288,   -1,  412,  413,  414,  415,   -1,  295,   -1,   -1,
   -1,   -1,  300,   -1,  302,  303,  304,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  316,   -1,
  318,  319,  320,   -1,  322,   -1,   -1,  325,   -1,  327,
   -1,  329,  330,  331,  332,   -1,  334,   -1,   -1,   -1,
   -1,   -1,   -1,  341,   -1,   -1,  344,  345,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  365,   -1,   -1,
   -1,  369,   -1,   -1,   -1,   -1,   -1,  375,  376,  377,
  378,   -1,   -1,   -1,  382,   -1,  384,   -1,  264,  265,
   -1,  267,  390,  391,  270,  271,   -1,   -1,   -1,  275,
  276,  277,   -1,  279,   -1,   -1,   -1,   -1,   -1,  285,
   -1,   -1,  288,   -1,  412,  413,  414,  415,   -1,  295,
   -1,   -1,   -1,   -1,  300,   -1,  302,  303,  304,   -1,
  306,   -1,   -1,   -1,   -1,   -1,   -1,  313,   -1,   -1,
  316,   -1,  318,  319,   -1,   -1,  322,   -1,   -1,  325,
   -1,  327,   -1,  329,  330,  331,  332,   -1,  334,   -1,
   -1,   -1,   -1,   -1,   -1,  341,   -1,   -1,  344,  345,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  369,   -1,   -1,   -1,   -1,   -1,  375,
  376,  377,  378,   -1,   -1,   -1,  382,   -1,  384,   -1,
  264,  265,   -1,  267,  390,  391,  270,  271,   -1,   -1,
   -1,  275,  276,  277,   -1,  279,   -1,   -1,   -1,   -1,
   -1,  285,   -1,   -1,  288,   -1,  412,  413,  414,  415,
   -1,  295,   -1,   -1,   -1,   -1,  300,   -1,  302,  303,
  304,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  316,   -1,  318,  319,   -1,   -1,  322,   -1,
   -1,  325,   -1,  327,   -1,  329,  330,  331,  332,   -1,
  334,   -1,   -1,  337,   -1,   -1,   -1,   -1,   -1,   -1,
  344,  345,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  369,   -1,   -1,   -1,   -1,
   -1,  375,  376,  377,  378,   -1,   -1,   -1,  382,   -1,
  384,   -1,  264,  265,   -1,  267,  390,  391,  270,  271,
   -1,   -1,   -1,  275,  276,  277,   -1,  279,   -1,   -1,
   -1,   -1,   -1,  285,   -1,   -1,  288,   -1,  412,  413,
  414,  415,   -1,  295,   -1,   -1,   -1,   -1,  300,   -1,
  302,  303,  304,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  316,   -1,  318,  319,   -1,   -1,
  322,   -1,   -1,  325,   -1,  327,   -1,  329,  330,  331,
  332,   -1,  334,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  344,  345,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  365,   -1,   -1,   -1,  369,   -1,   -1,
   -1,   -1,   -1,  375,  376,  377,  378,   -1,   -1,   -1,
  382,   -1,  384,   -1,  264,  265,   -1,  267,  390,  391,
  270,  271,   -1,   -1,   -1,  275,  276,  277,   -1,  279,
   -1,   -1,   -1,   -1,   -1,  285,   -1,   -1,  288,   -1,
  412,  413,  414,  415,   -1,  295,   -1,   -1,   -1,   -1,
  300,   -1,  302,  303,  304,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  316,   -1,  318,  319,
   -1,   -1,  322,   -1,   -1,  325,   -1,  327,   -1,  329,
  330,  331,  332,   -1,  334,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  344,  345,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  366,   -1,   -1,  369,
   -1,   -1,   -1,   -1,   -1,  375,  376,  377,  378,   -1,
   -1,   -1,  382,   -1,  384,   -1,  264,  265,   -1,  267,
  390,  391,  270,  271,   -1,   -1,   -1,  275,  276,  277,
   -1,  279,   -1,   -1,   -1,   -1,   -1,  285,   -1,   -1,
  288,   -1,  412,  413,  414,  415,   -1,  295,   -1,   -1,
   -1,   -1,  300,   -1,  302,  303,  304,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  316,   -1,
  318,  319,   -1,   -1,  322,   -1,   -1,  325,   -1,  327,
   -1,  329,  330,  331,  332,   -1,  334,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  344,  345,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  365,   -1,   -1,
   -1,  369,   -1,   -1,   -1,   -1,   -1,  375,  376,  377,
  378,   -1,   -1,   -1,  382,   -1,  384,   -1,  264,  265,
   -1,  267,  390,  391,  270,  271,   -1,   -1,   -1,  275,
  276,  277,   -1,  279,   -1,   -1,   -1,   -1,   -1,  285,
   -1,   -1,  288,   -1,  412,  413,  414,  415,   -1,  295,
   -1,   -1,   -1,   -1,  300,   -1,  302,  303,  304,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  316,   -1,  318,  319,   -1,   -1,  322,   -1,   -1,  325,
   -1,  327,   -1,  329,  330,  331,  332,   -1,  334,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  344,  345,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  369,   -1,   -1,   -1,   -1,   -1,  375,
  376,  377,  378,   -1,   -1,   -1,  382,   -1,  384,   -1,
  264,  265,   -1,  267,  390,  391,  270,  271,   -1,   -1,
   -1,  275,  276,  277,   -1,  279,   -1,   -1,   -1,   -1,
   -1,  285,   -1,   -1,  288,   -1,  412,  413,  414,  415,
   -1,  295,   -1,   -1,   -1,   -1,  300,   -1,  302,  303,
  304,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  316,   -1,  318,  319,   -1,   -1,  322,   -1,
   -1,  325,   -1,  327,   -1,  329,  330,  331,  332,   -1,
  334,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  344,  345,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  369,   -1,   -1,   -1,   -1,
   -1,  375,  376,  377,  378,   -1,   -1,   -1,  382,   -1,
  384,   -1,  264,  265,   -1,  267,  390,  391,  270,  271,
   -1,   -1,   -1,  275,  276,  277,   -1,  279,   -1,   -1,
   -1,   -1,   -1,  285,   -1,   -1,  288,   -1,  412,  413,
  414,  415,   -1,  295,   -1,   -1,   -1,   -1,  300,   -1,
  302,  303,  304,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  316,   -1,  318,  319,   -1,   -1,
  322,   -1,   -1,  325,   -1,  327,   -1,  329,  330,  331,
  332,   -1,  334,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  344,  345,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  369,   -1,   -1,
   -1,   -1,   -1,  375,  376,  377,  378,   -1,   -1,   -1,
  382,   -1,  384,   -1,  264,  265,   -1,  267,  390,  391,
  270,  271,   -1,   -1,   -1,  275,  276,  277,   -1,  279,
   -1,   -1,   -1,   -1,   -1,  285,   -1,   -1,  288,   -1,
  412,  413,  414,  415,   -1,  295,   -1,   -1,   -1,   -1,
  300,   -1,  302,  303,  304,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  316,   -1,  318,  319,
   -1,   -1,  322,   -1,   -1,  325,   -1,  327,   -1,  329,
  330,  331,  332,   -1,  334,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  344,  345,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  369,
   -1,   -1,   -1,   -1,   -1,  375,  376,  377,  378,   -1,
   -1,   -1,  382,   -1,  384,   -1,  264,  265,   -1,  267,
  390,  391,  270,  271,   -1,   -1,   -1,  275,  276,  277,
   -1,  279,   -1,   -1,   -1,   -1,   -1,  285,   -1,   -1,
  288,   -1,  412,  413,  414,  415,   -1,  295,   -1,   -1,
   -1,   -1,  300,   -1,  302,  303,  304,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  316,   -1,
  318,  319,   -1,   -1,  322,   -1,   -1,  325,   -1,  327,
   -1,  329,  330,  331,  332,   -1,  334,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  344,  345,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  369,   -1,   -1,   -1,   -1,   -1,  375,  376,  377,
  378,   -1,   -1,   -1,  382,   -1,  384,   -1,  264,  265,
   -1,  267,  390,  391,  270,  271,   -1,   -1,   -1,  275,
  276,  277,   -1,  279,   -1,   -1,   -1,   -1,   -1,  285,
   -1,   -1,  288,   -1,  412,  413,  414,  415,   -1,  295,
   -1,   -1,   -1,   -1,  300,   -1,  302,  303,  304,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  316,   -1,  318,  319,   -1,   -1,  322,   -1,   -1,  325,
   -1,  327,   -1,  329,  330,  331,  332,   -1,  334,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  344,  345,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  369,   -1,   -1,   -1,   -1,   -1,  375,
  376,  377,  378,   -1,   -1,   -1,  382,   -1,  384,   -1,
  264,  265,   -1,  267,  390,  391,  270,  271,   -1,   -1,
   -1,  275,  276,  277,   -1,  279,   -1,   -1,   -1,   -1,
   -1,  285,   -1,  261,  288,   -1,  412,  413,  414,  415,
   -1,  295,   -1,   -1,   -1,   -1,  300,   -1,  302,  303,
  304,   -1,   -1,   -1,   -1,   -1,  284,   -1,   -1,   -1,
   -1,   -1,  316,   -1,  318,  319,   -1,   -1,  322,  297,
   -1,  325,   -1,  327,  302,  329,  330,  331,  332,  307,
  334,  309,  310,  311,  312,   -1,   -1,   -1,   -1,  317,
   -1,   -1,   -1,  321,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  333,   -1,   -1,  336,   -1,
  338,   -1,   -1,   -1,   -1,  369,   -1,   -1,   -1,   -1,
   -1,  375,  376,  377,  378,   -1,   -1,   -1,  382,   -1,
  384,   -1,   -1,   -1,  362,  363,  390,  391,  366,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  263,   -1,  265,   -1,  267,  412,  413,
  270,  415,  272,  273,   -1,  275,   -1,  277,   -1,  279,
   -1,  281,  282,  283,   -1,   -1,   -1,  287,  288,   -1,
   -1,   -1,   -1,  293,   -1,  295,  296,   -1,   -1,   -1,
  300,   -1,   -1,   -1,  304,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  315,  316,   -1,  318,   -1,
   -1,   -1,  322,  323,   -1,   -1,   -1,   -1,   -1,   -1,
  330,  331,   -1,   -1,  334,   -1,   -1,  337,   -1,   -1,
   -1,   -1,  342,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  264,  265,   -1,  267,   -1,   -1,  270,
  271,   -1,  362,  363,  275,  276,  277,   -1,  279,   -1,
   -1,   -1,   -1,   -1,  285,  375,   -1,  288,   -1,   -1,
   -1,   -1,   -1,   -1,  295,   -1,   -1,   -1,   -1,  300,
   -1,  302,  303,  304,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  316,   -1,  318,  319,   -1,
   -1,  322,   -1,  413,  325,   -1,  327,   -1,  329,  330,
  331,  332,  265,  334,  267,   -1,  337,  270,   -1,  272,
  273,   -1,  275,   -1,  277,   -1,  279,   -1,  281,  282,
  283,   -1,   -1,   -1,  287,  288,   -1,   -1,   -1,   -1,
  293,   -1,  295,  296,   -1,   -1,   -1,  300,  369,   -1,
   -1,  304,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  316,   -1,  318,   -1,   -1,   -1,  322,
  323,   -1,   -1,   -1,   -1,   -1,   -1,  330,  331,   -1,
   -1,  334,   -1,   -1,  337,   -1,   -1,   -1,   -1,  342,
   -1,  412,  413,  265,   -1,  267,   -1,   -1,  270,   -1,
  272,  273,   -1,  275,   -1,  277,   -1,  279,   -1,  281,
  282,  283,   -1,   -1,   -1,  287,  288,   -1,   -1,   -1,
   -1,  293,  375,  295,  296,   -1,   -1,   -1,  300,   -1,
   -1,   -1,  304,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  316,   -1,  318,   -1,   -1,   -1,
  322,  323,   -1,   -1,   -1,   -1,   -1,   -1,  330,  331,
  413,  265,  334,  267,   -1,  337,  270,   -1,   -1,  273,
  342,  275,   -1,  277,   -1,  279,   -1,  281,  282,  283,
   -1,   -1,   -1,  287,  288,   -1,   -1,   -1,   -1,  293,
   -1,  295,   -1,  265,   -1,  267,  300,   -1,  270,   -1,
  304,  273,   -1,  275,   -1,  277,   -1,  279,   -1,  281,
  282,  283,  316,   -1,  318,  287,  288,   -1,  322,   -1,
   -1,  293,   -1,  295,   -1,   -1,  330,  331,  300,   -1,
  334,   -1,  304,  337,   -1,   -1,   -1,   -1,  342,   -1,
   -1,  413,   -1,   -1,  316,   -1,  318,   -1,   -1,   -1,
  322,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  330,  331,
   -1,   -1,  334,   -1,   -1,  337,   -1,  265,   -1,  267,
  342,  375,  270,   -1,  272,   -1,   -1,  275,   -1,  277,
   -1,  279,   -1,  281,   -1,   -1,   -1,   -1,   -1,  287,
  288,   -1,   -1,   -1,   -1,   -1,   -1,  295,  296,   -1,
   -1,   -1,  300,   -1,   -1,   -1,  304,   -1,   -1,  413,
   -1,   -1,  265,   -1,  267,   -1,   -1,  270,  316,   -1,
  318,   -1,  275,   -1,  322,  323,  279,   -1,   -1,   -1,
   -1,   -1,  330,  331,   -1,  288,  334,   -1,   -1,  337,
   -1,  413,  295,   -1,  342,   -1,   -1,  300,   -1,   -1,
   -1,  304,   -1,  306,   -1,  308,  265,   -1,  267,   -1,
  313,  270,   -1,  316,   -1,  318,  275,   -1,   -1,  322,
  279,   -1,  325,   -1,   -1,   -1,   -1,  330,  331,  288,
   -1,  334,   -1,   -1,  337,   -1,  295,   -1,   -1,   -1,
   -1,  300,   -1,   -1,   -1,  304,  265,  306,  267,  308,
   -1,  270,   -1,   -1,  313,   -1,  275,  316,  277,  318,
  279,   -1,  281,  322,   -1,  413,  325,  370,  287,  288,
   -1,  330,  331,   -1,   -1,  334,  295,   -1,  337,   -1,
   -1,  300,   -1,   -1,   -1,  304,   -1,   -1,   -1,   -1,
  265,   -1,  267,   -1,   -1,  270,   -1,  316,   -1,  318,
  275,   -1,   -1,  322,  279,   -1,   -1,   -1,   -1,  368,
  413,  330,  331,  288,   -1,  334,   -1,   -1,  337,   -1,
  295,   -1,   -1,  342,   -1,  300,   -1,   -1,   -1,  304,
  265,  306,  267,  308,   -1,  270,   -1,   -1,  313,   -1,
  275,  316,   -1,  318,  279,   -1,   -1,  322,   -1,   -1,
  325,   -1,   -1,  288,  413,  330,  331,   -1,   -1,  334,
  295,   -1,  337,   -1,   -1,  300,   -1,   -1,   -1,  304,
  265,  306,  267,   -1,   -1,  270,   -1,  272,  313,   -1,
  275,  316,   -1,  318,  279,   -1,   -1,  322,   -1,   -1,
  325,   -1,   -1,  288,  413,  330,  331,   -1,   -1,  334,
  295,   -1,  337,   -1,   -1,  300,   -1,  302,   -1,  304,
  265,   -1,  267,   -1,   -1,  270,   -1,   -1,   -1,   -1,
  275,  316,   -1,  318,  279,   -1,   -1,  322,  323,   -1,
   -1,   -1,   -1,  288,   -1,  330,  331,   -1,  413,  334,
  295,   -1,  337,   -1,   -1,  300,   -1,   -1,   -1,  304,
   -1,   -1,   -1,   -1,  265,   -1,  267,   -1,   -1,  270,
   -1,  316,   -1,  318,  275,   -1,   -1,  322,  279,   -1,
   -1,   -1,   -1,   -1,   -1,  330,  331,  288,  413,  334,
   -1,   -1,  337,   -1,  295,   -1,   -1,   -1,   -1,  300,
   -1,   -1,   -1,  304,  265,   -1,  267,   -1,   -1,  270,
   -1,   -1,   -1,   -1,  275,  316,   -1,  318,  279,   -1,
   -1,  322,   -1,   -1,   -1,  370,   -1,  288,  413,  330,
  331,   -1,   -1,  334,  295,   -1,  337,   -1,   -1,  300,
   -1,   -1,  265,  304,  267,   -1,   -1,  270,   -1,   -1,
   -1,   -1,  275,   -1,   -1,  316,  279,  318,   -1,   -1,
   -1,  322,   -1,   -1,   -1,  288,   -1,   -1,  413,  330,
  331,   -1,  295,  334,   -1,   -1,  337,  300,   -1,   -1,
   -1,  304,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  265,  316,  267,  318,   -1,  270,   -1,  322,
   -1,   -1,  275,   -1,   -1,   -1,  279,  330,  331,   -1,
   -1,  334,  413,   -1,  337,  288,  265,   -1,  267,   -1,
   -1,  270,  295,   -1,   -1,   -1,  275,  300,   -1,   -1,
  279,  304,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  288,
   -1,   -1,   -1,  316,   -1,  318,  295,   -1,   -1,  322,
   -1,  300,  413,   -1,   -1,  304,   -1,  330,  331,   -1,
   -1,  334,   -1,   -1,  337,   -1,  265,  316,  267,  318,
   -1,  270,   -1,  322,   -1,   -1,  275,   -1,   -1,   -1,
  279,  330,  331,   -1,   -1,  334,   -1,   -1,  337,  288,
  413,   -1,   -1,   -1,   -1,   -1,  295,   -1,   -1,   -1,
   -1,  300,   -1,   -1,  265,  304,  267,   -1,   -1,  270,
   -1,   -1,   -1,   -1,  275,   -1,   -1,  316,  279,  318,
   -1,   -1,   -1,  322,   -1,   -1,   -1,  288,   -1,   -1,
   -1,  330,  331,   -1,  295,  334,   -1,   -1,  337,  300,
  413,   -1,   -1,  304,  265,   -1,  267,   -1,   -1,  270,
   -1,   -1,   -1,   -1,  275,  316,   -1,  318,  279,   -1,
   -1,  322,   -1,   -1,  413,   -1,   -1,  288,   -1,  330,
  331,   -1,   -1,  334,  295,   -1,  337,   -1,   -1,  300,
   -1,   -1,  265,  304,  267,   -1,   -1,  270,   -1,   -1,
   -1,   -1,  275,   -1,   -1,  316,  279,  318,   -1,   -1,
   -1,  322,   -1,   -1,   -1,  288,   -1,   -1,   -1,  330,
  331,   -1,  295,  334,  413,   -1,  337,  300,   -1,   -1,
   -1,  304,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  265,  316,  267,  318,   -1,  270,   -1,  322,
   -1,   -1,  275,   -1,   -1,   -1,  279,  330,  331,   -1,
   -1,  334,  413,   -1,  337,  288,  265,   -1,  267,   -1,
   -1,  270,  295,   -1,   -1,   -1,  275,  300,   -1,   -1,
  279,  304,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  288,
   -1,   -1,   -1,  316,   -1,  318,  295,   -1,   -1,  322,
   -1,  300,  413,   -1,   -1,  304,   -1,  330,  331,   -1,
   -1,  334,   -1,   -1,  337,   -1,  265,  316,  267,  318,
   -1,  270,   -1,  322,   -1,   -1,  275,   -1,   -1,   -1,
  279,  330,  331,   -1,   -1,  334,   -1,   -1,  337,  288,
  413,   -1,   -1,  261,   -1,   -1,  295,   -1,   -1,   -1,
   -1,  300,   -1,   -1,   -1,  304,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  284,  316,   -1,  318,
   -1,   -1,   -1,  322,   -1,  261,   -1,  263,   -1,  297,
   -1,  330,  331,   -1,  302,  334,   -1,   -1,  337,  307,
  413,  309,  310,  311,  312,   -1,   -1,  315,  284,  317,
   -1,   -1,   -1,  321,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  297,   -1,   -1,  413,  333,  302,   -1,  336,   -1,
  338,  307,   -1,  309,  310,  311,  312,   -1,   -1,   -1,
   -1,  317,   -1,   -1,   -1,  321,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  333,  366,   -1,
  336,   -1,  338,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  413,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  366,
  };

#line 6077 "cs-parser.jay"

// <summary>
//   A class used to pass around variable declarations and constants
// </summary>
class VariableDeclaration {
	public string identifier;
	Expression initializer;
	public Location Location;

	public VariableDeclaration (Tokenizer.LocatedToken lt, Expression initializer)
	{
		this.identifier = lt.Value;
		this.initializer = initializer;
		this.Location = lt.Location;
	}

	public Expression GetInitializer (FullNamedExpression type)
	{
		if (initializer is ArrayInitializer)
			return new ArrayCreation (type, (ArrayInitializer)initializer);

		return initializer;
	}

	public bool HasInitializer {
		get { return initializer != null; }
	}
}


// <summary>
//  A class used to hold info about an operator declarator
// </summary>
class OperatorDeclaration {
	public readonly Operator.OpType optype;
	public readonly FullNamedExpression ret_type;
	public readonly Location location;

	public OperatorDeclaration (Operator.OpType op, FullNamedExpression ret_type, Location location)
	{
		optype = op;
		this.ret_type = ret_type;
		this.location = location;
	}
}

void Error_ExpectingTypeName (Expression expr)
{
	if (expr is Invocation){
		Report.Error (1002, expr.Location, "Expecting `;'");
	} else {
		Expression.Error_InvalidExpressionStatement (Report, expr.Location);
	}
}

void Error_ParameterModifierNotValid (string modifier, Location loc)
{
	Report.Error (631, loc, "The parameter modifier `{0}' is not valid in this context",
			              modifier);
}

void Error_DuplicateParameterModifier (Location loc, Parameter.Modifier mod)
{
	Report.Error (1107, loc, "Duplicate parameter modifier `{0}'",
  		Parameter.GetModifierSignature (mod));
}

void Error_TypeExpected (Location loc)
{
	Report.Error (1031, loc, "Type expected");
}

void Error_UnsafeCodeNotAllowed (Location loc)
{
	Report.Error (227, loc, "Unsafe code requires the `unsafe' command line option to be specified");
}

void Error_NamedArgumentExpected (NamedArgument a)
{
	Report.Error (1738, a.Location, "Named arguments must appear after the positional arguments");
}

void push_current_class (TypeContainer tc, object partial_token)
{
	if (RootContext.EvalMode){
		tc.ModFlags = (tc.ModFlags & ~(Modifiers.PRIVATE|Modifiers.INTERNAL)) | Modifiers.PUBLIC;
		undo.AddTypeContainer (current_container, tc);
	}

	if (partial_token != null)
		current_container = current_container.AddPartial (tc);
	else
		current_container = current_container.AddTypeContainer (tc);

	++lexer.parsing_declaration;
	current_class = tc;
}

DeclSpace pop_current_class ()
{
	DeclSpace retval = current_class;

	current_class = current_class.Parent;
	current_container = current_class.PartialContainer;

	return retval;
}

// <summary>
//   Given the @class_name name, it creates a fully qualified name
//   based on the containing declaration space
// </summary>
MemberName
MakeName (MemberName class_name)
{
	Namespace ns = current_namespace.NS;

	if (current_container == RootContext.ToplevelTypes) {
		if (ns.Name.Length != 0)
			return new MemberName (ns.MemberName, class_name);
		else
			return class_name;
	} else {
		return new MemberName (current_container.MemberName, class_name);
	}
}

[System.Diagnostics.Conditional ("FULL_AST")]
void StoreModifierLocation (object token, Location loc)
{
	if (lbag == null)
		return;

	if (mod_locations == null)
  		mod_locations = new List<Tuple<Modifiers, Location>> ();

	mod_locations.Add (Tuple.Create ((Modifiers) token, loc));
}

Block declare_local_variables (FullNamedExpression type, List<object> variable_declarators, Location loc)
{
	Block implicit_block;

	//
	// If we are doing interactive editing, we want variable declarations
	// that are in the top block to be added instead to the class as 
	// static variables
	//
	if (RootContext.StatementMode){
		bool hoist = true;

		for (Block b = current_block; b != null; b = b.Parent){
			if (b is ExplicitBlock && !(b is ToplevelBlock)){
				// There has been an explicit block, we cant add to the class
				hoist = false;
				break;
			}
		}		
		if (hoist){
			//
			// We can use "current_block" since we know there are no explicit blocks
			//
			foreach (VariableDeclaration decl in variable_declarators){
				// We can not use the super-handy f.Initializer, because
				// multiple lines would force code to be executed out of sync
				var init = decl.GetInitializer (type);
				if (init != null){
				        string id = "$" + decl.identifier;
					LocalInfo vi = current_block.AddVariable (type, id, decl.Location);					

					// Avoid warning about this variable not being used.
					vi.Used = true;

					LocalVariableReference var;
					var = new LocalVariableReferenceWithClassSideEffect (current_container, decl.identifier, current_block, id, vi, decl.Location);
					Assign assign = new SimpleAssign (var, init, decl.Location);
					current_block.AddStatement (new StatementExpression (assign));
					assign = new SimpleAssign (new SimpleName (decl.identifier, decl.Location), var);
					current_block.AddStatement (new StatementExpression (assign));
				} else {
					Field f = new Field (current_container, (FullNamedExpression) type, Modifiers.PUBLIC | Modifiers.STATIC,
						new MemberName (decl.identifier, loc), null);
					current_container.AddField (f);

					// Register the field to be visible later as a global variable
					Evaluator.QueueField (f);
				}
			}

			return current_block;
		}
	}

	//
	// We use the `Used' property to check whether statements
	// have been added to the current block.  If so, we need
	// to create another block to contain the new declaration
	// otherwise, as an optimization, we use the same block to
	// add the declaration.
	//
	// FIXME: A further optimization is to check if the statements
	// that were added were added as part of the initialization
	// below.  In which case, no other statements have been executed
	// and we might be able to reduce the number of blocks for
	// situations like this:
	//
	// int j = 1;  int k = j + 1;
	//
	if (current_block.Used)
		implicit_block = new Block (current_block, loc, lexer.Location);
	else
		implicit_block = current_block;

	foreach (VariableDeclaration decl in variable_declarators){

		if (implicit_block.AddVariable (type, decl.identifier, decl.Location) != null) {
			if (decl.HasInitializer){
				Assign assign;
				
				var lvr = new LocalVariableReference (implicit_block, decl.identifier, loc);

				assign = new SimpleAssign (lvr, decl.GetInitializer (type), decl.Location);

				implicit_block.AddStatement (new StatementExpression (assign));
			}
		}
	}
	
	return implicit_block;
}

Block declare_local_constants (FullNamedExpression type, List<object> declarators)
{
	Block implicit_block;

	if (current_block.Used)
		implicit_block = new Block (current_block);
	else
		implicit_block = current_block;

	foreach (VariableDeclaration decl in declarators){
		implicit_block.AddConstant (type, decl.identifier, decl.GetInitializer (type), decl.Location);
	}
	
	return implicit_block;
}

string CheckAttributeTarget (string a, Location l)
{
	switch (a) {
	case "assembly" : case "module" : case "field" : case "method" : case "param" : case "property" : case "type" :
			return a;
	}

	Report.Warning (658, 1, l,
		 "`{0}' is invalid attribute target. All attributes in this attribute section will be ignored", a);
	return string.Empty;
}

static bool IsUnaryOperator (Operator.OpType op)
{
	switch (op) {
		
	case Operator.OpType.LogicalNot: 
	case Operator.OpType.OnesComplement: 
	case Operator.OpType.Increment:
	case Operator.OpType.Decrement:
	case Operator.OpType.True: 
	case Operator.OpType.False: 
	case Operator.OpType.UnaryPlus: 
	case Operator.OpType.UnaryNegation:
		return true;
	}
	return false;
}

void syntax_error (Location l, string msg)
{
	Report.Error (1003, l, "Syntax error, " + msg);
}

Tokenizer lexer;

public Tokenizer Lexer {
	get {
		return lexer;
	}
}		   

static CSharpParser ()
{
	oob_stack = new Stack<object> ();
}

public CSharpParser (SeekableStreamReader reader, CompilationUnit file, CompilerContext ctx)
{
	if (RootContext.EvalMode)
		undo = new Undo ();

	this.file = file;
	this.compiler = ctx;
	current_namespace = new NamespaceEntry (null, file, null);
	current_class = current_namespace.SlaveDeclSpace;
	current_container = current_class.PartialContainer; // == RootContest.ToplevelTypes
	oob_stack.Clear ();
	lexer = new Tokenizer (reader, file, ctx);
	
	use_global_stacks = true;
}

public void parse ()
{
	eof_token = Token.EOF;
	Tokenizer.LocatedToken.Initialize ();
	
	try {
		if (yacc_verbose_flag > 1)
			yyparse (lexer, new yydebug.yyDebugSimple ());
		else
			yyparse (lexer);
			
		Tokenizer tokenizer = lexer as Tokenizer;
		tokenizer.cleanup ();		
	} catch (Exception e){
	  	if (e is yyParser.yyUnexpectedEof)
			UnexpectedEOF = true;

		if (e is yyParser.yyException)
			Report.Error (-25, lexer.Location, "Parsing error");
		else if (yacc_verbose_flag > 0)
			throw;	// Used by compiler-tester to test internal errors
		else 
			Report.Error (589, lexer.Location, "Internal compiler error during parsing");
	}

	if (RootContext.ToplevelTypes.NamespaceEntry != null)
		throw new InternalErrorException ("who set it?");
}

void CheckToken (int error, int yyToken, string msg, Location loc)
{
	if (yyToken >= Token.FIRST_KEYWORD && yyToken <= Token.LAST_KEYWORD)
		Report.Error (error, loc, "{0}: `{1}' is a keyword", msg, GetTokenName (yyToken));
	else
		Report.Error (error, loc, msg);
}

void CheckIdentifierToken (int yyToken, Location loc)
{
	CheckToken (1041, yyToken, "Identifier expected", loc);
}

string ConsumeStoredComment ()
{
	string s = tmpComment;
	tmpComment = null;
	Lexer.doc_state = XmlCommentState.Allowed;
	return s;
}

Location GetLocation (object obj)
{
	if (obj is Tokenizer.LocatedToken)
		return ((Tokenizer.LocatedToken) obj).Location;
	if (obj is MemberName)
		return ((MemberName) obj).Location;

	if (obj is Expression)
		return ((Expression) obj).Location;

	return lexer.Location;
}

Report Report {
	get { return compiler.Report; }
}

public LocationsBag LocationsBag {
	get {
		return lbag;
	}
	set {
		lbag = value;
	}
}

void start_block (Location loc)
{
	if (current_block == null || parsing_anonymous_method) {
		current_block = new ToplevelBlock (compiler, current_block, current_local_parameters, loc);
		parsing_anonymous_method = false;
	} else {
		current_block = new ExplicitBlock (current_block, loc, Location.Null);
	}
}

Block
end_block (Location loc)
{
	Block retval = current_block.Explicit;
	retval.SetEndLocation (loc);
	current_block = retval.Parent;
	return retval;
}

void
start_anonymous (bool lambda, ParametersCompiled parameters, Location loc)
{
	if (RootContext.Version == LanguageVersion.ISO_1){
		Report.FeatureIsNotAvailable (loc, "anonymous methods");
	}

	oob_stack.Push (current_anonymous_method);
	oob_stack.Push (current_local_parameters);

	current_local_parameters = parameters;

	current_anonymous_method = lambda 
		? new LambdaExpression (loc) 
		: new AnonymousMethodExpression (loc);

	// Force the next block to be created as a ToplevelBlock
	parsing_anonymous_method = true;
}

/*
 * Completes the anonymous method processing, if lambda_expr is null, this
 * means that we have a Statement instead of an Expression embedded 
 */
AnonymousMethodExpression end_anonymous (ToplevelBlock anon_block)
{
	AnonymousMethodExpression retval;

	current_anonymous_method.Block = anon_block;
	retval = current_anonymous_method;

	current_local_parameters = (ParametersCompiled) oob_stack.Pop ();
	current_anonymous_method = (AnonymousMethodExpression) oob_stack.Pop ();

	return retval;
}

public NamespaceEntry CurrentNamespace {
       get { 
       	   return current_namespace;
       }
}


void Error_SyntaxError (int token)
{
	Error_SyntaxError (0, token, "Unexpected symbol");
}

void Error_SyntaxError (int error_code, int token, string msg)
{
	string symbol = GetSymbolName (token);
	string expecting = GetExpecting ();
	
	if (error_code == 0) {
		if (expecting == "`)'")
			error_code = 1026;
		else
			error_code = 1525;
	}
	
	if (string.IsNullOrEmpty (expecting))
		Report.Error (error_code, lexer.Location, "{1} `{0}'", symbol, msg);
	else
		Report.Error (error_code, lexer.Location, "{2} `{0}', expecting {1}", symbol, expecting, msg);	  
}

string GetExpecting ()
{
	int [] tokens = yyExpectingTokens (yyExpectingState);
	var names = new List<string> (tokens.Length);
	bool has_type = false;
	bool has_identifier = false;
	for (int i = 0; i < tokens.Length; i++){
		int token = tokens [i];
		has_identifier |= token == Token.IDENTIFIER;
		
		string name = GetTokenName (token);
		if (name == "<internal>")
			continue;
			
		has_type |= name == "type";
		if (names.Contains (name))
			continue;
		
		names.Add (name);
	}

	//
	// Too many tokens to enumerate
	//
	if (names.Count > 8)
		return null;

	if (has_type && has_identifier)
		names.Remove ("identifier");

	if (names.Count == 1)
		return "`" + GetTokenName (tokens [0]) + "'";
	
	StringBuilder sb = new StringBuilder ();
	names.Sort ();
	int count = names.Count;
	for (int i = 0; i < count; i++){
		bool last = i + 1 == count;
		if (last)
			sb.Append ("or ");
		sb.Append ('`');
		sb.Append (names [i]);
		sb.Append (last ? "'" : count < 3 ? "' " : "', ");
	}
	return sb.ToString ();
}


string GetSymbolName (int token)
{
	switch (token){
	case Token.LITERAL:
		return ((Constant)lexer.Value).GetValue ().ToString ();
	case Token.IDENTIFIER:
		return ((Tokenizer.LocatedToken)lexer.Value).Value;

	case Token.BOOL:
		return "bool";
	case Token.BYTE:
		return "byte";
	case Token.CHAR:
		return "char";
	case Token.VOID:
		return "void";
	case Token.DECIMAL:
		return "decimal";
	case Token.DOUBLE:
		return "double";
	case Token.FLOAT:
		return "float";
	case Token.INT:
		return "int";
	case Token.LONG:
		return "long";
	case Token.SBYTE:
		return "sbyte";
	case Token.SHORT:
		return "short";
	case Token.STRING:
		return "string";
	case Token.UINT:
		return "uint";
	case Token.ULONG:
		return "ulong";
	case Token.USHORT:
		return "ushort";
	case Token.OBJECT:
		return "object";
		
	case Token.PLUS:
		return "+";
	case Token.UMINUS:
	case Token.MINUS:
		return "-";
	case Token.BANG:
		return "!";
	case Token.BITWISE_AND:
		return "&";
	case Token.BITWISE_OR:
		return "|";
	case Token.STAR:
		return "*";
	case Token.PERCENT:
		return "%";
	case Token.DIV:
		return "/";
	case Token.CARRET:
		return "^";
	case Token.OP_INC:
		return "++";
	case Token.OP_DEC:
		return "--";
	case Token.OP_SHIFT_LEFT:
		return "<<";
	case Token.OP_SHIFT_RIGHT:
		return ">>";
	case Token.OP_LT:
		return "<";
	case Token.OP_GT:
		return ">";
	case Token.OP_LE:
		return "<=";
	case Token.OP_GE:
		return ">=";
	case Token.OP_EQ:
		return "==";
	case Token.OP_NE:
		return "!=";
	case Token.OP_AND:
		return "&&";
	case Token.OP_OR:
		return "||";
	case Token.OP_PTR:
		return "->";
	case Token.OP_COALESCING:	
		return "??";
	case Token.OP_MULT_ASSIGN:
		return "*=";
	case Token.OP_DIV_ASSIGN:
		return "/=";
	case Token.OP_MOD_ASSIGN:
		return "%=";
	case Token.OP_ADD_ASSIGN:
		return "+=";
	case Token.OP_SUB_ASSIGN:
		return "-=";
	case Token.OP_SHIFT_LEFT_ASSIGN:
		return "<<=";
	case Token.OP_SHIFT_RIGHT_ASSIGN:
		return ">>=";
	case Token.OP_AND_ASSIGN:
		return "&=";
	case Token.OP_XOR_ASSIGN:
		return "^=";
	case Token.OP_OR_ASSIGN:
		return "|=";
	}

	return GetTokenName (token);
}

static string GetTokenName (int token)
{
	switch (token){
	case Token.ABSTRACT:
		return "abstract";
	case Token.AS:
		return "as";
	case Token.ADD:
		return "add";
	case Token.BASE:
		return "base";
	case Token.BREAK:
		return "break";
	case Token.CASE:
		return "case";
	case Token.CATCH:
		return "catch";
	case Token.CHECKED:
		return "checked";
	case Token.CLASS:
		return "class";
	case Token.CONST:
		return "const";
	case Token.CONTINUE:
		return "continue";
	case Token.DEFAULT:
		return "default";
	case Token.DELEGATE:
		return "delegate";
	case Token.DO:
		return "do";
	case Token.ELSE:
		return "else";
	case Token.ENUM:
		return "enum";
	case Token.EVENT:
		return "event";
	case Token.EXPLICIT:
		return "explicit";
	case Token.EXTERN:
		return "extern";
	case Token.FALSE:
		return "false";
	case Token.FINALLY:
		return "finally";
	case Token.FIXED:
		return "fixed";
	case Token.FOR:
		return "for";
	case Token.FOREACH:
		return "foreach";
	case Token.GOTO:
		return "goto";
	case Token.IF:
		return "if";
	case Token.IMPLICIT:
		return "implicit";
	case Token.IN:
		return "in";
	case Token.INTERFACE:
		return "interface";
	case Token.INTERNAL:
		return "internal";
	case Token.IS:
		return "is";
	case Token.LOCK:
		return "lock";
	case Token.NAMESPACE:
		return "namespace";
	case Token.NEW:
		return "new";
	case Token.NULL:
		return "null";
	case Token.OPERATOR:
		return "operator";
	case Token.OUT:
		return "out";
	case Token.OVERRIDE:
		return "override";
	case Token.PARAMS:
		return "params";
	case Token.PRIVATE:
		return "private";
	case Token.PROTECTED:
		return "protected";
	case Token.PUBLIC:
		return "public";
	case Token.READONLY:
		return "readonly";
	case Token.REF:
		return "ref";
	case Token.RETURN:
		return "return";
	case Token.REMOVE:
		return "remove";
	case Token.SEALED:
		return "sealed";
	case Token.SIZEOF:
		return "sizeof";
	case Token.STACKALLOC:
		return "stackalloc";
	case Token.STATIC:
		return "static";
	case Token.STRUCT:
		return "struct";
	case Token.SWITCH:
		return "switch";
	case Token.THIS:
		return "this";
	case Token.THROW:
		return "throw";
	case Token.TRUE:
		return "true";
	case Token.TRY:
		return "try";
	case Token.TYPEOF:
		return "typeof";
	case Token.UNCHECKED:
		return "unchecked";
	case Token.UNSAFE:
		return "unsafe";
	case Token.USING:
		return "using";
	case Token.VIRTUAL:
		return "virtual";
	case Token.VOLATILE:
		return "volatile";
	case Token.WHERE:
		return "where";
	case Token.WHILE:
		return "while";
	case Token.ARGLIST:
		return "__arglist";
	case Token.PARTIAL:
		return "partial";
	case Token.ARROW:
		return "=>";
	case Token.FROM:
	case Token.FROM_FIRST:
		return "from";
	case Token.JOIN:
		return "join";
	case Token.ON:
		return "on";
	case Token.EQUALS:
		return "equals";
	case Token.SELECT:
		return "select";
	case Token.GROUP:
		return "group";
	case Token.BY:
		return "by";
	case Token.LET:
		return "let";
	case Token.ORDERBY:
		return "orderby";
	case Token.ASCENDING:
		return "ascending";
	case Token.DESCENDING:
		return "descending";
	case Token.INTO:
		return "into";
	case Token.GET:
		return "get";
	case Token.SET:
		return "set";
	case Token.OPEN_BRACE:
		return "{";
	case Token.CLOSE_BRACE:
		return "}";
	case Token.OPEN_BRACKET:
	case Token.OPEN_BRACKET_EXPR:
		return "[";
	case Token.CLOSE_BRACKET:
		return "]";
	case Token.OPEN_PARENS_CAST:
	case Token.OPEN_PARENS_LAMBDA:
	case Token.OPEN_PARENS:
		return "(";
	case Token.CLOSE_PARENS:
		return ")";
	case Token.DOT:
		return ".";
	case Token.COMMA:
		return ",";
	case Token.DEFAULT_COLON:
		return "default:";
	case Token.COLON:
		return ":";
	case Token.SEMICOLON:
		return ";";
	case Token.TILDE:
		return "~";
		
	case Token.PLUS:
	case Token.UMINUS:
	case Token.MINUS:
	case Token.BANG:
	case Token.OP_LT:
	case Token.OP_GT:
	case Token.BITWISE_AND:
	case Token.BITWISE_OR:
	case Token.STAR:
	case Token.PERCENT:
	case Token.DIV:
	case Token.CARRET:
	case Token.OP_INC:
	case Token.OP_DEC:
	case Token.OP_SHIFT_LEFT:
	case Token.OP_SHIFT_RIGHT:
	case Token.OP_LE:
	case Token.OP_GE:
	case Token.OP_EQ:
	case Token.OP_NE:
	case Token.OP_AND:
	case Token.OP_OR:
	case Token.OP_PTR:
	case Token.OP_COALESCING:	
	case Token.OP_MULT_ASSIGN:
	case Token.OP_DIV_ASSIGN:
	case Token.OP_MOD_ASSIGN:
	case Token.OP_ADD_ASSIGN:
	case Token.OP_SUB_ASSIGN:
	case Token.OP_SHIFT_LEFT_ASSIGN:
	case Token.OP_SHIFT_RIGHT_ASSIGN:
	case Token.OP_AND_ASSIGN:
	case Token.OP_XOR_ASSIGN:
	case Token.OP_OR_ASSIGN:
		return "<operator>";

	case Token.BOOL:
	case Token.BYTE:
	case Token.CHAR:
	case Token.VOID:
	case Token.DECIMAL:
	case Token.DOUBLE:
	case Token.FLOAT:
	case Token.INT:
	case Token.LONG:
	case Token.SBYTE:
	case Token.SHORT:
	case Token.STRING:
	case Token.UINT:
	case Token.ULONG:
	case Token.USHORT:
	case Token.OBJECT:
		return "type";
	
	case Token.ASSIGN:
		return "=";
	case Token.OP_GENERICS_LT:
	case Token.GENERIC_DIMENSION:
		return "<";
	case Token.OP_GENERICS_GT:
		return ">";
	case Token.INTERR:
	case Token.INTERR_NULLABLE:
		return "?";
	case Token.DOUBLE_COLON:
		return "::";
	case Token.LITERAL:
		return "value";
	case Token.IDENTIFIER:
		return "identifier";

		// All of these are internal.
	case Token.NONE:
	case Token.ERROR:
	case Token.FIRST_KEYWORD:
	case Token.EOF:
	case Token.EVAL_COMPILATION_UNIT_PARSER:
	case Token.EVAL_USING_DECLARATIONS_UNIT_PARSER:
	case Token.EVAL_STATEMENT_PARSER:
	case Token.LAST_KEYWORD:
	case Token.GENERATE_COMPLETION:
	case Token.COMPLETE_COMPLETION:
		return "<internal>";

		// A bit more robust.
	default:
		return yyNames [token];
        }
}

/* end end end */
}
#line default
namespace yydebug {
        using System;
	 internal interface yyDebug {
		 void push (int state, Object value);
		 void lex (int state, int token, string name, Object value);
		 void shift (int from, int to, int errorFlag);
		 void pop (int state);
		 void discard (int state, int token, string name, Object value);
		 void reduce (int from, int to, int rule, string text, int len);
		 void shift (int from, int to);
		 void accept (Object value);
		 void error (string message);
		 void reject ();
	 }
	 
	 class yyDebugSimple : yyDebug {
		 void println (string s){
			 Console.Error.WriteLine (s);
		 }
		 
		 public void push (int state, Object value) {
			 println ("push\tstate "+state+"\tvalue "+value);
		 }
		 
		 public void lex (int state, int token, string name, Object value) {
			 println("lex\tstate "+state+"\treading "+name+"\tvalue "+value);
		 }
		 
		 public void shift (int from, int to, int errorFlag) {
			 switch (errorFlag) {
			 default:				// normally
				 println("shift\tfrom state "+from+" to "+to);
				 break;
			 case 0: case 1: case 2:		// in error recovery
				 println("shift\tfrom state "+from+" to "+to
					     +"\t"+errorFlag+" left to recover");
				 break;
			 case 3:				// normally
				 println("shift\tfrom state "+from+" to "+to+"\ton error");
				 break;
			 }
		 }
		 
		 public void pop (int state) {
			 println("pop\tstate "+state+"\ton error");
		 }
		 
		 public void discard (int state, int token, string name, Object value) {
			 println("discard\tstate "+state+"\ttoken "+name+"\tvalue "+value);
		 }
		 
		 public void reduce (int from, int to, int rule, string text, int len) {
			 println("reduce\tstate "+from+"\tuncover "+to
				     +"\trule ("+rule+") "+text);
		 }
		 
		 public void shift (int from, int to) {
			 println("goto\tfrom state "+from+" to "+to);
		 }
		 
		 public void accept (Object value) {
			 println("accept\tvalue "+value);
		 }
		 
		 public void error (string message) {
			 println("error\t"+message);
		 }
		 
		 public void reject () {
			 println("reject");
		 }
		 
	 }
}
// %token constants
 class Token {
  public const int EOF = 257;
  public const int NONE = 258;
  public const int ERROR = 259;
  public const int FIRST_KEYWORD = 260;
  public const int ABSTRACT = 261;
  public const int AS = 262;
  public const int ADD = 263;
  public const int BASE = 264;
  public const int BOOL = 265;
  public const int BREAK = 266;
  public const int BYTE = 267;
  public const int CASE = 268;
  public const int CATCH = 269;
  public const int CHAR = 270;
  public const int CHECKED = 271;
  public const int CLASS = 272;
  public const int CONST = 273;
  public const int CONTINUE = 274;
  public const int DECIMAL = 275;
  public const int DEFAULT = 276;
  public const int DELEGATE = 277;
  public const int DO = 278;
  public const int DOUBLE = 279;
  public const int ELSE = 280;
  public const int ENUM = 281;
  public const int EVENT = 282;
  public const int EXPLICIT = 283;
  public const int EXTERN = 284;
  public const int FALSE = 285;
  public const int FINALLY = 286;
  public const int FIXED = 287;
  public const int FLOAT = 288;
  public const int FOR = 289;
  public const int FOREACH = 290;
  public const int GOTO = 291;
  public const int IF = 292;
  public const int IMPLICIT = 293;
  public const int IN = 294;
  public const int INT = 295;
  public const int INTERFACE = 296;
  public const int INTERNAL = 297;
  public const int IS = 298;
  public const int LOCK = 299;
  public const int LONG = 300;
  public const int NAMESPACE = 301;
  public const int NEW = 302;
  public const int NULL = 303;
  public const int OBJECT = 304;
  public const int OPERATOR = 305;
  public const int OUT = 306;
  public const int OVERRIDE = 307;
  public const int PARAMS = 308;
  public const int PRIVATE = 309;
  public const int PROTECTED = 310;
  public const int PUBLIC = 311;
  public const int READONLY = 312;
  public const int REF = 313;
  public const int RETURN = 314;
  public const int REMOVE = 315;
  public const int SBYTE = 316;
  public const int SEALED = 317;
  public const int SHORT = 318;
  public const int SIZEOF = 319;
  public const int STACKALLOC = 320;
  public const int STATIC = 321;
  public const int STRING = 322;
  public const int STRUCT = 323;
  public const int SWITCH = 324;
  public const int THIS = 325;
  public const int THROW = 326;
  public const int TRUE = 327;
  public const int TRY = 328;
  public const int TYPEOF = 329;
  public const int UINT = 330;
  public const int ULONG = 331;
  public const int UNCHECKED = 332;
  public const int UNSAFE = 333;
  public const int USHORT = 334;
  public const int USING = 335;
  public const int VIRTUAL = 336;
  public const int VOID = 337;
  public const int VOLATILE = 338;
  public const int WHERE = 339;
  public const int WHILE = 340;
  public const int ARGLIST = 341;
  public const int PARTIAL = 342;
  public const int ARROW = 343;
  public const int FROM = 344;
  public const int FROM_FIRST = 345;
  public const int JOIN = 346;
  public const int ON = 347;
  public const int EQUALS = 348;
  public const int SELECT = 349;
  public const int GROUP = 350;
  public const int BY = 351;
  public const int LET = 352;
  public const int ORDERBY = 353;
  public const int ASCENDING = 354;
  public const int DESCENDING = 355;
  public const int INTO = 356;
  public const int INTERR_NULLABLE = 357;
  public const int EXTERN_ALIAS = 358;
  public const int OP_GENERICS_LT = 359;
  public const int OP_GENERICS_LT_DECL = 360;
  public const int OP_GENERICS_GT = 361;
  public const int GET = 362;
  public const int SET = 363;
  public const int LAST_KEYWORD = 364;
  public const int OPEN_BRACE = 365;
  public const int CLOSE_BRACE = 366;
  public const int OPEN_BRACKET = 367;
  public const int CLOSE_BRACKET = 368;
  public const int OPEN_PARENS = 369;
  public const int CLOSE_PARENS = 370;
  public const int DOT = 371;
  public const int COMMA = 372;
  public const int COLON = 373;
  public const int SEMICOLON = 374;
  public const int TILDE = 375;
  public const int PLUS = 376;
  public const int MINUS = 377;
  public const int BANG = 378;
  public const int ASSIGN = 379;
  public const int OP_LT = 380;
  public const int OP_GT = 381;
  public const int BITWISE_AND = 382;
  public const int BITWISE_OR = 383;
  public const int STAR = 384;
  public const int PERCENT = 385;
  public const int DIV = 386;
  public const int CARRET = 387;
  public const int INTERR = 388;
  public const int DOUBLE_COLON = 389;
  public const int OP_INC = 390;
  public const int OP_DEC = 391;
  public const int OP_SHIFT_LEFT = 392;
  public const int OP_SHIFT_RIGHT = 393;
  public const int OP_LE = 394;
  public const int OP_GE = 395;
  public const int OP_EQ = 396;
  public const int OP_NE = 397;
  public const int OP_AND = 398;
  public const int OP_OR = 399;
  public const int OP_MULT_ASSIGN = 400;
  public const int OP_DIV_ASSIGN = 401;
  public const int OP_MOD_ASSIGN = 402;
  public const int OP_ADD_ASSIGN = 403;
  public const int OP_SUB_ASSIGN = 404;
  public const int OP_SHIFT_LEFT_ASSIGN = 405;
  public const int OP_SHIFT_RIGHT_ASSIGN = 406;
  public const int OP_AND_ASSIGN = 407;
  public const int OP_XOR_ASSIGN = 408;
  public const int OP_OR_ASSIGN = 409;
  public const int OP_PTR = 410;
  public const int OP_COALESCING = 411;
  public const int LITERAL = 412;
  public const int IDENTIFIER = 413;
  public const int OPEN_PARENS_LAMBDA = 414;
  public const int OPEN_PARENS_CAST = 415;
  public const int GENERIC_DIMENSION = 416;
  public const int DEFAULT_COLON = 417;
  public const int OPEN_BRACKET_EXPR = 418;
  public const int EVAL_STATEMENT_PARSER = 419;
  public const int EVAL_COMPILATION_UNIT_PARSER = 420;
  public const int EVAL_USING_DECLARATIONS_UNIT_PARSER = 421;
  public const int GENERATE_COMPLETION = 422;
  public const int COMPLETE_COMPLETION = 423;
  public const int UMINUS = 424;
  public const int yyErrorCode = 256;
 }
 namespace yyParser {
  using System;
  /** thrown for irrecoverable syntax errors and stack overflow.
    */
  internal class yyException : System.Exception {
    public yyException (string message) : base (message) {
    }
  }
  internal class yyUnexpectedEof : yyException {
    public yyUnexpectedEof (string message) : base (message) {
    }
    public yyUnexpectedEof () : base ("") {
    }
  }

  /** must be implemented by a scanner object to supply input to the parser.
    */
  internal interface yyInput {
    /** move on to next token.
        @return false if positioned beyond tokens.
        @throws IOException on input error.
      */
    bool advance (); // throws java.io.IOException;
    /** classifies current token.
        Should not be called if advance() returned false.
        @return current %token or single character.
      */
    int token ();
    /** associated with current token.
        Should not be called if advance() returned false.
        @return value for token().
      */
    Object value ();
  }
 }
} // close outermost namespace, that MUST HAVE BEEN opened in the prolog
