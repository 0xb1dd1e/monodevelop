<CodeStyle version="1.0" mimeType="text/x-csharp">

	<Type name = "BraceStyle">
		<Value>EndOfLine</Value>
		<Value>NextLine</Value>
		<Value>NextLineShifted</Value>
	</Type>
	
	<Example name = "event"><![CDATA[
	class ClassDeclaration { 
		EventHandler<EventArgs> onAction;
		public event EventHandler<EventArgs> Action {
			add { onAction = (EventHandler<EventArgs>)Delegate.Combine(onAction, value); }
			remove { onAction = (EventHandler<EventArgs>)Delegate.Remove(onAction, value);}
		}
		EventHandler<EventArgs> onAnotherAction;
		public event EventHandler<EventArgs> AnotherAction {
			add { if (value != null) 
					onAnotherAction = (EventHandler<EventArgs>)Delegate.Combine(onAnotherAction, value); }
			remove { if (value != null) 
					onAnotherAction = (EventHandler<EventArgs>)Delegate.Remove(onAnotherAction, value);}
		}
	}
]]></Example>
	
	<Example name = "property"><![CDATA[
	class ClassDeclaration { 
		int myProperty;
		int MyProperty { 
			get { return myProperty;} 
			set { myProperty = value;} 
		}
		
		int myOtherProperty;
		int MyOtherProperty { 
			get { 
				Console.WriteLine ("get myOtherProperty");
				return myOtherProperty;
			} 
			set { 
				if (myOtherProperty != value)
					myOtherProperty = value;
			} 
		}
	}
]]></Example>
<Example name = "methodSpaceExample"><![CDATA[
	class ClassDeclaration { 
		public void TestMethod ()
		{
			Console.WriteLine ("Hello World!");
		}
	}
]]></Example>

<Example name = "spaceExample"><![CDATA[
	class ClassDeclaration { 
		public void TestMethod ()
		{
			try {
				TestMethod ("");
			} catch (Exception e) {
				// Do something
			} finally {
				// Do something
			}
		}
		
		public void TestMethod (string test)
		{
			lock (this) {
				switch (test) {
					case "A": {
						Console.WriteLine ("was A");
						break;
					}
					case "B":
						Console.WriteLine ("was B");
						break;
				}
			}
		}
		
		public void Calculate (int a, int b)
		{
			if (a < b) {
				for (int i = a; i < b; i++) {
					
				}
			} else {
				using (object o = new object ()) {
					while (b < a) {
						
					}
				}
			}
		}
	}
		
]]></Example>

<Example name = "operatorExample"><![CDATA[
	class ClassDeclaration { 
		public void TestMethod ()
		{
			int a = 5 << 5;
			int b = (a + 5 - 3) * 6 / 2;
			a += b;
			a = a & ~255;
			if (a == b || b < a >> 1) {
				b -= a;
			}
		}
	}
]]></Example>

<Example name = "condOpExample"><![CDATA[
	class ClassDeclaration { 
		public string GetSign (int i)
		{
			return i < 0 ? "-" : "+";
		}
	}
]]></Example>

<Example name = "switchExample"><![CDATA[
	class ClassDeclaration { 
		public void Test (int i)
		{
			switch (i) {
				case 0:
					Console.WriteLine ("was zero");
					break;
				case 1:
					Console.WriteLine ("was one");
					break;
				default:
					Console.WriteLine ("was " + i);
					break;
			}
		}
	}
]]></Example>

	<Category name ="Indentation" _displayName="Indentation">
		<Category name = "Declarations" _displayName="Declarations">
			<Option name="IndentNamespaceBody" _displayName="within namespaces" type="Bool"><Example><![CDATA[namespace Test { class AClass {} }]]></Example></Option>
			<Option name="IndentClassBody" _displayName="within classes" type="Bool"><Example><![CDATA[class AClass { int aField; void AMethod () {}}]]></Example></Option>
			<Option name="IndentInterfaceBody" _displayName="within interfaces" type="Bool"><Example><![CDATA[interface IAInterfaces { int AProperty {get;set;} void AMethod ();}]]></Example></Option>
			<Option name="IndentStructBody" _displayName="within structs" type="Bool"><Example><![CDATA[struct AStruct { int aField; void AMethod () {}}]]></Example></Option>
			<Option name="IndentEnumBody" _displayName="within enums" type="Bool"><Example><![CDATA[enum AEnum { A, B, C }]]></Example></Option>
			<Option name="IndentMethodBody" _displayName="within methods" type="Bool" example="methodSpaceExample"/>
			<Option name="IndentPropertyBody" _displayName="within properties" type="Bool" example="property"/>
			<Option name="IndentEventBody" _displayName="within events" type="Bool" example="event"/>
		</Category>
		
		<Category name = "Statements" _displayName="Statements">
			<Option name="IndentBlocks" _displayName="within blocks" type="Bool" example="spaceExample"/>
			<Option name="IndentSwitchBody" _displayName="Indent 'switch' body" type="Bool" example="switchExample"/>
			<Option name="IndentCaseBody" _displayName="Indent 'case' body" type="Bool" example="switchExample"/>
			<Option name="IndentBreakStatements" _displayName="Indent 'break' statements" type="Bool" example="switchExample"/>
		</Category>
	</Category>
	
	<Category name ="Braces" _displayName="Braces">
		<Category name = "Declarations" _displayName="Declarations">
			<Option name="NamespaceBraceStyle" _displayName="Namespace declaration" type="BraceStyle"><Example>namespace TestNameSpace {}</Example></Option>
			<Option name="ClassBraceStyle" _displayName="Class declaration" type="BraceStyle"><Example>class ClassDeclaration {}</Example></Option>
			<Option name="InterfaceBraceStyle" _displayName="Interface declaration" type="BraceStyle"><Example><![CDATA[interface InterfaceDeclaraction {}]]></Example></Option>
			<Option name="StructBraceStyle" _displayName="Struct declaration" type="BraceStyle"><Example><![CDATA[struct StructDeclaration {}]]></Example></Option>
			<Option name="EnumBraceStyle" _displayName="Enum declaration" type="BraceStyle"><Example><![CDATA[enum EnumDeclaration { A, B, C}]]></Example></Option>
			<Option name="ConstructorBraceStyle" _displayName="Constructor declaration" type="BraceStyle"><Example><![CDATA[class ClassDeclaration { public ClassDeclaration () {} }]]></Example></Option>
			<Option name="DestructorBraceStyle" _displayName="Destructor declaration" type="BraceStyle"><Example><![CDATA[class ClassDeclaration { ~ClassDeclaration () {} }]]></Example></Option>
			<Option name="MethodBraceStyle" _displayName="Method declaration" type="BraceStyle"><Example><![CDATA[class ClassDeclaration { void MyMethod () {} }]]></Example></Option>
			
			<Option name="PropertyBraceStyle" _displayName="Property declaration" type="BraceStyle" example="property"/>
			<Option name="PropertyGetBraceStyle" _displayName="Get declaration" type="BraceStyle" example="property"/>
			<Option name="AllowPropertyGetBlockInline" _displayName="Allow one line get" type="Bool" example="property"/>
			<Option name="PropertySetBraceStyle" _displayName="Set declaration" type="BraceStyle" example="property"/>
			<Option name="AllowPropertySetBlockInline" _displayName="Allow one line set" type="Bool" example="property"/>
			
			<Option name="EventBraceStyle" _displayName="Event declaration" type="BraceStyle" example="event"/>
			<Option name="EventAddBraceStyle" _displayName="Add declaration" type="BraceStyle" example="event"/>
			<Option name="AllowEventAddBlockInline" _displayName="Allow one line add" type="Bool" example="event"/>
			<Option name="EventRemoveBraceStyle" _displayName="Remove declaration" type="BraceStyle" example="event"/>
			<Option name="AllowEventRemoveBlockInline" _displayName="Allow one line remove" type="Bool" example="event"/>
		</Category>
		
		<Category name = "Blocks" _displayName="Blocks">
			<Option name="StatementBraceStyle" _displayName="Statements" type="BraceStyle"/>
		</Category>
		
		<Category name = "NewLines"  _displayName="New Lines">
			<Option name="InEmptyClassBody" _displayName="in empty class body" type="Bool"/>
			<Option name="InEmptyAnonymousClassBody" _displayName="in empty anonymous class body" type="Bool"/>
			<Option name="InEmptyInterfaceBody" _displayName="in empty interface body" type="Bool"/>
			<Option name="InEmptyStructBody" _displayName="in empty struct body" type="Bool"/>
			<Option name="InEmptyEnumBody" _displayName="in empty enum body" type="Bool"/>
			
			<Option name="InEmptyMethodBody" _displayName="in empty method body" type="Bool"/>
			<Option name="InEmptyAnonymousMethodBody" _displayName="in empty anonymous method body" type="Bool"/>
			<Option name="InEmptyBlock" _displayName="in empty block" type="Bool"/>
			
			<Option name="AtEndOfFile" _displayName="at end of file" type="Bool"/>
			
			<Category name = "ArrayInitializers"  _displayName="Array initializers">
				<Option name="AfterOpeningBrace" _displayName="after opening brace" type="Bool"/>
				<Option name="BeforeClosingBrace" _displayName="before closing brace" type="Bool"/>
			</Category>
		</Category>
	</Category>
	
	<Category name = "Spaces" _displayName="Spaces">
		<Category name = "BeforeParentheses" _displayName="Before Parentheses">
			<Option name="BeforeMethodCallParentheses" _displayName="Method call" type="Bool" example ="methodSpaceExample"/>
			<Option name="BeforeMethodDeclarationParentheses" _displayName="Method declaration" type="Bool" example ="methodSpaceExample"/>
			<Option name="IfParentheses" _displayName="if statement" type="Bool"><Example><![CDATA[
class ClassDeclaration { 
		public void Test ()
		{
			if (true) {
				Console.WriteLine ("Hello World!");
			}
		}
	}
]]></Example>
</Option>
			<Option name="WhileParentheses" _displayName="while statement" type="Bool"><Example><![CDATA[
class ClassDeclaration { 
		public void Test ()
		{
			while (true) {
				Console.WriteLine ("Hello World!");
			}
		}
	}
]]></Example>
</Option>
			<Option name="ForParentheses" _displayName="for statement" type="Bool"><Example><![CDATA[
class ClassDeclaration { 
		public void Test ()
		{
			for (int i = 0; i < 10; i++) {
				Console.WriteLine ("Hello World!");
			}
		}
	}
]]></Example>
</Option>
			<Option name="ForeachParentheses" _displayName="foreach statement" type="Bool"><Example><![CDATA[
class ClassDeclaration : ArrayList { 
		public void Test ()
		{
			foreach (object o in this) {
				Console.WriteLine ("Hello World!");
			}
		}
	}
]]></Example>
</Option>


			<Option name="CatchParentheses" _displayName="catch statement" type="Bool"><Example><![CDATA[
class ClassDeclaration { 
		public void Test ()
		{
			try {
				Console.WriteLine ("Hello World!");
			} catch (Exception) {
			}
		}
	}
]]></Example>
</Option>
			<Option name="SwitchParentheses" _displayName="switch statement" type="Bool"><Example><![CDATA[
class ClassDeclaration { 
		public void Test (string a)
		{
			switch (a) {
			case "silent":
			break;
			default:
				Console.WriteLine ("Hello World!");
				break;
			}
		}
	}
]]></Example>
</Option>
			<Option name="LockParentheses" _displayName="lock statement" type="Bool"><Example><![CDATA[
class ClassDeclaration { 
		public void Test ()
		{
			lock (this) {
				Console.WriteLine ("Hello World!");
			}
		}
	}
]]></Example>
</Option>
			<Option name="UsingParentheses" _displayName="using statement" type="Bool"><Example><![CDATA[
class ClassDeclaration { 
		public void Test ()
		{
			using (object o = new object ()) {
				Console.WriteLine ("Hello World!");
			}
		}
	}
]]></Example>
</Option>
		</Category>
		
		<Category name = "Operators" _displayName="Operators">
			<Option name="AroundAdditiveOperatorParentheses" _displayName="around additive (+,-) operators" type="Bool" example="operatorExample"/>
			<Option name="AroundAssignmentParentheses" _displayName="around assignment (=)" type="Bool" example="operatorExample"/>
			<Option name="AroundBitwiseOperatorParentheses" _displayName="around bitwise (&amp;,|,^) operators" type="Bool" example="operatorExample"/>
			<Option name="AroundLogicalOperatorParentheses" _displayName="around logical (&amp;&amp;,||) operators" type="Bool" example="operatorExample"/>
			<Option name="AroundMultiplicativeOperatorParentheses" _displayName="around multiplicative (*,/,%) operators" type="Bool" example="operatorExample"/>
			<Option name="AroundRelationalOperatorParentheses" _displayName="around relational (==,&lt;=,...) operators" type="Bool" example="operatorExample"/>
			<Option name="AroundShiftOperatorParentheses" _displayName="around shift (&lt;&lt;,&gt;&gt;) operators" type="Bool" example="operatorExample"/>
			
<!--			<Category name = "ConditionalOperator" _displayName="ConditionalOperator">-->
				<Option name="ConditionalOperatorBeforeConditionSpace" _displayName="before condition" type="Bool" example="condOpExample"/>
				<Option name="ConditionalOperatorAfterConditionSpace" _displayName="after condition" type="Bool" example="condOpExample"/>
				<Option name="ConditionalOperatorBeforeSeparatorSpace" _displayName="before separator" type="Bool" example="condOpExample"/>
				<Option name="ConditionalOperatorAfterSeparatorSpace" _displayName="after separator" type="Bool" example="condOpExample"/>
<!--			</Category>-->
			
		</Category>
	</Category>
</CodeStyle>