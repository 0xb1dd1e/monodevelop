// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 2.0.50727.42
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------

namespace Stetic.SteticGenerated {
    
    
    internal class MonoDevelopWebReferencesDialogsWebReferenceDialog {
        
        public static void Build(Gtk.Dialog cobj) {
            System.Collections.Hashtable bindings = new System.Collections.Hashtable();
            // Widget MonoDevelop.WebReferences.Dialogs.WebReferenceDialog
            Gtk.UIManager w1 = new Gtk.UIManager();
            Gtk.ActionGroup w2 = new Gtk.ActionGroup("Default");
            Gtk.Action w3 = new Gtk.Action("btnBack", null, Mono.Unix.Catalog.GetString("Go back one page"), "gtk-go-back");
            bindings["btnBack"] = w3;
            w2.Add(w3, null);
            Gtk.Action w4 = new Gtk.Action("btnNext", null, Mono.Unix.Catalog.GetString("Go forward one page"), "gtk-go-forward");
            bindings["btnNext"] = w4;
            w2.Add(w4, null);
            Gtk.Action w5 = new Gtk.Action("btnRefresh", null, Mono.Unix.Catalog.GetString("Reload current page"), "gtk-refresh");
            bindings["btnRefresh"] = w5;
            w2.Add(w5, null);
            Gtk.Action w6 = new Gtk.Action("btnStop", null, Mono.Unix.Catalog.GetString("Stop loading this page"), "gtk-stop");
            bindings["btnStop"] = w6;
            w2.Add(w6, null);
            Gtk.Action w7 = new Gtk.Action("btnHome", null, Mono.Unix.Catalog.GetString("Go back to the home page"), "gtk-home");
            bindings["btnHome"] = w7;
            w2.Add(w7, null);
            w1.InsertActionGroup(w2, 0);
            cobj.AddAccelGroup(w1.AccelGroup);
            cobj.Events = ((Gdk.EventMask)(256));
            cobj.Name = "MonoDevelop.WebReferences.Dialogs.WebReferenceDialog";
            cobj.Title = Mono.Unix.Catalog.GetString("Add Web Reference");
            cobj.Icon = Gdk.Pixbuf.LoadFromResource("WebReference.Service.png");
            cobj.WindowPosition = ((Gtk.WindowPosition)(4));
            cobj.HasSeparator = false;
            // Internal child MonoDevelop.WebReferences.Dialogs.WebReferenceDialog.VBox
            Gtk.VBox w8 = cobj.VBox;
            w8.Events = ((Gdk.EventMask)(256));
            w8.Name = "dlgWindow";
            w8.BorderWidth = ((uint)(2));
            // Container child dlgWindow.Gtk.Box+BoxChild
            Gtk.VBox w9 = new Gtk.VBox();
            bindings["vbxContainer"] = w9;
            w9.Name = "vbxContainer";
            // Container child vbxContainer.Gtk.Box+BoxChild
            w1.AddUiFromString("<ui><toolbar name='tlbNavigate'><toolitem action='btnBack'/><toolitem action='btnNext'/><toolitem action='btnRefresh'/><toolitem action='btnStop'/><toolitem action='btnHome'/></toolbar></ui>");
            Gtk.Toolbar w10 = ((Gtk.Toolbar)(w1.GetWidget("/tlbNavigate")));
            bindings["tlbNavigate"] = w10;
            w10.Name = "tlbNavigate";
            w10.ShowArrow = false;
            w10.ToolbarStyle = ((Gtk.ToolbarStyle)(0));
            w10.IconSize = ((Gtk.IconSize)(2));
            w9.Add(w10);
            Gtk.Box.BoxChild w11 = ((Gtk.Box.BoxChild)(w9[w10]));
            w11.Position = 0;
            w11.Expand = false;
            w11.Fill = false;
            // Container child vbxContainer.Gtk.Box+BoxChild
            Gtk.Table w12 = new Gtk.Table(((uint)(1)), ((uint)(3)), false);
            bindings["tblWebReferenceUrl"] = w12;
            w12.Name = "tblWebReferenceUrl";
            w12.RowSpacing = ((uint)(6));
            w12.ColumnSpacing = ((uint)(6));
            // Container child tblWebReferenceUrl.Gtk.Table+TableChild
            Gtk.Button w13 = new Gtk.Button();
            bindings["btnGO"] = w13;
            w13.CanFocus = true;
            w13.Name = "btnGO";
            w13.UseStock = true;
            w13.UseUnderline = true;
            w13.Label = "gtk-jump-to";
            w12.Add(w13);
            Gtk.Table.TableChild w14 = ((Gtk.Table.TableChild)(w12[w13]));
            w14.LeftAttach = ((uint)(2));
            w14.RightAttach = ((uint)(3));
            w14.XPadding = ((uint)(4));
            w14.YPadding = ((uint)(4));
            w14.XOptions = ((Gtk.AttachOptions)(0));
            w14.YOptions = ((Gtk.AttachOptions)(4));
            // Container child tblWebReferenceUrl.Gtk.Table+TableChild
            Gtk.Label w15 = new Gtk.Label();
            bindings["lblWebServiceUrl"] = w15;
            w15.Name = "lblWebServiceUrl";
            w15.Xalign = 0F;
            w15.LabelProp = Mono.Unix.Catalog.GetString("Web Service Url: ");
            w12.Add(w15);
            Gtk.Table.TableChild w16 = ((Gtk.Table.TableChild)(w12[w15]));
            w16.XPadding = ((uint)(4));
            w16.YPadding = ((uint)(4));
            w16.XOptions = ((Gtk.AttachOptions)(4));
            w16.YOptions = ((Gtk.AttachOptions)(4));
            // Container child tblWebReferenceUrl.Gtk.Table+TableChild
            Gtk.Entry w17 = new Gtk.Entry();
            bindings["tbxReferenceURL"] = w17;
            w17.CanFocus = true;
            w17.Name = "tbxReferenceURL";
            w17.IsEditable = true;
            w17.InvisibleChar = '●';
            w12.Add(w17);
            Gtk.Table.TableChild w18 = ((Gtk.Table.TableChild)(w12[w17]));
            w18.LeftAttach = ((uint)(1));
            w18.RightAttach = ((uint)(2));
            w18.YOptions = ((Gtk.AttachOptions)(4));
            w9.Add(w12);
            Gtk.Box.BoxChild w19 = ((Gtk.Box.BoxChild)(w9[w12]));
            w19.Position = 1;
            w19.Expand = false;
            w19.Fill = false;
            // Container child vbxContainer.Gtk.Box+BoxChild
            Gtk.Frame w20 = new Gtk.Frame();
            bindings["frmBrowser"] = w20;
            w20.Name = "frmBrowser";
            w20.ShadowType = ((Gtk.ShadowType)(0));
            w20.LabelYalign = 0F;
            w9.Add(w20);
            Gtk.Box.BoxChild w21 = ((Gtk.Box.BoxChild)(w9[w20]));
            w21.Position = 2;
            // Container child vbxContainer.Gtk.Box+BoxChild
            Gtk.Table w22 = new Gtk.Table(((uint)(2)), ((uint)(2)), false);
            bindings["tblReferenceName"] = w22;
            w22.Name = "tblReferenceName";
            w22.RowSpacing = ((uint)(4));
            w22.ColumnSpacing = ((uint)(4));
            w22.BorderWidth = ((uint)(9));
            // Container child tblReferenceName.Gtk.Table+TableChild
            Gtk.Label w23 = new Gtk.Label();
            bindings["lblNamespace"] = w23;
            w23.Name = "lblNamespace";
            w23.Xalign = 0F;
            w23.LabelProp = Mono.Unix.Catalog.GetString("Namespace: ");
            w22.Add(w23);
            Gtk.Table.TableChild w24 = ((Gtk.Table.TableChild)(w22[w23]));
            w24.TopAttach = ((uint)(1));
            w24.BottomAttach = ((uint)(2));
            w24.XOptions = ((Gtk.AttachOptions)(4));
            w24.YOptions = ((Gtk.AttachOptions)(4));
            // Container child tblReferenceName.Gtk.Table+TableChild
            Gtk.Label w25 = new Gtk.Label();
            bindings["lblReference"] = w25;
            w25.Name = "lblReference";
            w25.Xalign = 0F;
            w25.LabelProp = Mono.Unix.Catalog.GetString("Reference: ");
            w22.Add(w25);
            Gtk.Table.TableChild w26 = ((Gtk.Table.TableChild)(w22[w25]));
            w26.XOptions = ((Gtk.AttachOptions)(4));
            w26.YOptions = ((Gtk.AttachOptions)(4));
            // Container child tblReferenceName.Gtk.Table+TableChild
            Gtk.Entry w27 = new Gtk.Entry();
            bindings["tbxNamespace"] = w27;
            w27.Sensitive = false;
            w27.CanFocus = true;
            w27.Name = "tbxNamespace";
            w27.IsEditable = true;
            w27.InvisibleChar = '●';
            w22.Add(w27);
            Gtk.Table.TableChild w28 = ((Gtk.Table.TableChild)(w22[w27]));
            w28.TopAttach = ((uint)(1));
            w28.BottomAttach = ((uint)(2));
            w28.LeftAttach = ((uint)(1));
            w28.RightAttach = ((uint)(2));
            w28.YOptions = ((Gtk.AttachOptions)(4));
            // Container child tblReferenceName.Gtk.Table+TableChild
            Gtk.Entry w29 = new Gtk.Entry();
            bindings["tbxReferenceName"] = w29;
            w29.CanFocus = true;
            w29.Name = "tbxReferenceName";
            w29.IsEditable = true;
            w29.InvisibleChar = '●';
            w22.Add(w29);
            Gtk.Table.TableChild w30 = ((Gtk.Table.TableChild)(w22[w29]));
            w30.LeftAttach = ((uint)(1));
            w30.RightAttach = ((uint)(2));
            w30.YOptions = ((Gtk.AttachOptions)(4));
            w9.Add(w22);
            Gtk.Box.BoxChild w31 = ((Gtk.Box.BoxChild)(w9[w22]));
            w31.Position = 3;
            w31.Expand = false;
            w31.Fill = false;
            w8.Add(w9);
            Gtk.Box.BoxChild w32 = ((Gtk.Box.BoxChild)(w8[w9]));
            w32.Position = 0;
            // Internal child MonoDevelop.WebReferences.Dialogs.WebReferenceDialog.ActionArea
            Gtk.HButtonBox w33 = cobj.ActionArea;
            w33.Events = ((Gdk.EventMask)(256));
            w33.Name = "pnlActionArea";
            w33.Spacing = 10;
            w33.BorderWidth = ((uint)(5));
            w33.LayoutStyle = ((Gtk.ButtonBoxStyle)(4));
            // Container child pnlActionArea.Gtk.ButtonBox+ButtonBoxChild
            Gtk.Button w34 = new Gtk.Button();
            bindings["btnCancel"] = w34;
            w34.CanDefault = true;
            w34.CanFocus = true;
            w34.Name = "btnCancel";
            w34.UseStock = true;
            w34.UseUnderline = true;
            w34.Label = "gtk-cancel";
            cobj.AddActionWidget(w34, -6);
            Gtk.ButtonBox.ButtonBoxChild w35 = ((Gtk.ButtonBox.ButtonBoxChild)(w33[w34]));
            w35.Expand = false;
            w35.Fill = false;
            // Container child pnlActionArea.Gtk.ButtonBox+ButtonBoxChild
            Gtk.Button w36 = new Gtk.Button();
            bindings["btnOK"] = w36;
            w36.CanDefault = true;
            w36.CanFocus = true;
            w36.Name = "btnOK";
            w36.UseStock = true;
            w36.UseUnderline = true;
            w36.Label = "gtk-ok";
            cobj.AddActionWidget(w36, -5);
            Gtk.ButtonBox.ButtonBoxChild w37 = ((Gtk.ButtonBox.ButtonBoxChild)(w33[w36]));
            w37.Position = 1;
            w37.Expand = false;
            w37.Fill = false;
            if ((cobj.Child != null)) {
                cobj.Child.ShowAll();
            }
            cobj.DefaultWidth = 639;
            cobj.DefaultHeight = 472;
            cobj.Show();
            w3.Activated += ((System.EventHandler)(System.Delegate.CreateDelegate(typeof(System.EventHandler), cobj, "Browser_BackButtonClicked")));
            w4.Activated += ((System.EventHandler)(System.Delegate.CreateDelegate(typeof(System.EventHandler), cobj, "Browser_NextButtonClicked")));
            w5.Activated += ((System.EventHandler)(System.Delegate.CreateDelegate(typeof(System.EventHandler), cobj, "Browser_RefreshButtonClicked")));
            w6.Activated += ((System.EventHandler)(System.Delegate.CreateDelegate(typeof(System.EventHandler), cobj, "Browser_StopButtonClicked")));
            w7.Activated += ((System.EventHandler)(System.Delegate.CreateDelegate(typeof(System.EventHandler), cobj, "Browser_HomeButtonClicked")));
            w17.KeyReleaseEvent += ((Gtk.KeyReleaseEventHandler)(System.Delegate.CreateDelegate(typeof(Gtk.KeyReleaseEventHandler), cobj, "Browser_URLKeyReleased")));
            w13.Clicked += ((System.EventHandler)(System.Delegate.CreateDelegate(typeof(System.EventHandler), cobj, "Browser_GoButtonClicked")));
            System.Reflection.FieldInfo[] fields = cobj.GetType().GetFields(((System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.NonPublic) | System.Reflection.BindingFlags.Instance));
            for (int n = 0; (n < fields.Length); n = (n + 1)) {
                System.Reflection.FieldInfo field = fields[n];
                object widget = bindings[field.Name];
                if (((widget != null) && field.FieldType.IsInstanceOfType(widget))) {
                    field.SetValue(cobj, widget);
                }
            }
        }
    }
}
