AC_INIT([monodevelop], 0.18, [monodevelop-list@lists.ximian.com])
AC_PREREQ(2.53)
AM_INIT_AUTOMAKE([1.9 tar-ustar])
AM_MAINTAINER_MODE

AC_PROG_INTLTOOL([0.25])

ASSEMBLY_VERSION=0.18.0.0

AC_PATH_PROG(MONO, mono)
AC_PATH_PROG(MCS, gmcs)

if test "x$MONO" = "x" ; then
	AC_MSG_ERROR([Can't find "mono" in your PATH])
fi

if test "x$MCS" = "x" ; then
  AC_MSG_ERROR([Can't find "gmcs" in your PATH])
fi
AC_SUBST(PATH)
AC_SUBST(LD_LIBRARY_PATH)

dnl Add MD's mimetypes to mime and desktop databases
AC_ARG_ENABLE(update-mimedb,
   AC_HELP_STRING([--disable-update-mimedb],
                   [disable the update-mime-database after install [default=no]]),,
    enable_update_mimedb=yes)
 AM_CONDITIONAL(ENABLE_UPDATE_MIMEDB, test x$enable_update_mimedb = xyes)

if test "x$enable_update_mimedb" = "xyes"; then
  AC_PATH_PROG(UPDATE_MIME_DB, update-mime-database, no)
  if test "x$UPDATE_MIME_DB" = "xno"; then
    AC_MSG_ERROR([You need to install update-mime-database])
  fi
fi
AC_SUBST(UPDATE_MIME_DB)

AC_ARG_ENABLE(update-desktopdb,
   AC_HELP_STRING([--disable-update-desktopdb],
                  [disable the update-desktop-database after install [default=np]]),,
                  enable_update_desktopdb=yes)
   AM_CONDITIONAL(ENABLE_UPDATE_DESKTOPDB, test x$enable_update_desktopdb = xyes)

if test "x$enable_update_desktopdb" = "xyes"; then
  AC_PATH_PROG(UPDATE_DESKTOP_DB, update-desktop-database, no)
  if test "x$UPDATE_DESKTOP_DB" = "xno"; then
    AC_MSG_ERROR([You need to install update-desktop-database])
  fi
fi
AC_SUBST(UPDATE_DESKTOP_DB)

dnl Find pkg-config
AC_PATH_PROG(PKG_CONFIG, pkg-config, no)
if test "x$PKG_CONFIG" = "xno"; then
        AC_MSG_ERROR([You need to install pkg-config])
fi

MONO_REQUIRED_VERSION=1.1.10
PKG_CHECK_MODULES(UNMANAGED_DEPENDENCIES_MONO,mono >= $MONO_REQUIRED_VERSION, has_mono=true, has_mono=false)
PKG_CHECK_MODULES(UNMANAGED_DEPENDENCIES_MINT,mint >= $MONO_REQUIRED_VERSION, has_mint=true, has_mint=false)

if test "x$has_mono" = "xfalse"; then
  if test "x$has_mint" = "xfalse"; then
      AC_MSG_ERROR([Please install mono version $MONO_REQUIRED_VERSION or later to install MonoDevelop.
Please see http://www.mono-project.org/ to download latest mono sources or packages])
  fi
fi

if test "x$has_mono" = "xtrue"; then
    if test `uname -s` = "Darwin"; then
	AC_PATH_PROG(RUNTIME, mono, no)
	AC_PATH_PROG(CSC, gmcs, no)
	LIB_PREFIX=
	LIB_SUFFIX=.dylib
    else
	AC_PATH_PROG(RUNTIME, mono, no)
	AC_PATH_PROG(CSC, gmcs, no)
	LIB_PREFIX=.so
	LIB_SUFFIX=
    fi
else
    if test "x$has_mint" = "xtrue"; then
	AC_PATH_PROG(RUNTIME, mint, no)
	AC_PATH_PROG(CSC, gmcs, no)
	LIB_PREFIX=.so
	LIB_SUFFIX=
    fi
fi


dnl hard dependencies
MONOADDINS_REQUIRED_VERSION=0.3
GTKSHARP_REQUIRED_VERSION=2.8.0
GTKSOURCEVIEWSHARP_REQUIRED_VERSION=0.10
GTKSOURCEVIEW2SHARP_REQUIRED_VERSION=1.9.1
MONODOC_REQUIRED_VERSION=1.0

PKG_CHECK_MODULES(MONO_ADDINS, mono-addins >= $MONOADDINS_REQUIRED_VERSION)
AC_SUBST(MONO_ADDINS_LIBS)
PKG_CHECK_MODULES(MONO_ADDINS_SETUP, mono-addins-setup >= $MONOADDINS_REQUIRED_VERSION)
AC_SUBST(MONO_ADDINS_SETUP_LIBS)
PKG_CHECK_MODULES(MONO_ADDINS_GUI, mono-addins-gui >= $MONOADDINS_REQUIRED_VERSION)
AC_SUBST(MONO_ADDINS_GUI_LIBS)
PKG_CHECK_MODULES(GLIB_SHARP, glib-sharp-2.0 >= $GTKSHARP_REQUIRED_VERSION)
AC_SUBST(GLIB_SHARP_LIBS)
PKG_CHECK_MODULES(GTK_SHARP, gtk-sharp-2.0 >= $GTKSHARP_REQUIRED_VERSION)
AC_SUBST(GTK_SHARP_LIBS)
PKG_CHECK_MODULES(GLADE_SHARP, glade-sharp-2.0 >= $GTKSHARP_REQUIRED_VERSION)
AC_SUBST(GLADE_SHARP_LIBS)

PKG_CHECK_MODULES(MONODOC, monodoc >= $MONODOC_REQUIRED_VERSION)
AC_SUBST(MONODOC_LIBS)
PKG_CHECK_MODULES(MONO_CAIRO, mono-cairo >= 1.2)
AC_SUBST(MONO_CAIRO_LIBS)

dnl soft dependencies
PKG_CHECK_MODULES(GNOME_SHARP, gnome-sharp-2.0 >= $GTKSHARP_REQUIRED_VERSION, [gnome_sharp=yes], [gnome_sharp=no])
AC_SUBST(GNOME_SHARP_LIBS)
AM_CONDITIONAL(HAVE_GNOME_SHARP, test x$gnome_sharp = xyes)
PKG_CHECK_MODULES(GNOME_VFS_SHARP, gnome-vfs-sharp-2.0 >= $GTKSHARP_REQUIRED_VERSION, [gnome_vfs_sharp=yes], [gnome_vfs_sharp=no])
AC_SUBST(GNOME_VFS_SHARP_LIBS)
AM_CONDITIONAL(HAVE_GNOME_VFS_SHARP, test x$gnome_vfs_sharp = xyes)
PKG_CHECK_MODULES(GCONF_SHARP, gconf-sharp-2.0 >= $GTKSHARP_REQUIRED_VERSION, [gconf_sharp=yes], [gconf_sharp=no])
AC_SUBST(GCONF_SHARP_LIBS)
AM_CONDITIONAL(HAVE_GCONF_SHARP, test x$gconf_sharp = xyes)

gtksharp_prefix="`$PKG_CONFIG --variable=prefix gtk-sharp-2.0`"
AC_SUBST(gtksharp_prefix)

## gtksourceview2-sharp
AC_ARG_ENABLE(gtksourceview2,
	AC_HELP_STRING([--enable-gtksourceview2],
		[use GtkSourceView 2 [default=no]]),
	enable_gtksourceview2=${enableval}, enable_gtksourceview2=no)

if test "x$enable_gtksourceview2" = "xyes"; then
	PKG_CHECK_MODULES(GTKSOURCEVIEW2_SHARP, gtksourceview2-sharp >= $GTKSOURCEVIEW2SHARP_REQUIRED_VERSION)
	AC_SUBST(GTKSOURCEVIEW2_SHARP_LIBS)
else
	PKG_CHECK_MODULES(GTKSOURCEVIEW_SHARP, gtksourceview-sharp-2.0 >= $GTKSOURCEVIEWSHARP_REQUIRED_VERSION)
	AC_SUBST(GTKSOURCEVIEW_SHARP_LIBS)
fi

AM_CONDITIONAL(ENABLE_GTKSOURCEVIEW2, test x$enable_gtksourceview2 = xyes)


AC_ARG_ENABLE(monoextensions,
	AC_HELP_STRING([--enable-monoextensions],
		[enable extensions for Mono development [default=yes]]),
	enable_monoextensions=${enableval}, enable_monoextensions=yes)

AM_CONDITIONAL(ENABLE_MONOEXTENSIONS, test x$enable_monoextensions = xyes)

AC_ARG_ENABLE(versioncontrol,
	AC_HELP_STRING([--enable-versioncontrol],
		[enable version control support [default=yes]]),
		enable_versioncontrol=${enableval}, enable_versioncontrol=yes)

AM_CONDITIONAL(ENABLE_VERSIONCONTROL, test x$enable_versioncontrol = xyes)

AC_ARG_ENABLE(subversion,
	AC_HELP_STRING([--enable-subversion],
		[enable Subversion support [default=yes]]),
		enable_subversion=${enableval}, enable_subversion=${enable_versioncontrol})

if test x$enable_versioncontrol = xno && test x$enable_subversion = xyes; then
	AC_MSG_ERROR([Subversion addin cannot be built without Version Control addin])
fi

AM_CONDITIONAL(ENABLE_SUBVERSION, test x$enable_subversion = xyes)

platform_bindings=""

# Gnome platform addin
AC_ARG_ENABLE(gnomeplatform,
	AC_HELP_STRING([--enable-gnomeplatform],
		[enable Gnome platform support [default=yes]]),
		enable_gnomeplatform=${enableval}, enable_gnomeplatform=yes)

if test x$enable_gnomeplatform = xyes; then
	if test x$gnome_sharp = xno; then
		AC_MSG_ERROR([Cannot enable GNOME platform without gnome-sharp-2.0])
	fi
	if test x$gnome_vfs_sharp = xno; then
		AC_MSG_ERROR([Cannot enable GNOME platform without gnome-vfs-sharp-2.0])
	fi
	if test x$gconf_sharp = xno; then
		AC_MSG_ERROR([Cannot enable GNOME platform without gconf-sharp-2.0])
	fi
	platform_bindings="${platform_bindings}GNOME "
fi

AM_CONDITIONAL(ENABLE_GNOMEPLATFORM, [test x$enable_gnomeplatform = xyes])

# Mac platform addin
AC_ARG_ENABLE(macplatform,
	AC_HELP_STRING([--enable-macplatform],
		[enable Mac platform support [default=no]]),
		enable_macplatform=${enableval}, enable_macplatform=no)

if test x$enable_macplatform = xyes; then
	platform_bindings="${platform_bindings}Mac "
fi

AM_CONDITIONAL(ENABLE_MACPLATFORM, [test x$enable_macplatform = xyes])

# ASP.NET project addin
AC_ARG_ENABLE(aspnet,
	AC_HELP_STRING([--enable-aspnet],
		[enable ASP.NET project support [default=yes]]),
		enable_aspnet=${enableval}, enable_aspnet=yes)

AM_CONDITIONAL(ENABLE_ASPNET, [test x$enable_aspnet = xyes]) 

# C/C++ project addin
AC_ARG_ENABLE(c, AC_HELP_STRING([--enable-c], [enable C/C++ project support [default=yes]]), enable_c=${enableval}, enable_c=yes)
AM_CONDITIONAL(ENABLE_C, [test x$enable_c = xyes])

############BEGIN UGLINESS#####################################################
# MonoDevelop doesn't depend on Mozilla, but some addins do. However, 
# due to Mozilla never being in the linker path, we have to put Mozilla 
# detection code in the MonoDevelop core so that MD can set LD_LIBRARY_PATH 
# MOZILLA_FIVE_HOME before starting.
###############################################################################

#Check pkg-config first
MOZILLA_HOME="`$PKG_CONFIG --variable=libdir mozilla-gtkmozembed`"
if test -z "$MOZILLA_HOME"; then
	MOZILLA_HOME="`$PKG_CONFIG --variable=libdir firefox-gtkmozembed`"
fi
if test -z "$MOZILLA_HOME"; then
	MOZILLA_HOME="`$PKG_CONFIG --variable=libdir xulrunner-gtkmozembed`"
fi

#if MOZILLA_HOME is still empty, try to detect without pkg_config
#(NOTE: any changes to this block should be kept in sync with the one in monodevelop.in)
MOZFILE="libgtkembedmoz.so"
find_libgtkembedmoz ()
{
	MOZDIR=$MOZILLA_FIVE_HOME
	if test -e "$MOZDIR/$MOZFILE"; then echo $MOZDIR; return; fi
	
	MOZDIR=$(grep -h GRE_PATH= /etc/gre.d/*.conf 2>/dev/null | cut -d '"' -f 2 -d = | head -n 1) #"
	if test -e "$MOZDIR/$MOZFILE"; then echo $MOZDIR; return; fi
	
	mozilla_script=$(which mozilla 2> /dev/null)
	firefox_script=$(which firefox 2> /dev/null)
	
	for runtime_script in "$firefox_script $mozilla_script"; do
		MOZDIR=$(grep "MOZ_DIST_LIB=" $runtime_script 2> /dev/null | cut -d '"' -f 2 | cut -d '=' -f 2)
		if test -e "$MOZDIR/$MOZFILE"; then echo $MOZDIR; return; fi
		MOZDIR=$(grep "MOZILLA_FIVE_HOME=" $runtime_script 2> /dev/null | cut -d '"' -f 2 | cut -d '=' -f 2)
		if test -e "$MOZDIR/$MOZFILE"; then echo $MOZDIR; return; fi
		MOZDIR=$(grep "MOZILLA_LIBDIR=" $runtime_script 2> /dev/null | cut -d '"' -f 2 | cut -d '=' -f 2)
		if test -e "$MOZDIR/$MOZFILE"; then echo $MOZDIR; return; fi
		MOZDIR=$(grep "moz_libdir=" $runtime_script 2> /dev/null | cut -d '"' -f 2 | cut -d '=' -f 2)
		if test -e "$MOZDIR/$MOZFILE"; then echo $MOZDIR; return; fi
	done
}

if test -z "$MOZILLA_HOME"; then
	MOZILLA_HOME=`find_libgtkembedmoz`
fi

AC_SUBST(MOZILLA_HOME)

dnl Intl
ALL_LINGUAS="cs da de es fr ja pt_BR tr pl it zh_TW zh_CN ru sl_SI ca gl pt sv"
GETTEXT_PACKAGE=monodevelop
AC_SUBST(GETTEXT_PACKAGE)
AC_DEFINE_UNQUOTED(GETTEXT_PACKAGE,"$GETTEXT_PACKAGE", [Gettext package])
AM_GLIB_GNU_GETTEXT

CSC_FLAGS="-debug -codepage:utf8"

AC_SUBST(LIB_SUFFIX)
AC_SUBST(LIB_PREFIX)
AC_SUBST(ASSEMBLY_VERSION)
AC_SUBST(SQLITE_XML)
AC_SUBST(CSC_FLAGS)


MD_DIR='$(prefix)/lib/monodevelop'
MD_ASSEMBLY_DIR="$MD_DIR/bin"
MD_ADDIN_DIR="$MD_DIR/AddIns"

AC_SUBST(MD_ASSEMBLY_DIR)
AC_SUBST(MD_ADDIN_DIR)
AC_SUBST(MD_DIR)

if test -z "$platform_bindings"; then
	AC_MSG_ERROR([You must enable one of the platform bindings])
fi

AC_OUTPUT([
build/data/Makefile
build/data/resources/css/Makefile
build/data/resources/Makefile
build/Makefile
contrib/Makefile
contrib/Mono.Cecil/Makefile
src/Makefile
src/core/Makefile
src/core/NRefactory/Makefile
src/core/MonoDevelop.Core/AssemblyInfo.cs
src/core/MonoDevelop.Core/Makefile
src/core/MonoDevelop.Core/MonoDevelop.Core/GettextCatalog.cs
src/core/MonoDevelop.Core.Gui/AssemblyInfo.cs
src/core/MonoDevelop.Core.Gui/Makefile
src/core/MonoDevelop.Projects/AssemblyInfo.cs
src/core/MonoDevelop.Projects/MonoDevelop.Projects.dll.config
src/core/MonoDevelop.Projects/Makefile
src/core/MonoDevelop.Projects.Gui/AssemblyInfo.cs
src/core/MonoDevelop.Projects.Gui/Makefile
src/core/MonoDevelop.Documentation/AssemblyInfo.cs
src/core/MonoDevelop.Documentation/Makefile
src/core/MonoDevelop.Ide/AssemblyInfo.cs
src/core/MonoDevelop.Ide/Makefile
src/core/MonoDevelop.Dock/Makefile
src/core/MonoDevelop.Components/AssemblyInfo.cs
src/core/MonoDevelop.Components/Makefile
src/core/MonoDevelop.Startup/AssemblyInfo.cs
src/core/MonoDevelop.Startup/Makefile
src/tools/Makefile
src/tools/mdhost/Makefile
src/tools/mdrun/Makefile
src/tools/SharpCoco/Makefile
src/addins/Makefile
src/addins/MonoDeveloperExtensions/Makefile
src/addins/MonoDeveloperExtensions/NUnit/Makefile
src/addins/NUnit/Makefile
src/addins/VersionControl/Diff/Makefile
src/addins/VersionControl/DiffWidget/Makefile
src/addins/VersionControl/MonoDevelop.VersionControl/Makefile
src/addins/VersionControl/MonoDevelop.VersionControl.Subversion/Makefile
src/addins/VersionControl/Makefile
src/addins/CSharpBinding/Makefile
src/addins/CSharpBinding/Autotools/Makefile
src/addins/ILAsmBinding/Makefile
src/addins/VBNetBinding/Makefile
src/addins/MonoDevelop.SourceEditor/AssemblyInfo.cs
src/addins/MonoDevelop.SourceEditor/Makefile
src/addins/prj2make-sharp-lib/AssemblyInfo.cs
src/addins/prj2make-sharp-lib/Makefile
src/addins/WelcomePage/Makefile
src/addins/ChangeLogAddIn/Makefile
src/addins/MonoDevelop.GtkCore/Makefile
src/addins/MonoDevelop.GtkCore/lib/Makefile
src/addins/AspNetAddIn/Makefile
src/addins/MonoDevelop.Autotools/Makefile
src/addins/MonoDevelop.DesignerSupport/Makefile
src/addins/MonoDevelop.WebReferences/Makefile
src/addins/Deployment/Makefile
src/addins/Deployment/MonoDevelop.Deployment/Makefile
src/addins/Deployment/MonoDevelop.Deployment.Linux/Makefile
src/addins/MonoDevelop.Gettext/Makefile
src/addins/MonoDevelop.RegexToolkit/Makefile
src/addins/CBinding/Makefile
src/addins/SourceEditor2/AssemblyInfo.cs
src/addins/SourceEditor2/Makefile
src/addins/GnomePlatform/Makefile
src/addins/MacPlatform/Makefile
Makefile
monodevelop
mdtool
monodevelop.pc
monodevelop-core-addins.pc
po/Makefile.in
man/Makefile
])

echo ""
echo "Configuration summary"
echo ""
echo "   * Installation prefix = $prefix"
echo "   * C# compiler = $CSC"
echo "   * Mono class library development extensions: $enable_monoextensions"
echo "   * Version control support: $enable_versioncontrol"
echo "   *   Providers:"
echo "   *     Subversion: $enable_subversion"
echo "   * ASP.NET project support: $enable_aspnet"
echo "   * Web References: yes"
echo "   * C/C++ project support: $enable_c"
echo "   * GtkSourceView2: $enable_gtksourceview2"
echo "   * Platform bindings: $platform_bindings"
echo ""
