AC_INIT([monodevelop], 0.17, [monodevelop-list@lists.ximian.com])
AC_PREREQ(2.53)
AM_INIT_AUTOMAKE([1.9 tar-ustar])
AM_MAINTAINER_MODE

AC_PROG_INTLTOOL([0.25])

ASSEMBLY_VERSION=0.17.0.0

AC_PATH_PROG(MONO, mono)
AC_PATH_PROG(MCS, gmcs)

if test "x$MONO" = "x" ; then
	AC_MSG_ERROR([Can't find "mono" in your PATH])
fi

if test "x$MCS" = "x" ; then
  AC_MSG_ERROR([Can't find "gmcs" in your PATH])
fi
AC_SUBST(PATH)
AC_SUBST(LD_LIBRARY_PATH)

dnl Add MD's mimetypes to mime and desktop databases
AC_PATH_PROG(UPDATE_MIME_DB, update-mime-database, no)
if test "x$UPDATE_MIME_DB" = "xno"; then
   AC_MSG_ERROR([You need to install update-mime-database])
fi
AC_SUBST(UPDATE_MIME_DB)

AC_PATH_PROG(UPDATE_DESKTOP_DB, update-desktop-database, no)
if test "x$UPDATE_DESKTOP_DB" = "xno"; then
   AC_MSG_ERROR([You need to install update-desktop-database])
fi
AC_SUBST(UPDATE_DESKTOP_DB)

dnl Find pkg-config
AC_PATH_PROG(PKG_CONFIG, pkg-config, no)
if test "x$PKG_CONFIG" = "xno"; then
        AC_MSG_ERROR([You need to install pkg-config])
fi

MONO_REQUIRED_VERSION=1.1.10
PKG_CHECK_MODULES(UNMANAGED_DEPENDENCIES_MONO,mono >= $MONO_REQUIRED_VERSION, has_mono=true, has_mono=false)
PKG_CHECK_MODULES(UNMANAGED_DEPENDENCIES_MINT,mint >= $MONO_REQUIRED_VERSION, has_mint=true, has_mint=false)

if test "x$has_mono" = "xfalse"; then
  if test "x$has_mint" = "xfalse"; then
      AC_MSG_ERROR([Please install mono version $MONO_REQUIRED_VERSION or later to install MonoDevelop.
Please see http://www.mono-project.org/ to download latest mono sources or packages])
  fi
fi

if test "x$has_mono" = "xtrue"; then
    if test `uname -s` = "Darwin"; then
	AC_PATH_PROG(RUNTIME, mono, no)
	AC_PATH_PROG(CSC, gmcs, no)
	LIB_PREFIX=
	LIB_SUFFIX=.dylib
    else
	AC_PATH_PROG(RUNTIME, mono, no)
	AC_PATH_PROG(CSC, gmcs, no)
	LIB_PREFIX=.so
	LIB_SUFFIX=
    fi
else
    if test "x$has_mint" = "xtrue"; then
	AC_PATH_PROG(RUNTIME, mint, no)
	AC_PATH_PROG(CSC, gmcs, no)
	LIB_PREFIX=.so
	LIB_SUFFIX=
    fi
fi


dnl hard dependencies
GTKSHARP_REQUIRED_VERSION=2.8.0
GTKSOURCEVIEWSHARP_REQUIRED_VERSION=0.10
GTKSOURCEVIEW2SHARP_REQUIRED_VERSION=1.9.1
GECKOSHARP_REQUIRED_VERSION=0.10
MONODOC_REQUIRED_VERSION=1.0

PKG_CHECK_MODULES(GLIB_SHARP, glib-sharp-2.0 >= $GTKSHARP_REQUIRED_VERSION)
AC_SUBST(GLIB_SHARP_LIBS)
PKG_CHECK_MODULES(GTK_SHARP, gtk-sharp-2.0 >= $GTKSHARP_REQUIRED_VERSION)
AC_SUBST(GTK_SHARP_LIBS)
PKG_CHECK_MODULES(GNOME_SHARP, gnome-sharp-2.0 >= $GTKSHARP_REQUIRED_VERSION)
AC_SUBST(GNOME_SHARP_LIBS)
PKG_CHECK_MODULES(GNOME_VFS_SHARP, gnome-vfs-sharp-2.0 >= $GTKSHARP_REQUIRED_VERSION)
AC_SUBST(GNOME_VFS_SHARP_LIBS)
PKG_CHECK_MODULES(GLADE_SHARP, glade-sharp-2.0 >= $GTKSHARP_REQUIRED_VERSION)
AC_SUBST(GLADE_SHARP_LIBS)
PKG_CHECK_MODULES(GCONF_SHARP, gconf-sharp-2.0 >= $GTKSHARP_REQUIRED_VERSION)
AC_SUBST(GCONF_SHARP_LIBS)
PKG_CHECK_MODULES(GTKHTML_SHARP, gtkhtml-sharp-2.0 >= $GTKSHARP_REQUIRED_VERSION)
AC_SUBST(GTKHTML_SHARP_LIBS)
PKG_CHECK_MODULES(GECKO_SHARP, gecko-sharp-2.0 >= $GECKOSHARP_REQUIRED_VERSION)
AC_SUBST(GECKO_SHARP_LIBS)
PKG_CHECK_MODULES(MONODOC, monodoc >= $MONODOC_REQUIRED_VERSION)
AC_SUBST(MONODOC_LIBS)
PKG_CHECK_MODULES(MONO_CAIRO, mono-cairo >= 1.2)
AC_SUBST(MONO_CAIRO_LIBS)

gtksharp_prefix="`$PKG_CONFIG --variable=prefix gtk-sharp-2.0`"
AC_SUBST(gtksharp_prefix)

## gtksourceview2-sharp
AC_ARG_ENABLE(gtksourceview2,
	AC_HELP_STRING([--enable-gtksourceview2],
		[use GtkSourceView 2 [default=no]]),
	enable_gtksourceview2=${enableval}, enable_gtksourceview2=no)

if test "x$enable_gtksourceview2" = "xyes"; then
	PKG_CHECK_MODULES(GTKSOURCEVIEW2_SHARP, gtksourceview2-sharp >= $GTKSOURCEVIEW2SHARP_REQUIRED_VERSION)
	AC_SUBST(GTKSOURCEVIEW2_SHARP_LIBS)
else
	PKG_CHECK_MODULES(GTKSOURCEVIEW_SHARP, gtksourceview-sharp-2.0 >= $GTKSOURCEVIEWSHARP_REQUIRED_VERSION)
	AC_SUBST(GTKSOURCEVIEW_SHARP_LIBS)
fi

AM_CONDITIONAL(ENABLE_GTKSOURCEVIEW2, test x$enable_gtksourceview2 = xyes)

dnl deal with the mono debugger
MONO_DEBUGGER_REQUIRED_VERSION=0.9
AC_ARG_ENABLE(debugger,
   AC_HELP_STRING([--enable-debugger],
                   [enable support for the Mono Debugger [default=no]]),
   [PKG_CHECK_MODULES(MONO_DEBUGGER, mono-debugger >= $MONO_DEBUGGER_REQUIRED_VERSION,
				     enable_debugger=yes, enable_debugger=no)],
   enable_debugger=no)
 AM_CONDITIONAL(ENABLE_DEBUGGER, test x$enable_debugger = xyes)
 AC_SUBST(MONO_DEBUGGER_LIBS) 

if test "x$enable_debugger" = "xyes"; then
	AC_MSG_ERROR([The debugger add-in is not currently supported due to the API changes being done in the Mono debugger.])
fi


dnl java binding
dnl need to test for a java source to bytecode compiler
dnl and for ikvm
IKVM_REQUIRED_VERSION=0.10
AC_ARG_ENABLE(java,
	AC_HELP_STRING([--enable-java],
		[enable support for Java via ikvm [default=no]]),
		[PKG_CHECK_MODULES(IKVM, ikvm >= $IKVM_REQUIRED_VERSION, enable_java=yes, enable_java=no)],
		enable_java=no)
AM_CONDITIONAL(ENABLE_JAVA, test x$enable_java = xyes)

BOO_REQUIRED_VERSION=0.7.9.2659
AC_ARG_ENABLE(boo,
	AC_HELP_STRING([--enable-boo],
		[enable support for boo [default=no]]),
		[PKG_CHECK_MODULES(BOO, boo >= $BOO_REQUIRED_VERSION, enable_boo=yes, enable_boo=no)],
		enable_boo=no)

AM_CONDITIONAL(ENABLE_BOO, test x$enable_boo = xyes)
AC_SUBST(BOO_LIBS)

if test "x$enable_boo" = "xyes" ; then
	AC_PATH_PROG(BOOC, booc)
fi

NEMERLE_REQUIRED_VERSION=0.9.3.99
AC_ARG_ENABLE(nemerle,
	AC_HELP_STRING([--enable-nemerle],
		[enable support for Nemerle [default=no]]),
		[PKG_CHECK_MODULES(NEMERLE, nemerle >= $NEMERLE_REQUIRED_VERSION, enable_nemerle=yes, enable_nemerle=no)],
		enable_nemerle=no)

AM_CONDITIONAL(ENABLE_NEMERLE, test x$enable_nemerle = xyes)
AC_SUBST(NEMERLE_LIBS)

if test "x$enable_nemerle" = "xyes" ; then
	AC_PATH_PROG(NCC, ncc)
fi

AC_ARG_ENABLE(monoextensions,
	AC_HELP_STRING([--enable-monoextensions],
		[enable extensions for Mono development [default=yes]]),
	enable_monoextensions=${enableval}, enable_monoextensions=yes)

AM_CONDITIONAL(ENABLE_MONOEXTENSIONS, test x$enable_monoextensions = xyes)

AC_ARG_ENABLE(versioncontrol,
	AC_HELP_STRING([--enable-versioncontrol],
		[enable version control support [default=yes]]),
		enable_versioncontrol=${enableval}, enable_versioncontrol=yes)

AM_CONDITIONAL(ENABLE_VERSIONCONTROL, test x$enable_versioncontrol = xyes)

AC_ARG_ENABLE(subversion,
	AC_HELP_STRING([--enable-subversion],
		[enable Subversion support [default=no]]),
		enable_versioncontrol=yes, enable_subversion=no)

AM_CONDITIONAL(ENABLE_SUBVERSION, test x$enable_subversion = xyes)

dnl *************************************************************
dnl *** The following hunk of script-fu is to detect the      ***
dnl *** available MonoDevelop.Database database providers...  ***
dnl *************************************************************
AC_ARG_ENABLE(database,
	AC_HELP_STRING([--enable-database],
		[enable MonoDevelop.Database support [default=auto]]),
		enable_database=${enableval}, enable_database=yes)

AM_CONDITIONAL(ENABLE_DATABASE, [test x$enable_database = xyes])

test_sqlite=$(gacutil -l | grep "Mono.Data.SqliteClient, Version=2")
test_sqlserver=$(gacutil -l | grep "System.Data, Version=2")
test_postgres=$(gacutil -l | grep "Npgsql, Version=2")
test_mysql=$(gacutil -l | grep "MySql.Data")

if test "x$test_sqlite" != "x"; then
	enable_sqlite="yes"
else
	enable_sqlite="no (missing Mono.Data.SqliteClient)"
fi

if test "x$test_sqlserver" != "x"; then
	enable_sqlserver="yes"
else
	enable_sqlserver="no (missing System.Data, Version 2)"
fi

if test "x$test_postgres" != "x"; then
	enable_postgres="yes"
else
	enable_postgres="no (missing Npgsql, Version 2)"
fi

if test "x$test_mysql" != "x"; then
	enable_mysql="yes"
else
	enable_mysql="no (missing MySql.Data)"
fi

AM_CONDITIONAL(ENABLE_POSTGRES, [test "x$enable_postgres" = "xyes"])
AM_CONDITIONAL(ENABLE_MYSQL, [test "x$enable_mysql" = "xyes"])
AM_CONDITIONAL(ENABLE_SQLITE, [test "x$enable_sqlite" = "xyes"])
AM_CONDITIONAL(ENABLE_SQLSERVER, [test "x$enable_sqlserver" = "xyes"])

# ASP.NET project addin
AC_ARG_ENABLE(aspnet,
	AC_HELP_STRING([--enable-aspnet],
		[enable ASP.NET project support [default=yes]]),
		enable_aspnet=${enableval}, enable_aspnet=yes)

AM_CONDITIONAL(ENABLE_ASPNET, [test x$enable_aspnet = xyes]) 

#We need to know where Mozilla is for launch scripts and possible for AspNetEdit
#Check pkg-config first
MOZILLA_HOME="`$PKG_CONFIG --variable=libdir mozilla-gtkmozembed`"
if test -z "$MOZILLA_HOME"; then
	MOZILLA_HOME="`$PKG_CONFIG --variable=libdir firefox-gtkmozembed`"
fi
if test -z "$MOZILLA_HOME"; then
	MOZILLA_HOME="`$PKG_CONFIG --variable=libdir xulrunner-gtkmozembed`"
fi

#if MOZILLA_HOME is still empty, try to detect without pkg_config
#(NOTE: any changes to this block should be kept in sync with the one in monodevelop.in)
MOZFILE="libgtkembedmoz.so"
find_libgtkembedmoz ()
{
	MOZDIR=$MOZILLA_FIVE_HOME
	if test -e "$MOZDIR/$MOZFILE"; then echo $MOZDIR; return; fi
	
	MOZDIR=$(grep -h GRE_PATH= /etc/gre.d/*.conf 2>/dev/null | cut -d '"' -f 2 -d = | head -n 1) #"
	if test -e "$MOZDIR/$MOZFILE"; then echo $MOZDIR; return; fi
	
	mozilla_script=$(which mozilla 2> /dev/null)
	firefox_script=$(which firefox 2> /dev/null)
	
	for runtime_script in "$firefox_script $mozilla_script"; do
		MOZDIR=$(grep "MOZ_DIST_LIB=" $runtime_script 2> /dev/null | cut -d '"' -f 2 | cut -d '=' -f 2)
		if test -e "$MOZDIR/$MOZFILE"; then echo $MOZDIR; return; fi
		MOZDIR=$(grep "MOZILLA_FIVE_HOME=" $runtime_script 2> /dev/null | cut -d '"' -f 2 | cut -d '=' -f 2)
		if test -e "$MOZDIR/$MOZFILE"; then echo $MOZDIR; return; fi
		MOZDIR=$(grep "MOZILLA_LIBDIR=" $runtime_script 2> /dev/null | cut -d '"' -f 2 | cut -d '=' -f 2)
		if test -e "$MOZDIR/$MOZFILE"; then echo $MOZDIR; return; fi
		MOZDIR=$(grep "moz_libdir=" $runtime_script 2> /dev/null | cut -d '"' -f 2 | cut -d '=' -f 2)
		if test -e "$MOZDIR/$MOZFILE"; then echo $MOZDIR; return; fi
	done
}

if test -z "$MOZILLA_HOME"; then
	MOZILLA_HOME=`find_libgtkembedmoz`
fi

if test -z "$MOZILLA_HOME"; then
	MOZILLA_HOME=
	if test "x$enable_aspnetedit" = "xyes"; then
		AC_MSG_ERROR([Cannot detect Mozilla library directory. AspNetEdit addin cannot be built.])
	else
		AC_MSG_WARN([Cannot detect Mozilla library directory. WelcomePage addin may not be able to function.])
	fi
fi
	
AC_SUBST(MOZILLA_HOME)

# ASP.NET visual designer addin
AC_ARG_ENABLE(aspnetedit,
	AC_HELP_STRING([--enable-aspnetedit],
		[enable ASP.NET visual designer support [default=no]]),
		enable_aspnetedit=yes, enable_aspnetedit=no)

if test "x$enable_aspnet" = "xno"; then
	enable_aspnetedit=no
	if test "x$enable_aspnetedit" = "xyes"; then
		AC_MSG_WARN([Cannot enable AspNetEdit without ASP.NET project support.])
	fi
fi

if test "x$enable_aspnetedit" = "xyes"; then

	### Find out how we need to install the chrome -- the installation mechanism 
	### changed from FF 1.0 to FF 1.5
	AC_MSG_CHECKING([method of Mozilla extension installation])
	if test -f "$MOZILLA_HOME/chrome/installed-chrome.txt"; then
		MOZILLA_EXTENSION_TYPE="installedchrome"
		AC_MSG_RESULT([installed-chrome.txt])
	else
		MOZILLA_EXTENSION_TYPE="manifest"
		AC_MSG_RESULT([manifest file])
	fi
	
	AC_SUBST(MOZILLA_EXTENSION_TYPE)
	
	# get zip to create jar/xpi for chrome
	AC_PATH_PROG(ZIP, zip)
	if test "x$ZIP" = "x" ; then
		AC_MSG_ERROR([Can't find "zip" in your PATH])
	fi
fi

AM_CONDITIONAL(MOZILLA_EXTENSION_TYPE_TEXTFILE, test -f "$MOZILLA_HOME/chrome/installed-chrome.txt")
AM_CONDITIONAL(ENABLE_ASPNETEDIT, test x$enable_aspnetedit = xyes)

# C/C++ project addin
AC_ARG_ENABLE(c, AC_HELP_STRING([--enable-c], [enable C/C++ project support [default=yes]]), enable_c=${enableval}, enable_c=yes)
AM_CONDITIONAL(ENABLE_C, [test x$enable_c = xyes])

AC_ARG_ENABLE(update-mimedb,
   AC_HELP_STRING([--disable-update-mimedb],
                   [disable the update-mime-database after install [default=no]]),,
    enable_update_mimedb=yes)
 AM_CONDITIONAL(ENABLE_UPDATE_MIMEDB, test x$enable_update_mimedb = xyes)

AC_ARG_ENABLE(update-desktopdb,
   AC_HELP_STRING([--disable-update-desktopdb],
                  [disable the update-desktop-database after install [default=np]]),,
                  enable_update_desktopdb=yes)
   AM_CONDITIONAL(ENABLE_UPDATE_DESKTOPDB, test x$enable_update_desktopdb = xyes)

dnl Intl
ALL_LINGUAS="cs da de es fr ja pt_BR tr pl it zh_TW zh_CN ru sl_SI ca gl pt sv"
GETTEXT_PACKAGE=monodevelop
AC_SUBST(GETTEXT_PACKAGE)
AC_DEFINE_UNQUOTED(GETTEXT_PACKAGE,"$GETTEXT_PACKAGE", [Gettext package])
AM_GLIB_GNU_GETTEXT

CSC_FLAGS="-debug -codepage:utf8"

AC_SUBST(LIB_SUFFIX)
AC_SUBST(LIB_PREFIX)
AC_SUBST(ASSEMBLY_VERSION)
AC_SUBST(SQLITE_XML)
AC_SUBST(CSC_FLAGS)


MD_DIR='$(prefix)/lib/monodevelop'
MD_ASSEMBLY_DIR="$MD_DIR/bin"
MD_ADDIN_DIR="$MD_DIR/AddIns"

AC_SUBST(MD_ASSEMBLY_DIR)
AC_SUBST(MD_ADDIN_DIR)
AC_SUBST(MD_DIR)

AC_OUTPUT([
build/data/Makefile
build/data/resources/css/Makefile
build/data/resources/Makefile
build/Makefile
contrib/Makefile
contrib/Firebird/Makefile
contrib/Mono.Addins/Makefile
contrib/Mono.Cecil/Makefile
Core/Makefile
Core/src/NRefactory/Makefile
Core/src/Makefile
Core/src/MonoDevelop.Core/AssemblyInfo.cs
Core/src/MonoDevelop.Core/Makefile
Core/src/MonoDevelop.Core/MonoDevelop.Core/GettextCatalog.cs
Core/src/MonoDevelop.Core.Gui/AssemblyInfo.cs
Core/src/MonoDevelop.Core.Gui/Makefile
Core/src/MonoDevelop.Projects/AssemblyInfo.cs
Core/src/MonoDevelop.Projects/MonoDevelop.Projects.dll.config
Core/src/MonoDevelop.Projects/Makefile
Core/src/MonoDevelop.Projects.Gui/AssemblyInfo.cs
Core/src/MonoDevelop.Projects.Gui/Makefile
Core/src/MonoDevelop.Documentation/AssemblyInfo.cs
Core/src/MonoDevelop.Documentation/Makefile
Core/src/MonoDevelop.Ide/AssemblyInfo.cs
Core/src/MonoDevelop.Ide/Makefile
Core/src/MonoDevelop.Dock/Makefile
Core/src/MonoDevelop.Components/AssemblyInfo.cs
Core/src/MonoDevelop.Components/Makefile
Core/src/MonoDevelop.Startup/AssemblyInfo.cs
Core/src/MonoDevelop.Startup/Makefile
Core/src/Tools/Makefile
Core/src/Tools/mdhost/Makefile
Core/src/Tools/mdrun/Makefile
Core/src/Tools/SharpCoco/Makefile
Extras/BooBinding/Makefile
Extras/BooBinding/BooShell/Makefile
Extras/JavaBinding/Makefile
Extras/Makefile
Extras/MonoDeveloperExtensions/Makefile
Extras/MonoDeveloperExtensions/NUnit/Makefile
Extras/MonoDevelop.Database/Makefile
Extras/MonoDevelop.Database/MonoDevelop.Database.Sql/Makefile
Extras/MonoDevelop.Database/MonoDevelop.Database.Sql.MySql/Makefile
Extras/MonoDevelop.Database/MonoDevelop.Database.Sql.Npgsql/Makefile
Extras/MonoDevelop.Database/MonoDevelop.Database.Sql.Sqlite/Makefile
Extras/MonoDevelop.Database/MonoDevelop.Database.Sql.SqlServer/Makefile
Extras/MonoDevelop.Database/MonoDevelop.Database.Components/Makefile
Extras/MonoDevelop.Database/MonoDevelop.Database.Query/Makefile
Extras/MonoDevelop.Database/MonoDevelop.Database.Designer/Makefile
Extras/MonoDevelop.Database/MonoDevelop.Database.ConnectionManager/Makefile
Extras/NUnit/Makefile
Extras/VersionControl/Diff/Makefile
Extras/VersionControl/DiffWidget/Makefile
Extras/VersionControl/MonoDevelop.VersionControl/Makefile
Extras/VersionControl/MonoDevelop.VersionControl.Subversion/Makefile
Extras/VersionControl/Makefile
Extras/CSharpBinding/Makefile
Extras/CSharpBinding/Autotools/Makefile
Extras/ILAsmBinding/Makefile
Extras/NemerleBinding/Makefile
Extras/VBNetBinding/Makefile
Extras/DebuggerAddIn/AssemblyInfo.cs
Extras/DebuggerAddIn/Makefile
Extras/DebuggerAddIn/DebuggerPaths.cs
Extras/MonoDevelop.SourceEditor/AssemblyInfo.cs
Extras/MonoDevelop.SourceEditor/Makefile
Extras/MonoDevelop.SourceEditor2/AssemblyInfo.cs
Extras/MonoDevelop.SourceEditor2/Makefile
Extras/prj2make-sharp-lib/AssemblyInfo.cs
Extras/prj2make-sharp-lib/Makefile
Extras/WelcomePage/Makefile
Extras/ChangeLogAddIn/Makefile
Extras/MonoDevelop.GtkCore/Makefile
Extras/MonoDevelop.GtkCore/lib/Makefile
Extras/AspNetAddIn/Makefile
Extras/MonoDevelop.Autotools/Makefile
Extras/MonoDevelop.DesignerSupport/Makefile
Extras/AspNetEdit/Makefile
Extras/AspNetEdit/chrome/Makefile
Extras/AspNetEdit/chrome/aspdesigner.manifest
Extras/MonoDevelop.WebReferences/Makefile
Extras/Deployment/Makefile
Extras/Deployment/MonoDevelop.Deployment/Makefile
Extras/Deployment/MonoDevelop.Deployment.Linux/Makefile
Extras/MonoDevelop.Gettext/Makefile
Extras/MonoDevelop.RegexToolkit/Makefile
Extras/CBinding/Makefile
Makefile
monodevelop
mdtool
monodevelop.pc
po/Makefile.in
man/Makefile
])

echo ""
echo "Configuration summary"
echo ""
echo "   * Installation prefix = $prefix"
echo "   * C# compiler = $CSC"
echo "   * Mozilla home: $MOZILLA_HOME"
echo "   * mono-debugger: $enable_debugger"
echo "   * MonoDevelop.Database support: $enable_database"

if test "x$enable_database" = "xyes"; then
echo "   *   Providers:"
echo "   *     PostgreSQL:   $enable_postgres"
echo "   *     MySQL:        $enable_mysql"
echo "   *     SQLite:       $enable_sqlite"
echo "   *     SQL Server:   $enable_sqlserver"
fi

echo "   * java support: $enable_java"
echo "   * boo support: $enable_boo"
echo "   * Nemerle support: $enable_nemerle"
echo "   * Mono class library development extensions: $enable_monoextensions"
echo "   * Version control support: $enable_versioncontrol"
echo "   *   Providers:"
echo "   *     Subversion: $enable_subversion"
echo "   * ASP.NET project support: $enable_aspnet"
echo "   * ASP.NET Visual Designer: $enable_aspnetedit"
echo "   * Web References: yes"
echo "   * C/C++ project support: $enable_c"
echo "   * GtkSourceView2: $enable_gtksourceview2"
echo ""
