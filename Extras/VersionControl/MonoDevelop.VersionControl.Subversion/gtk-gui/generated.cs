// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 2.0.50727.42
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------

namespace Stetic {
    
    
    internal class Gui {
        
        public static void Build(object obj, System.Type type) {
            Stetic.Gui.Build(obj, type.FullName);
        }
        
        public static void Build(object obj, string id) {
            System.Collections.Hashtable bindings = new System.Collections.Hashtable();
            if ((id == "VersionControl.Service.Cvs.CvsRepositoryEditor")) {
                Gtk.Bin cobj = ((Gtk.Bin)(obj));
                // Widget VersionControl.Service.Cvs.CvsRepositoryEditor
                BinContainer.Attach(cobj);
                cobj.Events = ((Gdk.EventMask)(256));
                cobj.Name = "VersionControl.Service.Cvs.CvsRepositoryEditor";
                // Container child VersionControl.Service.Cvs.CvsRepositoryEditor.Gtk.Container+ContainerChild
                Gtk.Table w1 = new Gtk.Table(((uint)(9)), ((uint)(2)), false);
                w1.RowSpacing = ((uint)(6));
                w1.ColumnSpacing = ((uint)(6));
                w1.BorderWidth = ((uint)(12));
                w1.Events = ((Gdk.EventMask)(0));
                w1.Name = "table1";
                // Container child table1.Gtk.Table+TableChild
                Gtk.HBox w2 = new Gtk.HBox();
                w2.Events = ((Gdk.EventMask)(0));
                w2.Name = "hbox1";
                // Container child hbox1.Gtk.Box+BoxChild
                Gtk.ComboBox w3 = Gtk.ComboBox.NewText();
                w3.Active = 0;
                w3.Events = ((Gdk.EventMask)(0));
                w3.Name = "comboProtocol";
                bindings["comboProtocol"] = w3;
                w2.Add(w3);
                Gtk.Box.BoxChild w4 = ((Gtk.Box.BoxChild)(w2[w3]));
                w4.Position = 0;
                w4.Expand = false;
                w4.Fill = false;
                bindings["hbox1"] = w2;
                w1.Add(w2);
                Gtk.Table.TableChild w5 = ((Gtk.Table.TableChild)(w1[w2]));
                w5.BottomAttach = ((uint)(3));
                w5.LeftAttach = ((uint)(1));
                w5.RightAttach = ((uint)(2));
                w5.TopAttach = ((uint)(2));
                w5.YOptions = ((Gtk.AttachOptions)(4));
                w5.XOptions = ((Gtk.AttachOptions)(4));
                // Container child table1.Gtk.Table+TableChild
                Gtk.Label w6 = new Gtk.Label();
                w6.LabelProp = "Url:";
                w6.Xalign = 0F;
                w6.Events = ((Gdk.EventMask)(0));
                w6.Name = "label4";
                bindings["label4"] = w6;
                w1.Add(w6);
                Gtk.Table.TableChild w7 = ((Gtk.Table.TableChild)(w1[w6]));
                w7.YOptions = ((Gtk.AttachOptions)(0));
                w7.XOptions = ((Gtk.AttachOptions)(4));
                // Container child table1.Gtk.Table+TableChild
                Gtk.Label w8 = new Gtk.Label();
                w8.LabelProp = "Server:";
                w8.Xalign = 0F;
                w8.Events = ((Gdk.EventMask)(0));
                w8.Name = "label11";
                bindings["label11"] = w8;
                w1.Add(w8);
                Gtk.Table.TableChild w9 = ((Gtk.Table.TableChild)(w1[w8]));
                w9.BottomAttach = ((uint)(4));
                w9.TopAttach = ((uint)(3));
                w9.YOptions = ((Gtk.AttachOptions)(0));
                w9.XOptions = ((Gtk.AttachOptions)(4));
                // Container child table1.Gtk.Table+TableChild
                Gtk.Label w10 = new Gtk.Label();
                w10.LabelProp = "Port:";
                w10.Xalign = 0F;
                w10.Events = ((Gdk.EventMask)(0));
                w10.Name = "label6";
                bindings["label6"] = w10;
                w1.Add(w10);
                Gtk.Table.TableChild w11 = ((Gtk.Table.TableChild)(w1[w10]));
                w11.BottomAttach = ((uint)(5));
                w11.TopAttach = ((uint)(4));
                w11.YOptions = ((Gtk.AttachOptions)(0));
                w11.XOptions = ((Gtk.AttachOptions)(4));
                // Container child table1.Gtk.Table+TableChild
                Gtk.Label w12 = new Gtk.Label();
                w12.LabelProp = "Path:";
                w12.Xalign = 0F;
                w12.Events = ((Gdk.EventMask)(0));
                w12.Name = "label7";
                bindings["label7"] = w12;
                w1.Add(w12);
                Gtk.Table.TableChild w13 = ((Gtk.Table.TableChild)(w1[w12]));
                w13.BottomAttach = ((uint)(6));
                w13.TopAttach = ((uint)(5));
                w13.YOptions = ((Gtk.AttachOptions)(0));
                w13.XOptions = ((Gtk.AttachOptions)(4));
                // Container child table1.Gtk.Table+TableChild
                Gtk.Label w14 = new Gtk.Label();
                w14.LabelProp = "User:";
                w14.Xalign = 0F;
                w14.Events = ((Gdk.EventMask)(0));
                w14.Name = "label8";
                bindings["label8"] = w14;
                w1.Add(w14);
                Gtk.Table.TableChild w15 = ((Gtk.Table.TableChild)(w1[w14]));
                w15.BottomAttach = ((uint)(8));
                w15.TopAttach = ((uint)(7));
                w15.YOptions = ((Gtk.AttachOptions)(0));
                w15.XOptions = ((Gtk.AttachOptions)(4));
                // Container child table1.Gtk.Table+TableChild
                Gtk.Label w16 = new Gtk.Label();
                w16.LabelProp = "Password:";
                w16.Xalign = 0F;
                w16.Events = ((Gdk.EventMask)(0));
                w16.Name = "label9";
                bindings["label9"] = w16;
                w1.Add(w16);
                Gtk.Table.TableChild w17 = ((Gtk.Table.TableChild)(w1[w16]));
                w17.BottomAttach = ((uint)(9));
                w17.TopAttach = ((uint)(8));
                w17.YOptions = ((Gtk.AttachOptions)(0));
                w17.XOptions = ((Gtk.AttachOptions)(4));
                // Container child table1.Gtk.Table+TableChild
                Gtk.Entry w18 = new Gtk.Entry();
                w18.IsEditable = true;
                w18.InvisibleChar = '●';
                w18.CanFocus = true;
                w18.Events = ((Gdk.EventMask)(0));
                w18.Name = "repositoryUrlEntry";
                bindings["repositoryUrlEntry"] = w18;
                w1.Add(w18);
                Gtk.Table.TableChild w19 = ((Gtk.Table.TableChild)(w1[w18]));
                w19.LeftAttach = ((uint)(1));
                w19.RightAttach = ((uint)(2));
                w19.YOptions = ((Gtk.AttachOptions)(0));
                // Container child table1.Gtk.Table+TableChild
                Gtk.Entry w20 = new Gtk.Entry();
                w20.IsEditable = true;
                w20.InvisibleChar = '●';
                w20.CanFocus = true;
                w20.Events = ((Gdk.EventMask)(0));
                w20.Name = "repositoryServerEntry";
                bindings["repositoryServerEntry"] = w20;
                w1.Add(w20);
                Gtk.Table.TableChild w21 = ((Gtk.Table.TableChild)(w1[w20]));
                w21.BottomAttach = ((uint)(4));
                w21.LeftAttach = ((uint)(1));
                w21.RightAttach = ((uint)(2));
                w21.TopAttach = ((uint)(3));
                w21.YOptions = ((Gtk.AttachOptions)(0));
                // Container child table1.Gtk.Table+TableChild
                Gtk.Entry w22 = new Gtk.Entry();
                w22.IsEditable = true;
                w22.InvisibleChar = '●';
                w22.CanFocus = true;
                w22.Events = ((Gdk.EventMask)(0));
                w22.Name = "repositoryPathEntry";
                bindings["repositoryPathEntry"] = w22;
                w1.Add(w22);
                Gtk.Table.TableChild w23 = ((Gtk.Table.TableChild)(w1[w22]));
                w23.BottomAttach = ((uint)(6));
                w23.LeftAttach = ((uint)(1));
                w23.RightAttach = ((uint)(2));
                w23.TopAttach = ((uint)(5));
                w23.YOptions = ((Gtk.AttachOptions)(0));
                // Container child table1.Gtk.Table+TableChild
                Gtk.Entry w24 = new Gtk.Entry();
                w24.IsEditable = true;
                w24.InvisibleChar = '●';
                w24.CanFocus = true;
                w24.Events = ((Gdk.EventMask)(0));
                w24.Name = "repositoryUserEntry";
                bindings["repositoryUserEntry"] = w24;
                w1.Add(w24);
                Gtk.Table.TableChild w25 = ((Gtk.Table.TableChild)(w1[w24]));
                w25.BottomAttach = ((uint)(8));
                w25.LeftAttach = ((uint)(1));
                w25.RightAttach = ((uint)(2));
                w25.TopAttach = ((uint)(7));
                w25.YOptions = ((Gtk.AttachOptions)(0));
                // Container child table1.Gtk.Table+TableChild
                Gtk.Entry w26 = new Gtk.Entry();
                w26.IsEditable = true;
                w26.Visibility = false;
                w26.InvisibleChar = '●';
                w26.CanFocus = true;
                w26.Events = ((Gdk.EventMask)(0));
                w26.Name = "repositoryPassEntry";
                bindings["repositoryPassEntry"] = w26;
                w1.Add(w26);
                Gtk.Table.TableChild w27 = ((Gtk.Table.TableChild)(w1[w26]));
                w27.BottomAttach = ((uint)(9));
                w27.LeftAttach = ((uint)(1));
                w27.RightAttach = ((uint)(2));
                w27.TopAttach = ((uint)(8));
                w27.YOptions = ((Gtk.AttachOptions)(0));
                // Container child table1.Gtk.Table+TableChild
                Gtk.HSeparator w28 = new Gtk.HSeparator();
                w28.Events = ((Gdk.EventMask)(0));
                w28.Name = "hseparator2";
                bindings["hseparator2"] = w28;
                w1.Add(w28);
                Gtk.Table.TableChild w29 = ((Gtk.Table.TableChild)(w1[w28]));
                w29.BottomAttach = ((uint)(2));
                w29.YPadding = ((uint)(6));
                w29.RightAttach = ((uint)(2));
                w29.TopAttach = ((uint)(1));
                w29.YOptions = ((Gtk.AttachOptions)(4));
                w29.XOptions = ((Gtk.AttachOptions)(4));
                // Container child table1.Gtk.Table+TableChild
                Gtk.HSeparator w30 = new Gtk.HSeparator();
                w30.Events = ((Gdk.EventMask)(0));
                w30.Name = "hseparator1";
                bindings["hseparator1"] = w30;
                w1.Add(w30);
                Gtk.Table.TableChild w31 = ((Gtk.Table.TableChild)(w1[w30]));
                w31.BottomAttach = ((uint)(7));
                w31.YPadding = ((uint)(6));
                w31.RightAttach = ((uint)(2));
                w31.TopAttach = ((uint)(6));
                w31.YOptions = ((Gtk.AttachOptions)(4));
                w31.XOptions = ((Gtk.AttachOptions)(4));
                // Container child table1.Gtk.Table+TableChild
                Gtk.Label w32 = new Gtk.Label();
                w32.LabelProp = "Protocol:";
                w32.Xalign = 0F;
                w32.Events = ((Gdk.EventMask)(0));
                w32.Name = "label5";
                bindings["label5"] = w32;
                w1.Add(w32);
                Gtk.Table.TableChild w33 = ((Gtk.Table.TableChild)(w1[w32]));
                w33.BottomAttach = ((uint)(3));
                w33.TopAttach = ((uint)(2));
                w33.YOptions = ((Gtk.AttachOptions)(4));
                w33.XOptions = ((Gtk.AttachOptions)(4));
                // Container child table1.Gtk.Table+TableChild
                Gtk.HBox w34 = new Gtk.HBox();
                w34.Events = ((Gdk.EventMask)(0));
                w34.Name = "hbox2";
                // Container child hbox2.Gtk.Box+BoxChild
                Gtk.SpinButton w35 = new Gtk.SpinButton(0, 100, 1);
                w35.Adjustment.PageIncrement = 10;
                w35.Adjustment.PageSize = 10;
                w35.ClimbRate = 1;
                w35.Numeric = true;
                w35.Value = 1;
                w35.CanFocus = true;
                w35.Events = ((Gdk.EventMask)(0));
                w35.Name = "repositoryPortSpin";
                bindings["repositoryPortSpin"] = w35;
                w34.Add(w35);
                Gtk.Box.BoxChild w36 = ((Gtk.Box.BoxChild)(w34[w35]));
                w36.Position = 0;
                w36.Expand = false;
                w36.Fill = false;
                bindings["hbox2"] = w34;
                w1.Add(w34);
                Gtk.Table.TableChild w37 = ((Gtk.Table.TableChild)(w1[w34]));
                w37.BottomAttach = ((uint)(5));
                w37.LeftAttach = ((uint)(1));
                w37.RightAttach = ((uint)(2));
                w37.TopAttach = ((uint)(4));
                w37.YOptions = ((Gtk.AttachOptions)(4));
                w37.XOptions = ((Gtk.AttachOptions)(4));
                bindings["table1"] = w1;
                cobj.Add(w1);
                bindings["VersionControl.Service.Cvs.CvsRepositoryEditor"] = cobj;
                w3.Show();
                w2.Show();
                w6.Show();
                w8.Show();
                w10.Show();
                w12.Show();
                w14.Show();
                w16.Show();
                w18.Show();
                w20.Show();
                w22.Show();
                w24.Show();
                w26.Show();
                w28.Show();
                w30.Show();
                w32.Show();
                w35.Show();
                w34.Show();
                w1.Show();
                cobj.Show();
            }
            else {
                if ((id == "VersionControl.Service.UrlBasedRepositoryEditor")) {
                    Gtk.Bin cobj = ((Gtk.Bin)(obj));
                    // Widget VersionControl.Service.UrlBasedRepositoryEditor
                    BinContainer.Attach(cobj);
                    cobj.Events = ((Gdk.EventMask)(256));
                    cobj.Name = "VersionControl.Service.UrlBasedRepositoryEditor";
                    // Container child VersionControl.Service.UrlBasedRepositoryEditor.Gtk.Container+ContainerChild
                    Gtk.Table w1 = new Gtk.Table(((uint)(9)), ((uint)(2)), false);
                    w1.RowSpacing = ((uint)(6));
                    w1.ColumnSpacing = ((uint)(6));
                    w1.BorderWidth = ((uint)(12));
                    w1.Events = ((Gdk.EventMask)(0));
                    w1.Name = "table1";
                    // Container child table1.Gtk.Table+TableChild
                    Gtk.HBox w2 = new Gtk.HBox();
                    w2.Events = ((Gdk.EventMask)(0));
                    w2.Name = "hbox2";
                    // Container child hbox2.Gtk.Box+BoxChild
                    Gtk.SpinButton w3 = new Gtk.SpinButton(0, 100, 1);
                    w3.Adjustment.PageIncrement = 10;
                    w3.Adjustment.PageSize = 10;
                    w3.ClimbRate = 1;
                    w3.Numeric = true;
                    w3.Value = 1;
                    w3.CanFocus = true;
                    w3.Events = ((Gdk.EventMask)(0));
                    w3.Name = "repositoryPortSpin";
                    bindings["repositoryPortSpin"] = w3;
                    w2.Add(w3);
                    Gtk.Box.BoxChild w4 = ((Gtk.Box.BoxChild)(w2[w3]));
                    w4.Position = 0;
                    w4.Expand = false;
                    w4.Fill = false;
                    bindings["hbox2"] = w2;
                    w1.Add(w2);
                    Gtk.Table.TableChild w5 = ((Gtk.Table.TableChild)(w1[w2]));
                    w5.BottomAttach = ((uint)(5));
                    w5.LeftAttach = ((uint)(1));
                    w5.RightAttach = ((uint)(2));
                    w5.TopAttach = ((uint)(4));
                    w5.YOptions = ((Gtk.AttachOptions)(4));
                    w5.XOptions = ((Gtk.AttachOptions)(4));
                    // Container child table1.Gtk.Table+TableChild
                    Gtk.Label w6 = new Gtk.Label();
                    w6.LabelProp = "Protocol:";
                    w6.Xalign = 0F;
                    w6.Events = ((Gdk.EventMask)(0));
                    w6.Name = "label5";
                    bindings["label5"] = w6;
                    w1.Add(w6);
                    Gtk.Table.TableChild w7 = ((Gtk.Table.TableChild)(w1[w6]));
                    w7.BottomAttach = ((uint)(3));
                    w7.TopAttach = ((uint)(2));
                    w7.YOptions = ((Gtk.AttachOptions)(4));
                    w7.XOptions = ((Gtk.AttachOptions)(4));
                    // Container child table1.Gtk.Table+TableChild
                    Gtk.HSeparator w8 = new Gtk.HSeparator();
                    w8.Events = ((Gdk.EventMask)(0));
                    w8.Name = "hseparator1";
                    bindings["hseparator1"] = w8;
                    w1.Add(w8);
                    Gtk.Table.TableChild w9 = ((Gtk.Table.TableChild)(w1[w8]));
                    w9.BottomAttach = ((uint)(7));
                    w9.YPadding = ((uint)(6));
                    w9.RightAttach = ((uint)(2));
                    w9.TopAttach = ((uint)(6));
                    w9.YOptions = ((Gtk.AttachOptions)(4));
                    w9.XOptions = ((Gtk.AttachOptions)(4));
                    // Container child table1.Gtk.Table+TableChild
                    Gtk.HSeparator w10 = new Gtk.HSeparator();
                    w10.Events = ((Gdk.EventMask)(0));
                    w10.Name = "hseparator2";
                    bindings["hseparator2"] = w10;
                    w1.Add(w10);
                    Gtk.Table.TableChild w11 = ((Gtk.Table.TableChild)(w1[w10]));
                    w11.BottomAttach = ((uint)(2));
                    w11.YPadding = ((uint)(6));
                    w11.RightAttach = ((uint)(2));
                    w11.TopAttach = ((uint)(1));
                    w11.YOptions = ((Gtk.AttachOptions)(4));
                    w11.XOptions = ((Gtk.AttachOptions)(4));
                    // Container child table1.Gtk.Table+TableChild
                    Gtk.Entry w12 = new Gtk.Entry();
                    w12.IsEditable = true;
                    w12.Visibility = false;
                    w12.InvisibleChar = '●';
                    w12.CanFocus = true;
                    w12.Events = ((Gdk.EventMask)(0));
                    w12.Name = "repositoryPassEntry";
                    bindings["repositoryPassEntry"] = w12;
                    w1.Add(w12);
                    Gtk.Table.TableChild w13 = ((Gtk.Table.TableChild)(w1[w12]));
                    w13.BottomAttach = ((uint)(9));
                    w13.LeftAttach = ((uint)(1));
                    w13.RightAttach = ((uint)(2));
                    w13.TopAttach = ((uint)(8));
                    w13.YOptions = ((Gtk.AttachOptions)(0));
                    // Container child table1.Gtk.Table+TableChild
                    Gtk.Entry w14 = new Gtk.Entry();
                    w14.IsEditable = true;
                    w14.InvisibleChar = '●';
                    w14.CanFocus = true;
                    w14.Events = ((Gdk.EventMask)(0));
                    w14.Name = "repositoryUserEntry";
                    bindings["repositoryUserEntry"] = w14;
                    w1.Add(w14);
                    Gtk.Table.TableChild w15 = ((Gtk.Table.TableChild)(w1[w14]));
                    w15.BottomAttach = ((uint)(8));
                    w15.LeftAttach = ((uint)(1));
                    w15.RightAttach = ((uint)(2));
                    w15.TopAttach = ((uint)(7));
                    w15.YOptions = ((Gtk.AttachOptions)(0));
                    // Container child table1.Gtk.Table+TableChild
                    Gtk.Entry w16 = new Gtk.Entry();
                    w16.IsEditable = true;
                    w16.InvisibleChar = '●';
                    w16.CanFocus = true;
                    w16.Events = ((Gdk.EventMask)(0));
                    w16.Name = "repositoryPathEntry";
                    bindings["repositoryPathEntry"] = w16;
                    w1.Add(w16);
                    Gtk.Table.TableChild w17 = ((Gtk.Table.TableChild)(w1[w16]));
                    w17.BottomAttach = ((uint)(6));
                    w17.LeftAttach = ((uint)(1));
                    w17.RightAttach = ((uint)(2));
                    w17.TopAttach = ((uint)(5));
                    w17.YOptions = ((Gtk.AttachOptions)(0));
                    // Container child table1.Gtk.Table+TableChild
                    Gtk.Entry w18 = new Gtk.Entry();
                    w18.IsEditable = true;
                    w18.InvisibleChar = '●';
                    w18.CanFocus = true;
                    w18.Events = ((Gdk.EventMask)(0));
                    w18.Name = "repositoryServerEntry";
                    bindings["repositoryServerEntry"] = w18;
                    w1.Add(w18);
                    Gtk.Table.TableChild w19 = ((Gtk.Table.TableChild)(w1[w18]));
                    w19.BottomAttach = ((uint)(4));
                    w19.LeftAttach = ((uint)(1));
                    w19.RightAttach = ((uint)(2));
                    w19.TopAttach = ((uint)(3));
                    w19.YOptions = ((Gtk.AttachOptions)(0));
                    // Container child table1.Gtk.Table+TableChild
                    Gtk.Entry w20 = new Gtk.Entry();
                    w20.IsEditable = true;
                    w20.InvisibleChar = '●';
                    w20.CanFocus = true;
                    w20.Events = ((Gdk.EventMask)(0));
                    w20.Name = "repositoryUrlEntry";
                    bindings["repositoryUrlEntry"] = w20;
                    w1.Add(w20);
                    Gtk.Table.TableChild w21 = ((Gtk.Table.TableChild)(w1[w20]));
                    w21.LeftAttach = ((uint)(1));
                    w21.RightAttach = ((uint)(2));
                    w21.YOptions = ((Gtk.AttachOptions)(0));
                    // Container child table1.Gtk.Table+TableChild
                    Gtk.Label w22 = new Gtk.Label();
                    w22.LabelProp = "Password:";
                    w22.Xalign = 0F;
                    w22.Events = ((Gdk.EventMask)(0));
                    w22.Name = "label9";
                    bindings["label9"] = w22;
                    w1.Add(w22);
                    Gtk.Table.TableChild w23 = ((Gtk.Table.TableChild)(w1[w22]));
                    w23.BottomAttach = ((uint)(9));
                    w23.TopAttach = ((uint)(8));
                    w23.YOptions = ((Gtk.AttachOptions)(0));
                    w23.XOptions = ((Gtk.AttachOptions)(4));
                    // Container child table1.Gtk.Table+TableChild
                    Gtk.Label w24 = new Gtk.Label();
                    w24.LabelProp = "User:";
                    w24.Xalign = 0F;
                    w24.Events = ((Gdk.EventMask)(0));
                    w24.Name = "label8";
                    bindings["label8"] = w24;
                    w1.Add(w24);
                    Gtk.Table.TableChild w25 = ((Gtk.Table.TableChild)(w1[w24]));
                    w25.BottomAttach = ((uint)(8));
                    w25.TopAttach = ((uint)(7));
                    w25.YOptions = ((Gtk.AttachOptions)(0));
                    w25.XOptions = ((Gtk.AttachOptions)(4));
                    // Container child table1.Gtk.Table+TableChild
                    Gtk.Label w26 = new Gtk.Label();
                    w26.LabelProp = "Path:";
                    w26.Xalign = 0F;
                    w26.Events = ((Gdk.EventMask)(0));
                    w26.Name = "label7";
                    bindings["label7"] = w26;
                    w1.Add(w26);
                    Gtk.Table.TableChild w27 = ((Gtk.Table.TableChild)(w1[w26]));
                    w27.BottomAttach = ((uint)(6));
                    w27.TopAttach = ((uint)(5));
                    w27.YOptions = ((Gtk.AttachOptions)(0));
                    w27.XOptions = ((Gtk.AttachOptions)(4));
                    // Container child table1.Gtk.Table+TableChild
                    Gtk.Label w28 = new Gtk.Label();
                    w28.LabelProp = "Port:";
                    w28.Xalign = 0F;
                    w28.Events = ((Gdk.EventMask)(0));
                    w28.Name = "label6";
                    bindings["label6"] = w28;
                    w1.Add(w28);
                    Gtk.Table.TableChild w29 = ((Gtk.Table.TableChild)(w1[w28]));
                    w29.BottomAttach = ((uint)(5));
                    w29.TopAttach = ((uint)(4));
                    w29.YOptions = ((Gtk.AttachOptions)(0));
                    w29.XOptions = ((Gtk.AttachOptions)(4));
                    // Container child table1.Gtk.Table+TableChild
                    Gtk.Label w30 = new Gtk.Label();
                    w30.LabelProp = "Server:";
                    w30.Xalign = 0F;
                    w30.Events = ((Gdk.EventMask)(0));
                    w30.Name = "label11";
                    bindings["label11"] = w30;
                    w1.Add(w30);
                    Gtk.Table.TableChild w31 = ((Gtk.Table.TableChild)(w1[w30]));
                    w31.BottomAttach = ((uint)(4));
                    w31.TopAttach = ((uint)(3));
                    w31.YOptions = ((Gtk.AttachOptions)(0));
                    w31.XOptions = ((Gtk.AttachOptions)(4));
                    // Container child table1.Gtk.Table+TableChild
                    Gtk.Label w32 = new Gtk.Label();
                    w32.LabelProp = "Url:";
                    w32.Xalign = 0F;
                    w32.Events = ((Gdk.EventMask)(0));
                    w32.Name = "label4";
                    bindings["label4"] = w32;
                    w1.Add(w32);
                    Gtk.Table.TableChild w33 = ((Gtk.Table.TableChild)(w1[w32]));
                    w33.YOptions = ((Gtk.AttachOptions)(0));
                    w33.XOptions = ((Gtk.AttachOptions)(4));
                    // Container child table1.Gtk.Table+TableChild
                    Gtk.HBox w34 = new Gtk.HBox();
                    w34.Events = ((Gdk.EventMask)(0));
                    w34.Name = "hbox1";
                    // Container child hbox1.Gtk.Box+BoxChild
                    Gtk.ComboBox w35 = Gtk.ComboBox.NewText();
                    w35.Active = 0;
                    w35.Events = ((Gdk.EventMask)(0));
                    w35.Name = "comboProtocol";
                    bindings["comboProtocol"] = w35;
                    w34.Add(w35);
                    Gtk.Box.BoxChild w36 = ((Gtk.Box.BoxChild)(w34[w35]));
                    w36.Position = 0;
                    w36.Expand = false;
                    w36.Fill = false;
                    bindings["hbox1"] = w34;
                    w1.Add(w34);
                    Gtk.Table.TableChild w37 = ((Gtk.Table.TableChild)(w1[w34]));
                    w37.BottomAttach = ((uint)(3));
                    w37.LeftAttach = ((uint)(1));
                    w37.RightAttach = ((uint)(2));
                    w37.TopAttach = ((uint)(2));
                    w37.YOptions = ((Gtk.AttachOptions)(4));
                    w37.XOptions = ((Gtk.AttachOptions)(4));
                    bindings["table1"] = w1;
                    cobj.Add(w1);
                    bindings["VersionControl.Service.UrlBasedRepositoryEditor"] = cobj;
                    w3.Show();
                    w2.Show();
                    w6.Show();
                    w8.Show();
                    w10.Show();
                    w12.Show();
                    w14.Show();
                    w16.Show();
                    w18.Show();
                    w20.Show();
                    w22.Show();
                    w24.Show();
                    w26.Show();
                    w28.Show();
                    w30.Show();
                    w32.Show();
                    w35.Show();
                    w34.Show();
                    w1.Show();
                    cobj.Show();
                    w3.Changed += ((System.EventHandler)(System.Delegate.CreateDelegate(typeof(System.EventHandler), cobj, "OnRepositoryPortSpinChanged")));
                    w12.Changed += ((System.EventHandler)(System.Delegate.CreateDelegate(typeof(System.EventHandler), cobj, "OnRepositoryPassEntryChanged")));
                    w14.Changed += ((System.EventHandler)(System.Delegate.CreateDelegate(typeof(System.EventHandler), cobj, "OnRepositoryUserEntryChanged")));
                    w16.Changed += ((System.EventHandler)(System.Delegate.CreateDelegate(typeof(System.EventHandler), cobj, "OnRepositoryPathEntryChanged")));
                    w18.Changed += ((System.EventHandler)(System.Delegate.CreateDelegate(typeof(System.EventHandler), cobj, "OnRepositoryServerEntryChanged")));
                    w20.Changed += ((System.EventHandler)(System.Delegate.CreateDelegate(typeof(System.EventHandler), cobj, "OnRepositoryUrlEntryChanged")));
                    w35.Changed += ((System.EventHandler)(System.Delegate.CreateDelegate(typeof(System.EventHandler), cobj, "OnComboProtocolChanged")));
                }
            }
            System.Reflection.FieldInfo[] fields = obj.GetType().GetFields(((System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.NonPublic) | System.Reflection.BindingFlags.Instance));
            for (int n = 0; (n < fields.Length); n = (n + 1)) {
                System.Reflection.FieldInfo field = fields[n];
                object widget = bindings[field.Name];
                if (((widget != null) && field.FieldType.IsInstanceOfType(widget))) {
                    field.SetValue(obj, widget);
                }
            }
        }
    }
    
    internal class BinContainer {
        
        private Gtk.Widget child;
        
        private Gtk.UIManager uimanager;
        
        public static BinContainer Attach(Gtk.Bin bin) {
            BinContainer bc = new BinContainer();
            bin.SizeRequested += new Gtk.SizeRequestedHandler(bc.OnSizeRequested);
            bin.SizeAllocated += new Gtk.SizeAllocatedHandler(bc.OnSizeAllocated);
            bin.Added += new Gtk.AddedHandler(bc.OnAdded);
            return bc;
        }
        
        private void OnSizeRequested(object sender, Gtk.SizeRequestedArgs args) {
            if ((this.child != null)) {
                args.Requisition = this.child.SizeRequest();
            }
        }
        
        private void OnSizeAllocated(object sender, Gtk.SizeAllocatedArgs args) {
            if ((this.child != null)) {
                this.child.Allocation = args.Allocation;
            }
        }
        
        private void OnAdded(object sender, Gtk.AddedArgs args) {
            this.child = args.Widget;
        }
        
        public void SetUiManager(Gtk.UIManager uim) {
            this.uimanager = uim;
            this.child.Realized += new System.EventHandler(this.OnRealized);
        }
        
        private void OnRealized(object sender, System.EventArgs args) {
            if ((this.uimanager != null)) {
                Gtk.Widget w;
                w = this.child.Toplevel;
                if (((w != null) && typeof(Gtk.Window).IsInstanceOfType(w))) {
                    ((Gtk.Window)(w)).AddAccelGroup(this.uimanager.AccelGroup);
                    this.uimanager = null;
                }
            }
        }
    }
    
    internal class ActionGroups {
        
        public static Gtk.ActionGroup GetActionGroup(System.Type type) {
            return Stetic.ActionGroups.GetActionGroup(type.FullName);
        }
        
        public static Gtk.ActionGroup GetActionGroup(string name) {
            return null;
        }
    }
}
