// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 2.0.50727.42
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------

namespace Stetic {
    
    
    internal class Gui {
        
        private static bool initialized;
        
        public static void Build(object obj, System.Type type) {
            Stetic.Gui.Build(obj, type.FullName);
        }
        
        public static void Build(object obj, string id) {
            if ((Stetic.Gui.initialized == false)) {
                Stetic.Gui.Initialize();
            }
            System.Collections.Hashtable bindings = new System.Collections.Hashtable();
            if ((id == "MonoDevelop.VersionControl.Dialogs.CommitDialog")) {
                Gtk.Dialog cobj = ((Gtk.Dialog)(obj));
                // Widget MonoDevelop.VersionControl.Dialogs.CommitDialog
                cobj.Title = Mono.Unix.Catalog.GetString("Commit Files");
                cobj.WindowPosition = ((Gtk.WindowPosition)(4));
                cobj.HasSeparator = false;
                cobj.Events = ((Gdk.EventMask)(256));
                cobj.Name = "MonoDevelop.VersionControl.Dialogs.CommitDialog";
                // Internal child MonoDevelop.VersionControl.Dialogs.CommitDialog.VBox
                Gtk.VBox w1 = cobj.VBox;
                w1.BorderWidth = ((uint)(2));
                w1.Events = ((Gdk.EventMask)(256));
                w1.Name = "dialog_VBox";
                // Container child dialog_VBox.Gtk.Box+BoxChild
                Gtk.VBox w2 = new Gtk.VBox();
                w2.Spacing = 6;
                w2.BorderWidth = ((uint)(12));
                w2.Events = ((Gdk.EventMask)(0));
                w2.Name = "mainBox";
                // Container child mainBox.Gtk.Box+BoxChild
                Gtk.Label w3 = new Gtk.Label();
                w3.LabelProp = Mono.Unix.Catalog.GetString("Select the files to commit:");
                w3.Xalign = 0F;
                w3.Events = ((Gdk.EventMask)(0));
                w3.Name = "label1";
                bindings["label1"] = w3;
                w2.Add(w3);
                Gtk.Box.BoxChild w4 = ((Gtk.Box.BoxChild)(w2[w3]));
                w4.Position = 0;
                w4.Expand = false;
                w4.Fill = false;
                // Container child mainBox.Gtk.Box+BoxChild
                Gtk.ScrolledWindow w5 = new Gtk.ScrolledWindow();
                w5.VscrollbarPolicy = ((Gtk.PolicyType)(1));
                w5.HscrollbarPolicy = ((Gtk.PolicyType)(1));
                w5.ShadowType = ((Gtk.ShadowType)(1));
                w5.CanFocus = true;
                w5.Events = ((Gdk.EventMask)(0));
                w5.Name = "scrolledwindow1";
                // Container child scrolledwindow1.Gtk.Container+ContainerChild
                Gtk.TreeView w6 = new Gtk.TreeView();
                w6.CanFocus = true;
                w6.Events = ((Gdk.EventMask)(0));
                w6.Name = "fileList";
                bindings["fileList"] = w6;
                w5.Add(w6);
                bindings["scrolledwindow1"] = w5;
                w2.Add(w5);
                Gtk.Box.BoxChild w8 = ((Gtk.Box.BoxChild)(w2[w5]));
                w8.Position = 1;
                // Container child mainBox.Gtk.Box+BoxChild
                Gtk.VBox w9 = new Gtk.VBox();
                w9.Events = ((Gdk.EventMask)(0));
                w9.Name = "vboxExtensions";
                bindings["vboxExtensions"] = w9;
                w2.Add(w9);
                Gtk.Box.BoxChild w10 = ((Gtk.Box.BoxChild)(w2[w9]));
                w10.PackType = ((Gtk.PackType)(1));
                w10.Position = 2;
                w10.Expand = false;
                w10.Fill = false;
                // Container child mainBox.Gtk.Box+BoxChild
                Gtk.ScrolledWindow w11 = new Gtk.ScrolledWindow();
                w11.VscrollbarPolicy = ((Gtk.PolicyType)(1));
                w11.HscrollbarPolicy = ((Gtk.PolicyType)(1));
                w11.ShadowType = ((Gtk.ShadowType)(1));
                w11.CanFocus = true;
                w11.Events = ((Gdk.EventMask)(0));
                w11.Name = "scrolledwindow2";
                // Container child scrolledwindow2.Gtk.Container+ContainerChild
                Gtk.TextView w12 = new Gtk.TextView();
                w12.CanFocus = true;
                w12.Events = ((Gdk.EventMask)(0));
                w12.Name = "textview";
                bindings["textview"] = w12;
                w11.Add(w12);
                bindings["scrolledwindow2"] = w11;
                w2.Add(w11);
                Gtk.Box.BoxChild w14 = ((Gtk.Box.BoxChild)(w2[w11]));
                w14.PackType = ((Gtk.PackType)(1));
                w14.Position = 3;
                w14.Expand = false;
                w14.Fill = false;
                // Container child mainBox.Gtk.Box+BoxChild
                Gtk.Label w15 = new Gtk.Label();
                w15.LabelProp = Mono.Unix.Catalog.GetString("Commit message:");
                w15.Xalign = 0F;
                w15.Events = ((Gdk.EventMask)(0));
                w15.Name = "label2";
                bindings["label2"] = w15;
                w2.Add(w15);
                Gtk.Box.BoxChild w16 = ((Gtk.Box.BoxChild)(w2[w15]));
                w16.PackType = ((Gtk.PackType)(1));
                w16.Position = 4;
                w16.Expand = false;
                w16.Fill = false;
                bindings["mainBox"] = w2;
                w1.Add(w2);
                Gtk.Box.BoxChild w17 = ((Gtk.Box.BoxChild)(w1[w2]));
                w17.Position = 0;
                bindings["dialog_VBox"] = w1;
                // Internal child MonoDevelop.VersionControl.Dialogs.CommitDialog.ActionArea
                Gtk.HButtonBox w18 = cobj.ActionArea;
                w18.LayoutStyle = ((Gtk.ButtonBoxStyle)(4));
                w18.Spacing = 10;
                w18.BorderWidth = ((uint)(5));
                w18.Events = ((Gdk.EventMask)(256));
                w18.Name = "VersionControlAddIn.CommitDialog_ActionArea";
                // Container child VersionControlAddIn.CommitDialog_ActionArea.Gtk.ButtonBox+ButtonBoxChild
                Gtk.Button w19 = new Gtk.Button();
                w19.UseStock = true;
                w19.UseUnderline = true;
                w19.CanDefault = true;
                w19.CanFocus = true;
                w19.Events = ((Gdk.EventMask)(0));
                w19.Name = "button29";
                w19.Label = Mono.Unix.Catalog.GetString("gtk-cancel");
                bindings["button29"] = w19;
                cobj.AddActionWidget(w19, -6);
                Gtk.ButtonBox.ButtonBoxChild w20 = ((Gtk.ButtonBox.ButtonBoxChild)(w18[w19]));
                w20.Expand = false;
                w20.Fill = false;
                // Container child VersionControlAddIn.CommitDialog_ActionArea.Gtk.ButtonBox+ButtonBoxChild
                Gtk.Button w21 = new Gtk.Button();
                w21.UseStock = true;
                w21.UseUnderline = true;
                w21.CanDefault = true;
                w21.CanFocus = true;
                w21.Events = ((Gdk.EventMask)(0));
                w21.Name = "button31";
                w21.Label = Mono.Unix.Catalog.GetString("gtk-ok");
                bindings["button31"] = w21;
                cobj.AddActionWidget(w21, -5);
                Gtk.ButtonBox.ButtonBoxChild w22 = ((Gtk.ButtonBox.ButtonBoxChild)(w18[w21]));
                w22.Position = 1;
                w22.Expand = false;
                w22.Fill = false;
                bindings["VersionControlAddIn.CommitDialog_ActionArea"] = w18;
                cobj.DefaultWidth = 628;
                cobj.DefaultHeight = 481;
                bindings["MonoDevelop.VersionControl.Dialogs.CommitDialog"] = cobj;
                w3.Show();
                w6.Show();
                w5.Show();
                w9.Show();
                w12.Show();
                w11.Show();
                w15.Show();
                w2.Show();
                w1.Show();
                w19.Show();
                w21.Show();
                w18.Show();
                cobj.Show();
            }
            else {
                if ((id == "MonoDevelop.VersionControl.Dialogs.SelectRepositoryDialog")) {
                    Gtk.Dialog cobj = ((Gtk.Dialog)(obj));
                    // Widget MonoDevelop.VersionControl.Dialogs.SelectRepositoryDialog
                    cobj.Title = Mono.Unix.Catalog.GetString("Select Repository");
                    cobj.WindowPosition = ((Gtk.WindowPosition)(4));
                    cobj.HasSeparator = false;
                    cobj.Events = ((Gdk.EventMask)(256));
                    cobj.Name = "MonoDevelop.VersionControl.Dialogs.SelectRepositoryDialog";
                    // Internal child MonoDevelop.VersionControl.Dialogs.SelectRepositoryDialog.VBox
                    Gtk.VBox w1 = cobj.VBox;
                    w1.BorderWidth = ((uint)(2));
                    w1.Events = ((Gdk.EventMask)(256));
                    w1.Name = "dialog_VBox";
                    // Container child dialog_VBox.Gtk.Box+BoxChild
                    Gtk.VBox w2 = new Gtk.VBox();
                    w2.Spacing = 12;
                    w2.BorderWidth = ((uint)(9));
                    w2.Events = ((Gdk.EventMask)(0));
                    w2.Name = "vbox1";
                    // Container child vbox1.Gtk.Box+BoxChild
                    Gtk.Notebook w3 = new Gtk.Notebook();
                    w3.CanFocus = true;
                    w3.Events = ((Gdk.EventMask)(0));
                    w3.Name = "notebook";
                    // Container child notebook.Gtk.Notebook+NotebookChild
                    Gtk.VBox w4 = new Gtk.VBox();
                    w4.Spacing = 6;
                    w4.BorderWidth = ((uint)(6));
                    w4.Events = ((Gdk.EventMask)(0));
                    w4.Name = "vbox2";
                    // Container child vbox2.Gtk.Box+BoxChild
                    Gtk.HBox w5 = new Gtk.HBox();
                    w5.Spacing = 6;
                    w5.Events = ((Gdk.EventMask)(0));
                    w5.Name = "hbox1";
                    // Container child hbox1.Gtk.Box+BoxChild
                    Gtk.Label w6 = new Gtk.Label();
                    w6.LabelProp = Mono.Unix.Catalog.GetString("Type:");
                    w6.Events = ((Gdk.EventMask)(0));
                    w6.Name = "label3";
                    bindings["label3"] = w6;
                    w5.Add(w6);
                    Gtk.Box.BoxChild w7 = ((Gtk.Box.BoxChild)(w5[w6]));
                    w7.Position = 0;
                    w7.Expand = false;
                    w7.Fill = false;
                    // Container child hbox1.Gtk.Box+BoxChild
                    Gtk.ComboBox w8 = Gtk.ComboBox.NewText();
                    w8.Active = 0;
                    w8.Events = ((Gdk.EventMask)(0));
                    w8.Name = "repCombo";
                    bindings["repCombo"] = w8;
                    w5.Add(w8);
                    Gtk.Box.BoxChild w9 = ((Gtk.Box.BoxChild)(w5[w8]));
                    w9.Position = 1;
                    bindings["hbox1"] = w5;
                    w4.Add(w5);
                    Gtk.Box.BoxChild w10 = ((Gtk.Box.BoxChild)(w4[w5]));
                    w10.Position = 0;
                    w10.Expand = false;
                    w10.Fill = false;
                    // Container child vbox2.Gtk.Box+BoxChild
                    Gtk.HSeparator w11 = new Gtk.HSeparator();
                    w11.Events = ((Gdk.EventMask)(0));
                    w11.Name = "hseparator1";
                    bindings["hseparator1"] = w11;
                    w4.Add(w11);
                    Gtk.Box.BoxChild w12 = ((Gtk.Box.BoxChild)(w4[w11]));
                    w12.Position = 1;
                    w12.Expand = false;
                    w12.Fill = false;
                    // Container child vbox2.Gtk.Box+BoxChild
                    Gtk.EventBox w13 = new Gtk.EventBox();
                    w13.Events = ((Gdk.EventMask)(0));
                    w13.Name = "repoContainer";
                    bindings["repoContainer"] = w13;
                    w4.Add(w13);
                    Gtk.Box.BoxChild w14 = ((Gtk.Box.BoxChild)(w4[w13]));
                    w14.Position = 2;
                    bindings["vbox2"] = w4;
                    w3.Add(w4);
                    Gtk.Notebook.NotebookChild w15 = ((Gtk.Notebook.NotebookChild)(w3[w4]));
                    w15.TabExpand = false;
                    // Notebook tab
                    Gtk.Label w16 = new Gtk.Label();
                    w16.LabelProp = Mono.Unix.Catalog.GetString("Connect to Repository");
                    w16.Events = ((Gdk.EventMask)(0));
                    w16.Name = "label1";
                    bindings["label1"] = w16;
                    w3.SetTabLabel(w4, w16);
                    // Container child notebook.Gtk.Notebook+NotebookChild
                    Gtk.HBox w17 = new Gtk.HBox();
                    w17.Spacing = 6;
                    w17.BorderWidth = ((uint)(6));
                    w17.Events = ((Gdk.EventMask)(0));
                    w17.Name = "hbox2";
                    // Container child hbox2.Gtk.Box+BoxChild
                    Gtk.ScrolledWindow w18 = new Gtk.ScrolledWindow();
                    w18.VscrollbarPolicy = ((Gtk.PolicyType)(1));
                    w18.HscrollbarPolicy = ((Gtk.PolicyType)(1));
                    w18.ShadowType = ((Gtk.ShadowType)(1));
                    w18.CanFocus = true;
                    w18.Events = ((Gdk.EventMask)(0));
                    w18.Name = "scrolledwindow2";
                    // Container child scrolledwindow2.Gtk.Container+ContainerChild
                    Gtk.TreeView w19 = new Gtk.TreeView();
                    w19.CanFocus = true;
                    w19.Events = ((Gdk.EventMask)(0));
                    w19.Name = "repoTree";
                    bindings["repoTree"] = w19;
                    w18.Add(w19);
                    bindings["scrolledwindow2"] = w18;
                    w17.Add(w18);
                    Gtk.Box.BoxChild w21 = ((Gtk.Box.BoxChild)(w17[w18]));
                    w21.Position = 0;
                    // Container child hbox2.Gtk.Box+BoxChild
                    Gtk.VButtonBox w22 = new Gtk.VButtonBox();
                    w22.LayoutStyle = ((Gtk.ButtonBoxStyle)(3));
                    w22.Spacing = 6;
                    w22.Events = ((Gdk.EventMask)(0));
                    w22.Name = "vbuttonbox1";
                    // Container child vbuttonbox1.Gtk.ButtonBox+ButtonBoxChild
                    Gtk.Button w23 = new Gtk.Button();
                    w23.UseStock = true;
                    w23.UseUnderline = true;
                    w23.CanFocus = true;
                    w23.Events = ((Gdk.EventMask)(0));
                    w23.Name = "buttonAdd";
                    w23.Label = Mono.Unix.Catalog.GetString("gtk-add");
                    bindings["buttonAdd"] = w23;
                    w22.Add(w23);
                    Gtk.ButtonBox.ButtonBoxChild w24 = ((Gtk.ButtonBox.ButtonBoxChild)(w22[w23]));
                    w24.Expand = false;
                    w24.Fill = false;
                    // Container child vbuttonbox1.Gtk.ButtonBox+ButtonBoxChild
                    Gtk.Button w25 = new Gtk.Button();
                    w25.UseStock = true;
                    w25.UseUnderline = true;
                    w25.CanFocus = true;
                    w25.Events = ((Gdk.EventMask)(0));
                    w25.Name = "buttonRemove";
                    w25.Label = Mono.Unix.Catalog.GetString("gtk-remove");
                    bindings["buttonRemove"] = w25;
                    w22.Add(w25);
                    Gtk.ButtonBox.ButtonBoxChild w26 = ((Gtk.ButtonBox.ButtonBoxChild)(w22[w25]));
                    w26.Position = 1;
                    w26.Expand = false;
                    w26.Fill = false;
                    // Container child vbuttonbox1.Gtk.ButtonBox+ButtonBoxChild
                    Gtk.Button w27 = new Gtk.Button();
                    w27.UseStock = true;
                    w27.UseUnderline = true;
                    w27.CanFocus = true;
                    w27.Events = ((Gdk.EventMask)(0));
                    w27.Name = "buttonEdit";
                    w27.Label = Mono.Unix.Catalog.GetString("gtk-edit");
                    bindings["buttonEdit"] = w27;
                    w22.Add(w27);
                    Gtk.ButtonBox.ButtonBoxChild w28 = ((Gtk.ButtonBox.ButtonBoxChild)(w22[w27]));
                    w28.Position = 2;
                    w28.Expand = false;
                    w28.Fill = false;
                    bindings["vbuttonbox1"] = w22;
                    w17.Add(w22);
                    Gtk.Box.BoxChild w29 = ((Gtk.Box.BoxChild)(w17[w22]));
                    w29.Position = 1;
                    w29.Expand = false;
                    w29.Fill = false;
                    bindings["hbox2"] = w17;
                    w3.Add(w17);
                    Gtk.Notebook.NotebookChild w30 = ((Gtk.Notebook.NotebookChild)(w3[w17]));
                    w30.Position = 1;
                    w30.TabExpand = false;
                    // Notebook tab
                    Gtk.Label w31 = new Gtk.Label();
                    w31.LabelProp = Mono.Unix.Catalog.GetString("Registered Repositories");
                    w31.Events = ((Gdk.EventMask)(0));
                    w31.Name = "label2";
                    bindings["label2"] = w31;
                    w3.SetTabLabel(w17, w31);
                    bindings["notebook"] = w3;
                    w2.Add(w3);
                    Gtk.Box.BoxChild w32 = ((Gtk.Box.BoxChild)(w2[w3]));
                    w32.Position = 0;
                    // Container child vbox1.Gtk.Box+BoxChild
                    Gtk.Table w33 = new Gtk.Table(((uint)(4)), ((uint)(2)), false);
                    w33.RowSpacing = ((uint)(6));
                    w33.ColumnSpacing = ((uint)(6));
                    w33.Events = ((Gdk.EventMask)(0));
                    w33.Name = "table1";
                    // Container child table1.Gtk.Table+TableChild
                    Gtk.Label w34 = new Gtk.Label();
                    w34.LabelProp = Mono.Unix.Catalog.GetString("Repository:");
                    w34.Xalign = 0F;
                    w34.Events = ((Gdk.EventMask)(0));
                    w34.Name = "label5";
                    bindings["label5"] = w34;
                    w33.Add(w34);
                    Gtk.Table.TableChild w35 = ((Gtk.Table.TableChild)(w33[w34]));
                    w35.XOptions = ((Gtk.AttachOptions)(4));
                    w35.YOptions = ((Gtk.AttachOptions)(4));
                    // Container child table1.Gtk.Table+TableChild
                    Gtk.Label w36 = new Gtk.Label();
                    w36.LabelProp = Mono.Unix.Catalog.GetString("Target directory:");
                    w36.Xalign = 0F;
                    w36.Events = ((Gdk.EventMask)(0));
                    w36.Name = "labelTargetDir";
                    bindings["labelTargetDir"] = w36;
                    w33.Add(w36);
                    Gtk.Table.TableChild w37 = ((Gtk.Table.TableChild)(w33[w36]));
                    w37.TopAttach = ((uint)(1));
                    w37.BottomAttach = ((uint)(2));
                    w37.XOptions = ((Gtk.AttachOptions)(4));
                    w37.YOptions = ((Gtk.AttachOptions)(4));
                    // Container child table1.Gtk.Table+TableChild
                    Gtk.HBox w38 = new Gtk.HBox();
                    w38.Spacing = 6;
                    w38.Events = ((Gdk.EventMask)(0));
                    w38.Name = "boxFolder";
                    // Container child boxFolder.Gtk.Box+BoxChild
                    Gtk.Entry w39 = new Gtk.Entry();
                    w39.IsEditable = true;
                    w39.InvisibleChar = '●';
                    w39.CanFocus = true;
                    w39.Events = ((Gdk.EventMask)(0));
                    w39.Name = "entryFolder";
                    bindings["entryFolder"] = w39;
                    w38.Add(w39);
                    Gtk.Box.BoxChild w40 = ((Gtk.Box.BoxChild)(w38[w39]));
                    w40.Position = 0;
                    // Container child boxFolder.Gtk.Box+BoxChild
                    Gtk.Button w41 = new Gtk.Button();
                    w41.CanFocus = true;
                    w41.Events = ((Gdk.EventMask)(0));
                    w41.Name = "buttonBrowse";
                    w41.Label = Mono.Unix.Catalog.GetString("Browse...");
                    bindings["buttonBrowse"] = w41;
                    w38.Add(w41);
                    Gtk.Box.BoxChild w42 = ((Gtk.Box.BoxChild)(w38[w41]));
                    w42.Position = 1;
                    w42.Expand = false;
                    w42.Fill = false;
                    bindings["boxFolder"] = w38;
                    w33.Add(w38);
                    Gtk.Table.TableChild w43 = ((Gtk.Table.TableChild)(w33[w38]));
                    w43.TopAttach = ((uint)(1));
                    w43.BottomAttach = ((uint)(2));
                    w43.LeftAttach = ((uint)(1));
                    w43.RightAttach = ((uint)(2));
                    w43.XOptions = ((Gtk.AttachOptions)(4));
                    w43.YOptions = ((Gtk.AttachOptions)(4));
                    // Container child table1.Gtk.Table+TableChild
                    Gtk.Label w44 = new Gtk.Label();
                    w44.LabelProp = Mono.Unix.Catalog.GetString("");
                    w44.Xalign = 0F;
                    w44.Events = ((Gdk.EventMask)(0));
                    w44.Name = "labelRepository";
                    bindings["labelRepository"] = w44;
                    w33.Add(w44);
                    Gtk.Table.TableChild w45 = ((Gtk.Table.TableChild)(w33[w44]));
                    w45.LeftAttach = ((uint)(1));
                    w45.RightAttach = ((uint)(2));
                    w45.YOptions = ((Gtk.AttachOptions)(4));
                    // Container child table1.Gtk.Table+TableChild
                    Gtk.Label w46 = new Gtk.Label();
                    w46.LabelProp = Mono.Unix.Catalog.GetString("Module name:");
                    w46.Xalign = 0F;
                    w46.Events = ((Gdk.EventMask)(0));
                    w46.Name = "labelName";
                    bindings["labelName"] = w46;
                    w33.Add(w46);
                    Gtk.Table.TableChild w47 = ((Gtk.Table.TableChild)(w33[w46]));
                    w47.TopAttach = ((uint)(2));
                    w47.BottomAttach = ((uint)(3));
                    w47.XOptions = ((Gtk.AttachOptions)(4));
                    w47.YOptions = ((Gtk.AttachOptions)(4));
                    // Container child table1.Gtk.Table+TableChild
                    Gtk.Entry w48 = new Gtk.Entry();
                    w48.IsEditable = true;
                    w48.InvisibleChar = '●';
                    w48.CanFocus = true;
                    w48.Events = ((Gdk.EventMask)(0));
                    w48.Name = "entryName";
                    bindings["entryName"] = w48;
                    w33.Add(w48);
                    Gtk.Table.TableChild w49 = ((Gtk.Table.TableChild)(w33[w48]));
                    w49.TopAttach = ((uint)(2));
                    w49.BottomAttach = ((uint)(3));
                    w49.LeftAttach = ((uint)(1));
                    w49.RightAttach = ((uint)(2));
                    w49.XOptions = ((Gtk.AttachOptions)(4));
                    w49.YOptions = ((Gtk.AttachOptions)(4));
                    // Container child table1.Gtk.Table+TableChild
                    Gtk.Label w50 = new Gtk.Label();
                    w50.LabelProp = Mono.Unix.Catalog.GetString("Message:");
                    w50.Xalign = 0F;
                    w50.Events = ((Gdk.EventMask)(0));
                    w50.Name = "labelMessage";
                    bindings["labelMessage"] = w50;
                    w33.Add(w50);
                    Gtk.Table.TableChild w51 = ((Gtk.Table.TableChild)(w33[w50]));
                    w51.TopAttach = ((uint)(3));
                    w51.BottomAttach = ((uint)(4));
                    w51.XOptions = ((Gtk.AttachOptions)(4));
                    w51.YOptions = ((Gtk.AttachOptions)(4));
                    // Container child table1.Gtk.Table+TableChild
                    Gtk.HBox w52 = new Gtk.HBox();
                    w52.Spacing = 6;
                    w52.Events = ((Gdk.EventMask)(0));
                    w52.Name = "boxMessage";
                    // Container child boxMessage.Gtk.Box+BoxChild
                    Gtk.Entry w53 = new Gtk.Entry();
                    w53.IsEditable = true;
                    w53.InvisibleChar = '●';
                    w53.CanFocus = true;
                    w53.Events = ((Gdk.EventMask)(0));
                    w53.Name = "entryMessage";
                    bindings["entryMessage"] = w53;
                    w52.Add(w53);
                    Gtk.Box.BoxChild w54 = ((Gtk.Box.BoxChild)(w52[w53]));
                    w54.Position = 0;
                    // Container child boxMessage.Gtk.Box+BoxChild
                    Gtk.Button w55 = new Gtk.Button();
                    w55.UseStock = true;
                    w55.UseUnderline = true;
                    w55.CanFocus = true;
                    w55.Events = ((Gdk.EventMask)(0));
                    w55.Name = "buttonEditMessage";
                    w55.Label = Mono.Unix.Catalog.GetString("gtk-edit");
                    bindings["buttonEditMessage"] = w55;
                    w52.Add(w55);
                    Gtk.Box.BoxChild w56 = ((Gtk.Box.BoxChild)(w52[w55]));
                    w56.Position = 1;
                    w56.Expand = false;
                    w56.Fill = false;
                    bindings["boxMessage"] = w52;
                    w33.Add(w52);
                    Gtk.Table.TableChild w57 = ((Gtk.Table.TableChild)(w33[w52]));
                    w57.TopAttach = ((uint)(3));
                    w57.BottomAttach = ((uint)(4));
                    w57.LeftAttach = ((uint)(1));
                    w57.RightAttach = ((uint)(2));
                    w57.XOptions = ((Gtk.AttachOptions)(4));
                    w57.YOptions = ((Gtk.AttachOptions)(4));
                    bindings["table1"] = w33;
                    w2.Add(w33);
                    Gtk.Box.BoxChild w58 = ((Gtk.Box.BoxChild)(w2[w33]));
                    w58.Position = 1;
                    w58.Expand = false;
                    w58.Fill = false;
                    bindings["vbox1"] = w2;
                    w1.Add(w2);
                    Gtk.Box.BoxChild w59 = ((Gtk.Box.BoxChild)(w1[w2]));
                    w59.Position = 0;
                    bindings["dialog_VBox"] = w1;
                    // Internal child MonoDevelop.VersionControl.Dialogs.SelectRepositoryDialog.ActionArea
                    Gtk.HButtonBox w60 = cobj.ActionArea;
                    w60.LayoutStyle = ((Gtk.ButtonBoxStyle)(4));
                    w60.Spacing = 10;
                    w60.BorderWidth = ((uint)(5));
                    w60.Events = ((Gdk.EventMask)(256));
                    w60.Name = "VersionControlAddIn.SelectRepositoryDialog_ActionArea";
                    // Container child VersionControlAddIn.SelectRepositoryDialog_ActionArea.Gtk.ButtonBox+ButtonBoxChild
                    Gtk.Button w61 = new Gtk.Button();
                    w61.UseStock = true;
                    w61.UseUnderline = true;
                    w61.CanDefault = true;
                    w61.CanFocus = true;
                    w61.Events = ((Gdk.EventMask)(0));
                    w61.Name = "button559";
                    w61.Label = Mono.Unix.Catalog.GetString("gtk-cancel");
                    bindings["button559"] = w61;
                    cobj.AddActionWidget(w61, -6);
                    Gtk.ButtonBox.ButtonBoxChild w62 = ((Gtk.ButtonBox.ButtonBoxChild)(w60[w61]));
                    w62.Expand = false;
                    w62.Fill = false;
                    // Container child VersionControlAddIn.SelectRepositoryDialog_ActionArea.Gtk.ButtonBox+ButtonBoxChild
                    Gtk.Button w63 = new Gtk.Button();
                    w63.UseStock = true;
                    w63.UseUnderline = true;
                    w63.CanDefault = true;
                    w63.CanFocus = true;
                    w63.Events = ((Gdk.EventMask)(0));
                    w63.Name = "buttonOk";
                    w63.Label = Mono.Unix.Catalog.GetString("gtk-ok");
                    bindings["buttonOk"] = w63;
                    cobj.AddActionWidget(w63, -5);
                    Gtk.ButtonBox.ButtonBoxChild w64 = ((Gtk.ButtonBox.ButtonBoxChild)(w60[w63]));
                    w64.Position = 1;
                    w64.Expand = false;
                    w64.Fill = false;
                    bindings["VersionControlAddIn.SelectRepositoryDialog_ActionArea"] = w60;
                    cobj.DefaultWidth = 617;
                    cobj.DefaultHeight = 438;
                    bindings["MonoDevelop.VersionControl.Dialogs.SelectRepositoryDialog"] = cobj;
                    w6.Show();
                    w8.Show();
                    w5.Show();
                    w11.Show();
                    w13.Show();
                    w4.Show();
                    w16.Show();
                    w19.Show();
                    w18.Show();
                    w23.Show();
                    w25.Show();
                    w27.Show();
                    w22.Show();
                    w17.Show();
                    w31.Show();
                    w3.Show();
                    w34.Show();
                    w36.Show();
                    w39.Show();
                    w41.Show();
                    w38.Show();
                    w44.Show();
                    w46.Show();
                    w48.Show();
                    w50.Show();
                    w53.Show();
                    w55.Show();
                    w52.Show();
                    w33.Show();
                    w2.Show();
                    w1.Show();
                    w61.Show();
                    w63.Show();
                    w60.Show();
                    cobj.Show();
                    w3.ChangeCurrentPage += ((Gtk.ChangeCurrentPageHandler)(System.Delegate.CreateDelegate(typeof(Gtk.ChangeCurrentPageHandler), cobj, "OnNotebookChangeCurrentPage")));
                    w8.Changed += ((System.EventHandler)(System.Delegate.CreateDelegate(typeof(System.EventHandler), cobj, "OnRepComboChanged")));
                    w19.CursorChanged += ((System.EventHandler)(System.Delegate.CreateDelegate(typeof(System.EventHandler), cobj, "OnRepoTreeCursorChanged")));
                    w23.Clicked += ((System.EventHandler)(System.Delegate.CreateDelegate(typeof(System.EventHandler), cobj, "OnButtonAddClicked")));
                    w25.Clicked += ((System.EventHandler)(System.Delegate.CreateDelegate(typeof(System.EventHandler), cobj, "OnButtonRemoveClicked")));
                    w27.Clicked += ((System.EventHandler)(System.Delegate.CreateDelegate(typeof(System.EventHandler), cobj, "OnButtonEditClicked")));
                    w39.Changed += ((System.EventHandler)(System.Delegate.CreateDelegate(typeof(System.EventHandler), cobj, "OnEntryFolderChanged")));
                    w41.Clicked += ((System.EventHandler)(System.Delegate.CreateDelegate(typeof(System.EventHandler), cobj, "OnButtonBrowseClicked")));
                }
                else {
                    if ((id == "MonoDevelop.VersionControl.Dialogs.EditRepositoryDialog")) {
                        Gtk.Dialog cobj = ((Gtk.Dialog)(obj));
                        // Widget MonoDevelop.VersionControl.Dialogs.EditRepositoryDialog
                        cobj.Title = Mono.Unix.Catalog.GetString("Repository Configuration");
                        cobj.WindowPosition = ((Gtk.WindowPosition)(4));
                        cobj.HasSeparator = false;
                        cobj.DefaultWidth = 500;
                        cobj.Events = ((Gdk.EventMask)(0));
                        cobj.Name = "MonoDevelop.VersionControl.Dialogs.EditRepositoryDialog";
                        // Internal child MonoDevelop.VersionControl.Dialogs.EditRepositoryDialog.VBox
                        Gtk.VBox w1 = cobj.VBox;
                        w1.BorderWidth = ((uint)(2));
                        w1.Events = ((Gdk.EventMask)(256));
                        w1.Name = "dialog-vbox3";
                        // Container child dialog-vbox3.Gtk.Box+BoxChild
                        Gtk.VBox w2 = new Gtk.VBox();
                        w2.Spacing = 6;
                        w2.BorderWidth = ((uint)(6));
                        w2.Events = ((Gdk.EventMask)(0));
                        w2.Name = "vbox1";
                        // Container child vbox1.Gtk.Box+BoxChild
                        Gtk.Table w3 = new Gtk.Table(((uint)(2)), ((uint)(2)), false);
                        w3.RowSpacing = ((uint)(6));
                        w3.ColumnSpacing = ((uint)(6));
                        w3.Events = ((Gdk.EventMask)(0));
                        w3.Name = "table1";
                        // Container child table1.Gtk.Table+TableChild
                        Gtk.Label w4 = new Gtk.Label();
                        w4.LabelProp = Mono.Unix.Catalog.GetString("Name:");
                        w4.Xalign = 0F;
                        w4.Events = ((Gdk.EventMask)(0));
                        w4.Name = "label8";
                        bindings["label8"] = w4;
                        w3.Add(w4);
                        Gtk.Table.TableChild w5 = ((Gtk.Table.TableChild)(w3[w4]));
                        w5.TopAttach = ((uint)(1));
                        w5.BottomAttach = ((uint)(2));
                        w5.XOptions = ((Gtk.AttachOptions)(4));
                        w5.YOptions = ((Gtk.AttachOptions)(0));
                        // Container child table1.Gtk.Table+TableChild
                        Gtk.Entry w6 = new Gtk.Entry();
                        w6.IsEditable = true;
                        w6.InvisibleChar = '●';
                        w6.CanFocus = true;
                        w6.Events = ((Gdk.EventMask)(0));
                        w6.Name = "entryName";
                        bindings["entryName"] = w6;
                        w3.Add(w6);
                        Gtk.Table.TableChild w7 = ((Gtk.Table.TableChild)(w3[w6]));
                        w7.TopAttach = ((uint)(1));
                        w7.BottomAttach = ((uint)(2));
                        w7.LeftAttach = ((uint)(1));
                        w7.RightAttach = ((uint)(2));
                        w7.YOptions = ((Gtk.AttachOptions)(0));
                        // Container child table1.Gtk.Table+TableChild
                        Gtk.Label w8 = new Gtk.Label();
                        w8.LabelProp = Mono.Unix.Catalog.GetString("Type:");
                        w8.Xalign = 0F;
                        w8.Events = ((Gdk.EventMask)(0));
                        w8.Name = "label11";
                        bindings["label11"] = w8;
                        w3.Add(w8);
                        Gtk.Table.TableChild w9 = ((Gtk.Table.TableChild)(w3[w8]));
                        w9.XOptions = ((Gtk.AttachOptions)(4));
                        w9.YOptions = ((Gtk.AttachOptions)(0));
                        // Container child table1.Gtk.Table+TableChild
                        Gtk.ComboBox w10 = Gtk.ComboBox.NewText();
                        w10.Events = ((Gdk.EventMask)(0));
                        w10.Name = "versionControlType";
                        bindings["versionControlType"] = w10;
                        w3.Add(w10);
                        Gtk.Table.TableChild w11 = ((Gtk.Table.TableChild)(w3[w10]));
                        w11.LeftAttach = ((uint)(1));
                        w11.RightAttach = ((uint)(2));
                        w11.XOptions = ((Gtk.AttachOptions)(4));
                        w11.YOptions = ((Gtk.AttachOptions)(4));
                        bindings["table1"] = w3;
                        w2.Add(w3);
                        Gtk.Box.BoxChild w12 = ((Gtk.Box.BoxChild)(w2[w3]));
                        w12.Position = 0;
                        w12.Expand = false;
                        w12.Fill = false;
                        // Container child vbox1.Gtk.Box+BoxChild
                        Gtk.HSeparator w13 = new Gtk.HSeparator();
                        w13.Events = ((Gdk.EventMask)(0));
                        w13.Name = "hseparator2";
                        bindings["hseparator2"] = w13;
                        w2.Add(w13);
                        Gtk.Box.BoxChild w14 = ((Gtk.Box.BoxChild)(w2[w13]));
                        w14.Position = 1;
                        w14.Expand = false;
                        w14.Fill = false;
                        // Container child vbox1.Gtk.Box+BoxChild
                        Gtk.EventBox w15 = new Gtk.EventBox();
                        w15.Events = ((Gdk.EventMask)(0));
                        w15.Name = "repoEditorContainer";
                        bindings["repoEditorContainer"] = w15;
                        w2.Add(w15);
                        Gtk.Box.BoxChild w16 = ((Gtk.Box.BoxChild)(w2[w15]));
                        w16.Position = 2;
                        bindings["vbox1"] = w2;
                        w1.Add(w2);
                        Gtk.Box.BoxChild w17 = ((Gtk.Box.BoxChild)(w1[w2]));
                        w17.Position = 0;
                        bindings["dialog-vbox3"] = w1;
                        // Internal child MonoDevelop.VersionControl.Dialogs.EditRepositoryDialog.ActionArea
                        Gtk.HButtonBox w18 = cobj.ActionArea;
                        w18.LayoutStyle = ((Gtk.ButtonBoxStyle)(4));
                        w18.Spacing = 10;
                        w18.BorderWidth = ((uint)(5));
                        w18.Events = ((Gdk.EventMask)(256));
                        w18.Name = "GtkDialog_ActionArea";
                        // Container child GtkDialog_ActionArea.Gtk.ButtonBox+ButtonBoxChild
                        Gtk.Button w19 = new Gtk.Button();
                        w19.UseStock = true;
                        w19.UseUnderline = true;
                        w19.CanDefault = true;
                        w19.CanFocus = true;
                        w19.Events = ((Gdk.EventMask)(0));
                        w19.Name = "button10";
                        w19.Label = Mono.Unix.Catalog.GetString("gtk-cancel");
                        bindings["button10"] = w19;
                        cobj.AddActionWidget(w19, -6);
                        Gtk.ButtonBox.ButtonBoxChild w20 = ((Gtk.ButtonBox.ButtonBoxChild)(w18[w19]));
                        w20.Expand = false;
                        w20.Fill = false;
                        // Container child GtkDialog_ActionArea.Gtk.ButtonBox+ButtonBoxChild
                        Gtk.Button w21 = new Gtk.Button();
                        w21.UseStock = true;
                        w21.UseUnderline = true;
                        w21.CanDefault = true;
                        w21.CanFocus = true;
                        w21.Events = ((Gdk.EventMask)(0));
                        w21.Name = "button24";
                        w21.Label = Mono.Unix.Catalog.GetString("gtk-ok");
                        bindings["button24"] = w21;
                        cobj.AddActionWidget(w21, -5);
                        Gtk.ButtonBox.ButtonBoxChild w22 = ((Gtk.ButtonBox.ButtonBoxChild)(w18[w21]));
                        w22.Position = 1;
                        w22.Expand = false;
                        w22.Fill = false;
                        bindings["GtkDialog_ActionArea"] = w18;
                        cobj.DefaultHeight = 414;
                        bindings["MonoDevelop.VersionControl.Dialogs.EditRepositoryDialog"] = cobj;
                        w4.Show();
                        w6.Show();
                        w8.Show();
                        w10.Show();
                        w3.Show();
                        w13.Show();
                        w15.Show();
                        w2.Show();
                        w1.Show();
                        w19.Show();
                        w21.Show();
                        w18.Show();
                        cobj.Show();
                        w6.Changed += ((System.EventHandler)(System.Delegate.CreateDelegate(typeof(System.EventHandler), cobj, "OnEntryNameChanged")));
                        w10.Changed += ((System.EventHandler)(System.Delegate.CreateDelegate(typeof(System.EventHandler), cobj, "OnVersionControlTypeChanged")));
                    }
                    else {
                        if ((id == "MonoDevelop.VersionControl.UrlBasedRepositoryEditor")) {
                            Gtk.Bin cobj = ((Gtk.Bin)(obj));
                            // Widget MonoDevelop.VersionControl.UrlBasedRepositoryEditor
                            BinContainer.Attach(cobj);
                            cobj.Events = ((Gdk.EventMask)(256));
                            cobj.Name = "MonoDevelop.VersionControl.UrlBasedRepositoryEditor";
                            // Container child MonoDevelop.VersionControl.UrlBasedRepositoryEditor.Gtk.Container+ContainerChild
                            Gtk.Table w1 = new Gtk.Table(((uint)(9)), ((uint)(2)), false);
                            w1.RowSpacing = ((uint)(6));
                            w1.ColumnSpacing = ((uint)(6));
                            w1.BorderWidth = ((uint)(12));
                            w1.Events = ((Gdk.EventMask)(0));
                            w1.Name = "table1";
                            // Container child table1.Gtk.Table+TableChild
                            Gtk.HBox w2 = new Gtk.HBox();
                            w2.Events = ((Gdk.EventMask)(0));
                            w2.Name = "hbox1";
                            // Container child hbox1.Gtk.Box+BoxChild
                            Gtk.ComboBox w3 = Gtk.ComboBox.NewText();
                            w3.Active = 0;
                            w3.Events = ((Gdk.EventMask)(0));
                            w3.Name = "comboProtocol";
                            bindings["comboProtocol"] = w3;
                            w2.Add(w3);
                            Gtk.Box.BoxChild w4 = ((Gtk.Box.BoxChild)(w2[w3]));
                            w4.Position = 0;
                            w4.Expand = false;
                            w4.Fill = false;
                            bindings["hbox1"] = w2;
                            w1.Add(w2);
                            Gtk.Table.TableChild w5 = ((Gtk.Table.TableChild)(w1[w2]));
                            w5.TopAttach = ((uint)(2));
                            w5.BottomAttach = ((uint)(3));
                            w5.LeftAttach = ((uint)(1));
                            w5.RightAttach = ((uint)(2));
                            w5.XOptions = ((Gtk.AttachOptions)(4));
                            w5.YOptions = ((Gtk.AttachOptions)(4));
                            // Container child table1.Gtk.Table+TableChild
                            Gtk.Label w6 = new Gtk.Label();
                            w6.LabelProp = Mono.Unix.Catalog.GetString("Url:");
                            w6.Xalign = 0F;
                            w6.Events = ((Gdk.EventMask)(0));
                            w6.Name = "label4";
                            bindings["label4"] = w6;
                            w1.Add(w6);
                            Gtk.Table.TableChild w7 = ((Gtk.Table.TableChild)(w1[w6]));
                            w7.XOptions = ((Gtk.AttachOptions)(4));
                            w7.YOptions = ((Gtk.AttachOptions)(0));
                            // Container child table1.Gtk.Table+TableChild
                            Gtk.Label w8 = new Gtk.Label();
                            w8.LabelProp = Mono.Unix.Catalog.GetString("Server:");
                            w8.Xalign = 0F;
                            w8.Events = ((Gdk.EventMask)(0));
                            w8.Name = "label11";
                            bindings["label11"] = w8;
                            w1.Add(w8);
                            Gtk.Table.TableChild w9 = ((Gtk.Table.TableChild)(w1[w8]));
                            w9.TopAttach = ((uint)(3));
                            w9.BottomAttach = ((uint)(4));
                            w9.XOptions = ((Gtk.AttachOptions)(4));
                            w9.YOptions = ((Gtk.AttachOptions)(0));
                            // Container child table1.Gtk.Table+TableChild
                            Gtk.Label w10 = new Gtk.Label();
                            w10.LabelProp = Mono.Unix.Catalog.GetString("Port:");
                            w10.Xalign = 0F;
                            w10.Events = ((Gdk.EventMask)(0));
                            w10.Name = "label6";
                            bindings["label6"] = w10;
                            w1.Add(w10);
                            Gtk.Table.TableChild w11 = ((Gtk.Table.TableChild)(w1[w10]));
                            w11.TopAttach = ((uint)(4));
                            w11.BottomAttach = ((uint)(5));
                            w11.XOptions = ((Gtk.AttachOptions)(4));
                            w11.YOptions = ((Gtk.AttachOptions)(0));
                            // Container child table1.Gtk.Table+TableChild
                            Gtk.Label w12 = new Gtk.Label();
                            w12.LabelProp = Mono.Unix.Catalog.GetString("Path:");
                            w12.Xalign = 0F;
                            w12.Events = ((Gdk.EventMask)(0));
                            w12.Name = "label7";
                            bindings["label7"] = w12;
                            w1.Add(w12);
                            Gtk.Table.TableChild w13 = ((Gtk.Table.TableChild)(w1[w12]));
                            w13.TopAttach = ((uint)(5));
                            w13.BottomAttach = ((uint)(6));
                            w13.XOptions = ((Gtk.AttachOptions)(4));
                            w13.YOptions = ((Gtk.AttachOptions)(0));
                            // Container child table1.Gtk.Table+TableChild
                            Gtk.Label w14 = new Gtk.Label();
                            w14.LabelProp = Mono.Unix.Catalog.GetString("User:");
                            w14.Xalign = 0F;
                            w14.Events = ((Gdk.EventMask)(0));
                            w14.Name = "label8";
                            bindings["label8"] = w14;
                            w1.Add(w14);
                            Gtk.Table.TableChild w15 = ((Gtk.Table.TableChild)(w1[w14]));
                            w15.TopAttach = ((uint)(7));
                            w15.BottomAttach = ((uint)(8));
                            w15.XOptions = ((Gtk.AttachOptions)(4));
                            w15.YOptions = ((Gtk.AttachOptions)(0));
                            // Container child table1.Gtk.Table+TableChild
                            Gtk.Label w16 = new Gtk.Label();
                            w16.LabelProp = Mono.Unix.Catalog.GetString("Password:");
                            w16.Xalign = 0F;
                            w16.Events = ((Gdk.EventMask)(0));
                            w16.Name = "label9";
                            bindings["label9"] = w16;
                            w1.Add(w16);
                            Gtk.Table.TableChild w17 = ((Gtk.Table.TableChild)(w1[w16]));
                            w17.TopAttach = ((uint)(8));
                            w17.BottomAttach = ((uint)(9));
                            w17.XOptions = ((Gtk.AttachOptions)(4));
                            w17.YOptions = ((Gtk.AttachOptions)(0));
                            // Container child table1.Gtk.Table+TableChild
                            Gtk.Entry w18 = new Gtk.Entry();
                            w18.IsEditable = true;
                            w18.InvisibleChar = '●';
                            w18.CanFocus = true;
                            w18.Events = ((Gdk.EventMask)(0));
                            w18.Name = "repositoryUrlEntry";
                            bindings["repositoryUrlEntry"] = w18;
                            w1.Add(w18);
                            Gtk.Table.TableChild w19 = ((Gtk.Table.TableChild)(w1[w18]));
                            w19.LeftAttach = ((uint)(1));
                            w19.RightAttach = ((uint)(2));
                            w19.YOptions = ((Gtk.AttachOptions)(0));
                            // Container child table1.Gtk.Table+TableChild
                            Gtk.Entry w20 = new Gtk.Entry();
                            w20.IsEditable = true;
                            w20.InvisibleChar = '●';
                            w20.CanFocus = true;
                            w20.Events = ((Gdk.EventMask)(0));
                            w20.Name = "repositoryServerEntry";
                            bindings["repositoryServerEntry"] = w20;
                            w1.Add(w20);
                            Gtk.Table.TableChild w21 = ((Gtk.Table.TableChild)(w1[w20]));
                            w21.TopAttach = ((uint)(3));
                            w21.BottomAttach = ((uint)(4));
                            w21.LeftAttach = ((uint)(1));
                            w21.RightAttach = ((uint)(2));
                            w21.YOptions = ((Gtk.AttachOptions)(0));
                            // Container child table1.Gtk.Table+TableChild
                            Gtk.Entry w22 = new Gtk.Entry();
                            w22.IsEditable = true;
                            w22.InvisibleChar = '●';
                            w22.CanFocus = true;
                            w22.Events = ((Gdk.EventMask)(0));
                            w22.Name = "repositoryPathEntry";
                            bindings["repositoryPathEntry"] = w22;
                            w1.Add(w22);
                            Gtk.Table.TableChild w23 = ((Gtk.Table.TableChild)(w1[w22]));
                            w23.TopAttach = ((uint)(5));
                            w23.BottomAttach = ((uint)(6));
                            w23.LeftAttach = ((uint)(1));
                            w23.RightAttach = ((uint)(2));
                            w23.YOptions = ((Gtk.AttachOptions)(0));
                            // Container child table1.Gtk.Table+TableChild
                            Gtk.Entry w24 = new Gtk.Entry();
                            w24.IsEditable = true;
                            w24.InvisibleChar = '●';
                            w24.CanFocus = true;
                            w24.Events = ((Gdk.EventMask)(0));
                            w24.Name = "repositoryUserEntry";
                            bindings["repositoryUserEntry"] = w24;
                            w1.Add(w24);
                            Gtk.Table.TableChild w25 = ((Gtk.Table.TableChild)(w1[w24]));
                            w25.TopAttach = ((uint)(7));
                            w25.BottomAttach = ((uint)(8));
                            w25.LeftAttach = ((uint)(1));
                            w25.RightAttach = ((uint)(2));
                            w25.YOptions = ((Gtk.AttachOptions)(0));
                            // Container child table1.Gtk.Table+TableChild
                            Gtk.Entry w26 = new Gtk.Entry();
                            w26.IsEditable = true;
                            w26.Visibility = false;
                            w26.InvisibleChar = '●';
                            w26.CanFocus = true;
                            w26.Events = ((Gdk.EventMask)(0));
                            w26.Name = "repositoryPassEntry";
                            bindings["repositoryPassEntry"] = w26;
                            w1.Add(w26);
                            Gtk.Table.TableChild w27 = ((Gtk.Table.TableChild)(w1[w26]));
                            w27.TopAttach = ((uint)(8));
                            w27.BottomAttach = ((uint)(9));
                            w27.LeftAttach = ((uint)(1));
                            w27.RightAttach = ((uint)(2));
                            w27.YOptions = ((Gtk.AttachOptions)(0));
                            // Container child table1.Gtk.Table+TableChild
                            Gtk.HSeparator w28 = new Gtk.HSeparator();
                            w28.Events = ((Gdk.EventMask)(0));
                            w28.Name = "hseparator2";
                            bindings["hseparator2"] = w28;
                            w1.Add(w28);
                            Gtk.Table.TableChild w29 = ((Gtk.Table.TableChild)(w1[w28]));
                            w29.TopAttach = ((uint)(1));
                            w29.BottomAttach = ((uint)(2));
                            w29.RightAttach = ((uint)(2));
                            w29.YPadding = ((uint)(6));
                            w29.XOptions = ((Gtk.AttachOptions)(4));
                            w29.YOptions = ((Gtk.AttachOptions)(4));
                            // Container child table1.Gtk.Table+TableChild
                            Gtk.HSeparator w30 = new Gtk.HSeparator();
                            w30.Events = ((Gdk.EventMask)(0));
                            w30.Name = "hseparator1";
                            bindings["hseparator1"] = w30;
                            w1.Add(w30);
                            Gtk.Table.TableChild w31 = ((Gtk.Table.TableChild)(w1[w30]));
                            w31.TopAttach = ((uint)(6));
                            w31.BottomAttach = ((uint)(7));
                            w31.RightAttach = ((uint)(2));
                            w31.YPadding = ((uint)(6));
                            w31.XOptions = ((Gtk.AttachOptions)(4));
                            w31.YOptions = ((Gtk.AttachOptions)(4));
                            // Container child table1.Gtk.Table+TableChild
                            Gtk.Label w32 = new Gtk.Label();
                            w32.LabelProp = Mono.Unix.Catalog.GetString("Protocol:");
                            w32.Xalign = 0F;
                            w32.Events = ((Gdk.EventMask)(0));
                            w32.Name = "label5";
                            bindings["label5"] = w32;
                            w1.Add(w32);
                            Gtk.Table.TableChild w33 = ((Gtk.Table.TableChild)(w1[w32]));
                            w33.TopAttach = ((uint)(2));
                            w33.BottomAttach = ((uint)(3));
                            w33.XOptions = ((Gtk.AttachOptions)(4));
                            w33.YOptions = ((Gtk.AttachOptions)(4));
                            // Container child table1.Gtk.Table+TableChild
                            Gtk.HBox w34 = new Gtk.HBox();
                            w34.Events = ((Gdk.EventMask)(0));
                            w34.Name = "hbox2";
                            // Container child hbox2.Gtk.Box+BoxChild
                            Gtk.SpinButton w35 = new Gtk.SpinButton(0, 100, 1);
                            w35.Adjustment.PageIncrement = 10;
                            w35.Adjustment.PageSize = 10;
                            w35.ClimbRate = 1;
                            w35.Numeric = true;
                            w35.Value = 1;
                            w35.CanFocus = true;
                            w35.Events = ((Gdk.EventMask)(0));
                            w35.Name = "repositoryPortSpin";
                            bindings["repositoryPortSpin"] = w35;
                            w34.Add(w35);
                            Gtk.Box.BoxChild w36 = ((Gtk.Box.BoxChild)(w34[w35]));
                            w36.Position = 0;
                            w36.Expand = false;
                            w36.Fill = false;
                            bindings["hbox2"] = w34;
                            w1.Add(w34);
                            Gtk.Table.TableChild w37 = ((Gtk.Table.TableChild)(w1[w34]));
                            w37.TopAttach = ((uint)(4));
                            w37.BottomAttach = ((uint)(5));
                            w37.LeftAttach = ((uint)(1));
                            w37.RightAttach = ((uint)(2));
                            w37.XOptions = ((Gtk.AttachOptions)(4));
                            w37.YOptions = ((Gtk.AttachOptions)(4));
                            bindings["table1"] = w1;
                            cobj.Add(w1);
                            bindings["MonoDevelop.VersionControl.UrlBasedRepositoryEditor"] = cobj;
                            w3.Show();
                            w2.Show();
                            w6.Show();
                            w8.Show();
                            w10.Show();
                            w12.Show();
                            w14.Show();
                            w16.Show();
                            w18.Show();
                            w20.Show();
                            w22.Show();
                            w24.Show();
                            w26.Show();
                            w28.Show();
                            w30.Show();
                            w32.Show();
                            w35.Show();
                            w34.Show();
                            w1.Show();
                            cobj.Show();
                            w3.Changed += ((System.EventHandler)(System.Delegate.CreateDelegate(typeof(System.EventHandler), cobj, "OnComboProtocolChanged")));
                            w18.Changed += ((System.EventHandler)(System.Delegate.CreateDelegate(typeof(System.EventHandler), cobj, "OnRepositoryUrlEntryChanged")));
                            w20.Changed += ((System.EventHandler)(System.Delegate.CreateDelegate(typeof(System.EventHandler), cobj, "OnRepositoryServerEntryChanged")));
                            w22.Changed += ((System.EventHandler)(System.Delegate.CreateDelegate(typeof(System.EventHandler), cobj, "OnRepositoryPathEntryChanged")));
                            w24.Changed += ((System.EventHandler)(System.Delegate.CreateDelegate(typeof(System.EventHandler), cobj, "OnRepositoryUserEntryChanged")));
                            w26.Changed += ((System.EventHandler)(System.Delegate.CreateDelegate(typeof(System.EventHandler), cobj, "OnRepositoryPassEntryChanged")));
                            w35.Changed += ((System.EventHandler)(System.Delegate.CreateDelegate(typeof(System.EventHandler), cobj, "OnRepositoryPortSpinChanged")));
                        }
                    }
                }
            }
            System.Reflection.FieldInfo[] fields = obj.GetType().GetFields(((System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.NonPublic) | System.Reflection.BindingFlags.Instance));
            for (int n = 0; (n < fields.Length); n = (n + 1)) {
                System.Reflection.FieldInfo field = fields[n];
                object widget = bindings[field.Name];
                if (((widget != null) && field.FieldType.IsInstanceOfType(widget))) {
                    field.SetValue(obj, widget);
                }
            }
        }
        
        private static void Initialize() {
            Gtk.IconFactory w1 = new Gtk.IconFactory();
            Gtk.IconSet w2 = new Gtk.IconSet(Gdk.Pixbuf.LoadFromResource("repository.png"));
            w1.Add("vcs-repository", w2);
            w1.AddDefault();
        }
    }
    
    internal class BinContainer {
        
        private Gtk.Widget child;
        
        private Gtk.UIManager uimanager;
        
        public static BinContainer Attach(Gtk.Bin bin) {
            BinContainer bc = new BinContainer();
            bin.SizeRequested += new Gtk.SizeRequestedHandler(bc.OnSizeRequested);
            bin.SizeAllocated += new Gtk.SizeAllocatedHandler(bc.OnSizeAllocated);
            bin.Added += new Gtk.AddedHandler(bc.OnAdded);
            return bc;
        }
        
        private void OnSizeRequested(object sender, Gtk.SizeRequestedArgs args) {
            if ((this.child != null)) {
                args.Requisition = this.child.SizeRequest();
            }
        }
        
        private void OnSizeAllocated(object sender, Gtk.SizeAllocatedArgs args) {
            if ((this.child != null)) {
                this.child.Allocation = args.Allocation;
            }
        }
        
        private void OnAdded(object sender, Gtk.AddedArgs args) {
            this.child = args.Widget;
        }
        
        public void SetUiManager(Gtk.UIManager uim) {
            this.uimanager = uim;
            this.child.Realized += new System.EventHandler(this.OnRealized);
        }
        
        private void OnRealized(object sender, System.EventArgs args) {
            if ((this.uimanager != null)) {
                Gtk.Widget w;
                w = this.child.Toplevel;
                if (((w != null) && typeof(Gtk.Window).IsInstanceOfType(w))) {
                    ((Gtk.Window)(w)).AddAccelGroup(this.uimanager.AccelGroup);
                    this.uimanager = null;
                }
            }
        }
    }
    
    internal class ActionGroups {
        
        public static Gtk.ActionGroup GetActionGroup(System.Type type) {
            return Stetic.ActionGroups.GetActionGroup(type.FullName);
        }
        
        public static Gtk.ActionGroup GetActionGroup(string name) {
            return null;
        }
    }
}
